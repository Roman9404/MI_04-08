
MI_06_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  080030d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080030d0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b94  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161f  00000000  00000000  00026bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  000281f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013804  00000000  00000000  00028f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006af2  00000000  00000000  0003c72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ad3d  00000000  00000000  0004321e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdf5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001790  00000000  00000000  000bdfd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003060 	.word	0x08003060

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003060 	.word	0x08003060

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fd71 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 fb5b 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 fc23 	bl	8000c44 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003fe:	f000 fbb7 	bl	8000b70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000402:	4bef      	ldr	r3, [pc, #956]	; (80007c0 <main+0x3d4>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fd41 	bl	8001e8c <HAL_ADCEx_Calibration_Start>
   for (int i = 10; i!=0; i=i-1)
 800040a:	230a      	movs	r3, #10
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e019      	b.n	8000444 <main+0x58>
   {
 	  HAL_ADC_Start(&hadc1);
 8000410:	4beb      	ldr	r3, [pc, #940]	; (80007c0 <main+0x3d4>)
 8000412:	0018      	movs	r0, r3
 8000414:	f001 f92e 	bl	8001674 <HAL_ADC_Start>
 	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000418:	4be9      	ldr	r3, [pc, #932]	; (80007c0 <main+0x3d4>)
 800041a:	2164      	movs	r1, #100	; 0x64
 800041c:	0018      	movs	r0, r3
 800041e:	f001 f9b3 	bl	8001788 <HAL_ADC_PollForConversion>
 	  ADC_value =ADC_value+HAL_ADC_GetValue(&hadc1);
 8000422:	4be7      	ldr	r3, [pc, #924]	; (80007c0 <main+0x3d4>)
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fa3d 	bl	80018a4 <HAL_ADC_GetValue>
 800042a:	0002      	movs	r2, r0
 800042c:	4be5      	ldr	r3, [pc, #916]	; (80007c4 <main+0x3d8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	18d3      	adds	r3, r2, r3
 8000432:	001a      	movs	r2, r3
 8000434:	4be3      	ldr	r3, [pc, #908]	; (80007c4 <main+0x3d8>)
 8000436:	601a      	str	r2, [r3, #0]
 	  HAL_Delay(50);
 8000438:	2032      	movs	r0, #50	; 0x32
 800043a:	f000 fdd1 	bl	8000fe0 <HAL_Delay>
   for (int i = 10; i!=0; i=i-1)
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	3b01      	subs	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1e2      	bne.n	8000410 <main+0x24>
   }
   HAL_ADC_Stop(&hadc1);
 800044a:	4bdd      	ldr	r3, [pc, #884]	; (80007c0 <main+0x3d4>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 f95f 	bl	8001710 <HAL_ADC_Stop>
   HAL_Delay(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f000 fdc4 	bl	8000fe0 <HAL_Delay>
   ADC_value = ADC_value/10;
 8000458:	4bda      	ldr	r3, [pc, #872]	; (80007c4 <main+0x3d8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	210a      	movs	r1, #10
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff fed8 	bl	8000214 <__divsi3>
 8000464:	0003      	movs	r3, r0
 8000466:	001a      	movs	r2, r3
 8000468:	4bd6      	ldr	r3, [pc, #856]	; (80007c4 <main+0x3d8>)
 800046a:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*12*/
	  	  while ((ADC_value>0)&&(ADC_value<=2282))
 800046c:	e117      	b.n	800069e <main+0x2b2>
	  	  {
	  		  int i = 70;
 800046e:	2346      	movs	r3, #70	; 0x46
 8000470:	607b      	str	r3, [r7, #4]

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000472:	4bd5      	ldr	r3, [pc, #852]	; (80007c8 <main+0x3dc>)
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	0018      	movs	r0, r3
 800047a:	f001 ffa1 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800047e:	4bd2      	ldr	r3, [pc, #840]	; (80007c8 <main+0x3dc>)
 8000480:	2201      	movs	r2, #1
 8000482:	2102      	movs	r1, #2
 8000484:	0018      	movs	r0, r3
 8000486:	f001 ff9b 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800048a:	4bcf      	ldr	r3, [pc, #828]	; (80007c8 <main+0x3dc>)
 800048c:	2201      	movs	r2, #1
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0018      	movs	r0, r3
 8000492:	f001 ff95 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	0159      	lsls	r1, r3, #5
 800049a:	23a0      	movs	r3, #160	; 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2201      	movs	r2, #1
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 ff8d 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	0199      	lsls	r1, r3, #6
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 ff85 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd91 	bl	8000fe0 <HAL_Delay>

	  		  /*23*/
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004be:	4bc2      	ldr	r3, [pc, #776]	; (80007c8 <main+0x3dc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	2120      	movs	r1, #32
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 ff7b 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80004ca:	4bbf      	ldr	r3, [pc, #764]	; (80007c8 <main+0x3dc>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	2102      	movs	r1, #2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 ff75 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80004d6:	4bbc      	ldr	r3, [pc, #752]	; (80007c8 <main+0x3dc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 ff6f 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	0159      	lsls	r1, r3, #5
 80004e6:	23a0      	movs	r3, #160	; 0xa0
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2201      	movs	r2, #1
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 ff67 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	0199      	lsls	r1, r3, #6
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2201      	movs	r2, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 ff5f 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fd6b 	bl	8000fe0 <HAL_Delay>

	  		  /*34*/
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800050a:	4baf      	ldr	r3, [pc, #700]	; (80007c8 <main+0x3dc>)
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	0018      	movs	r0, r3
 8000512:	f001 ff55 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000516:	4bac      	ldr	r3, [pc, #688]	; (80007c8 <main+0x3dc>)
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 ff4f 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000522:	4ba9      	ldr	r3, [pc, #676]	; (80007c8 <main+0x3dc>)
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0018      	movs	r0, r3
 800052a:	f001 ff49 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	0159      	lsls	r1, r3, #5
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2200      	movs	r2, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f001 ff41 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	0199      	lsls	r1, r3, #6
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	2201      	movs	r2, #1
 8000548:	0018      	movs	r0, r3
 800054a:	f001 ff39 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd45 	bl	8000fe0 <HAL_Delay>

	  		  /*45*/
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000556:	4b9c      	ldr	r3, [pc, #624]	; (80007c8 <main+0x3dc>)
 8000558:	2201      	movs	r2, #1
 800055a:	2120      	movs	r1, #32
 800055c:	0018      	movs	r0, r3
 800055e:	f001 ff2f 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000562:	4b99      	ldr	r3, [pc, #612]	; (80007c8 <main+0x3dc>)
 8000564:	2200      	movs	r2, #0
 8000566:	2102      	movs	r1, #2
 8000568:	0018      	movs	r0, r3
 800056a:	f001 ff29 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800056e:	4b96      	ldr	r3, [pc, #600]	; (80007c8 <main+0x3dc>)
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0018      	movs	r0, r3
 8000576:	f001 ff23 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	0159      	lsls	r1, r3, #5
 800057e:	23a0      	movs	r3, #160	; 0xa0
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2201      	movs	r2, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f001 ff1b 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	0199      	lsls	r1, r3, #6
 800058e:	23a0      	movs	r3, #160	; 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2201      	movs	r2, #1
 8000594:	0018      	movs	r0, r3
 8000596:	f001 ff13 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fd1f 	bl	8000fe0 <HAL_Delay>

	  		  /*56*/
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005a2:	4b89      	ldr	r3, [pc, #548]	; (80007c8 <main+0x3dc>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 ff09 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005ae:	4b86      	ldr	r3, [pc, #536]	; (80007c8 <main+0x3dc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	2102      	movs	r1, #2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 ff03 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ba:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <main+0x3dc>)
 80005bc:	2201      	movs	r2, #1
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fefd 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	0159      	lsls	r1, r3, #5
 80005ca:	23a0      	movs	r3, #160	; 0xa0
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2201      	movs	r2, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 fef5 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	0199      	lsls	r1, r3, #6
 80005da:	23a0      	movs	r3, #160	; 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2200      	movs	r2, #0
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 feed 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fcf9 	bl	8000fe0 <HAL_Delay>

	  		  /*61*/
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ee:	4b76      	ldr	r3, [pc, #472]	; (80007c8 <main+0x3dc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fee3 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005fa:	4b73      	ldr	r3, [pc, #460]	; (80007c8 <main+0x3dc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fedd 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000606:	4b70      	ldr	r3, [pc, #448]	; (80007c8 <main+0x3dc>)
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fed7 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	0159      	lsls	r1, r3, #5
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fecf 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	0199      	lsls	r1, r3, #6
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2200      	movs	r2, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fec7 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i-30);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3b1e      	subs	r3, #30
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fcd2 	bl	8000fe0 <HAL_Delay>

	  		  ADC_value = 0;
 800063c:	4b61      	ldr	r3, [pc, #388]	; (80007c4 <main+0x3d8>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	  		  for (int i = 3; i!=0; i=i-1)
 8000642:	2303      	movs	r3, #3
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	e019      	b.n	800067c <main+0x290>
	  		  {
	  		  	  HAL_ADC_Start(&hadc1);
 8000648:	4b5d      	ldr	r3, [pc, #372]	; (80007c0 <main+0x3d4>)
 800064a:	0018      	movs	r0, r3
 800064c:	f001 f812 	bl	8001674 <HAL_ADC_Start>
	  		  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <main+0x3d4>)
 8000652:	2164      	movs	r1, #100	; 0x64
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f897 	bl	8001788 <HAL_ADC_PollForConversion>
	  		  	  ADC_value = ADC_value + HAL_ADC_GetValue(&hadc1);
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <main+0x3d4>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 f921 	bl	80018a4 <HAL_ADC_GetValue>
 8000662:	0002      	movs	r2, r0
 8000664:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <main+0x3d8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	18d3      	adds	r3, r2, r3
 800066a:	001a      	movs	r2, r3
 800066c:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <main+0x3d8>)
 800066e:	601a      	str	r2, [r3, #0]
	  		  	  HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f000 fcb5 	bl	8000fe0 <HAL_Delay>
	  		  for (int i = 3; i!=0; i=i-1)
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	3b01      	subs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e2      	bne.n	8000648 <main+0x25c>
	  		  }
	  		    HAL_ADC_Stop(&hadc1);
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <main+0x3d4>)
 8000684:	0018      	movs	r0, r3
 8000686:	f001 f843 	bl	8001710 <HAL_ADC_Stop>
	  		    ADC_value = ADC_value/3;
 800068a:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <main+0x3d8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2103      	movs	r1, #3
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff fdbf 	bl	8000214 <__divsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <main+0x3d8>)
 800069c:	601a      	str	r2, [r3, #0]
	  	  while ((ADC_value>0)&&(ADC_value<=2282))
 800069e:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <main+0x3d8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dc00      	bgt.n	80006a8 <main+0x2bc>
 80006a6:	e07d      	b.n	80007a4 <main+0x3b8>
 80006a8:	4b46      	ldr	r3, [pc, #280]	; (80007c4 <main+0x3d8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a47      	ldr	r2, [pc, #284]	; (80007cc <main+0x3e0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dc00      	bgt.n	80006b4 <main+0x2c8>
 80006b2:	e6dc      	b.n	800046e <main+0x82>


	  	 }

	  	  while ((ADC_value>2282)&&(ADC_value<=3347))
 80006b4:	e076      	b.n	80007a4 <main+0x3b8>
	  	 {
	  		  i=400;
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <main+0x3e4>)
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	601a      	str	r2, [r3, #0]

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <main+0x3dc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fe7b 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80006ca:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <main+0x3dc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	2102      	movs	r1, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fe75 	bl	80023c0 <HAL_GPIO_WritePin>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006d6:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <main+0x3dc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fe6f 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	0159      	lsls	r1, r3, #5
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fe67 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	0199      	lsls	r1, r3, #6
 80006f6:	23a0      	movs	r3, #160	; 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2201      	movs	r2, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fe5f 	bl	80023c0 <HAL_GPIO_WritePin>

	  		  HAL_Delay(i);
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <main+0x3e4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fc6a 	bl	8000fe0 <HAL_Delay>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <main+0x3dc>)
 800070e:	2200      	movs	r2, #0
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fe54 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	0159      	lsls	r1, r3, #5
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2200      	movs	r2, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fe4c 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	0199      	lsls	r1, r3, #6
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2200      	movs	r2, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fe44 	bl	80023c0 <HAL_GPIO_WritePin>

	  		  HAL_Delay(i);
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <main+0x3e4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fc4f 	bl	8000fe0 <HAL_Delay>

	  		  ADC_value = 0;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0x3d8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
	  		  for (int i = 3; i!=0; i=i-1)
 8000748:	2303      	movs	r3, #3
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e019      	b.n	8000782 <main+0x396>
	  		  {
	  		  	  HAL_ADC_Start(&hadc1);
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <main+0x3d4>)
 8000750:	0018      	movs	r0, r3
 8000752:	f000 ff8f 	bl	8001674 <HAL_ADC_Start>
	  		  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <main+0x3d4>)
 8000758:	2164      	movs	r1, #100	; 0x64
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f814 	bl	8001788 <HAL_ADC_PollForConversion>
	  		  	  ADC_value = ADC_value + HAL_ADC_GetValue(&hadc1);
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <main+0x3d4>)
 8000762:	0018      	movs	r0, r3
 8000764:	f001 f89e 	bl	80018a4 <HAL_ADC_GetValue>
 8000768:	0002      	movs	r2, r0
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <main+0x3d8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	18d3      	adds	r3, r2, r3
 8000770:	001a      	movs	r2, r3
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <main+0x3d8>)
 8000774:	601a      	str	r2, [r3, #0]
	  		  	  HAL_Delay(10);
 8000776:	200a      	movs	r0, #10
 8000778:	f000 fc32 	bl	8000fe0 <HAL_Delay>
	  		  for (int i = 3; i!=0; i=i-1)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3b01      	subs	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1e2      	bne.n	800074e <main+0x362>
	  		  }
	  		    HAL_ADC_Stop(&hadc1);
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <main+0x3d4>)
 800078a:	0018      	movs	r0, r3
 800078c:	f000 ffc0 	bl	8001710 <HAL_ADC_Stop>
	  		    ADC_value = ADC_value/3;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x3d8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2103      	movs	r1, #3
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff fd3c 	bl	8000214 <__divsi3>
 800079c:	0003      	movs	r3, r0
 800079e:	001a      	movs	r2, r3
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <main+0x3d8>)
 80007a2:	601a      	str	r2, [r3, #0]
	  	  while ((ADC_value>2282)&&(ADC_value<=3347))
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <main+0x3d8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <main+0x3e0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	dc00      	bgt.n	80007b0 <main+0x3c4>
 80007ae:	e165      	b.n	8000a7c <main+0x690>
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <main+0x3d8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <main+0x3e8>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	dc00      	bgt.n	80007bc <main+0x3d0>
 80007ba:	e77c      	b.n	80006b6 <main+0x2ca>
	  	 }

	  	  while ((ADC_value>3347)&&(ADC_value<=4095))
 80007bc:	e15e      	b.n	8000a7c <main+0x690>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000030 	.word	0x20000030
 80007c4:	2000002c 	.word	0x2000002c
 80007c8:	50000400 	.word	0x50000400
 80007cc:	000008ea 	.word	0x000008ea
 80007d0:	20000000 	.word	0x20000000
 80007d4:	00000d13 	.word	0x00000d13
	  	 {
	  		  i=50;
 80007d8:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <main+0x6ac>)
 80007da:	2232      	movs	r2, #50	; 0x32
 80007dc:	601a      	str	r2, [r3, #0]

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007de:	4baf      	ldr	r3, [pc, #700]	; (8000a9c <main+0x6b0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fdeb 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007ea:	4bac      	ldr	r3, [pc, #688]	; (8000a9c <main+0x6b0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2102      	movs	r1, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fde5 	bl	80023c0 <HAL_GPIO_WritePin>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007f6:	4ba9      	ldr	r3, [pc, #676]	; (8000a9c <main+0x6b0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 fddf 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	0159      	lsls	r1, r3, #5
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2201      	movs	r2, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fdd7 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	0199      	lsls	r1, r3, #6
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2201      	movs	r2, #1
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fdcf 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 8000822:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <main+0x6ac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fbda 	bl	8000fe0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800082c:	4b9b      	ldr	r3, [pc, #620]	; (8000a9c <main+0x6b0>)
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fdc4 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	0159      	lsls	r1, r3, #5
 800083c:	23a0      	movs	r3, #160	; 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2200      	movs	r2, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fdbc 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	0199      	lsls	r1, r3, #6
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2200      	movs	r2, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fdb4 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 8000858:	4b8f      	ldr	r3, [pc, #572]	; (8000a98 <main+0x6ac>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fbbf 	bl	8000fe0 <HAL_Delay>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000862:	4b8e      	ldr	r3, [pc, #568]	; (8000a9c <main+0x6b0>)
 8000864:	2201      	movs	r2, #1
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fda9 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	0159      	lsls	r1, r3, #5
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fda1 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	0199      	lsls	r1, r3, #6
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2201      	movs	r2, #1
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fd99 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 800088e:	4b82      	ldr	r3, [pc, #520]	; (8000a98 <main+0x6ac>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fba4 	bl	8000fe0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000898:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <main+0x6b0>)
 800089a:	2200      	movs	r2, #0
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fd8e 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	0159      	lsls	r1, r3, #5
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fd86 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	0199      	lsls	r1, r3, #6
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2200      	movs	r2, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fd7e 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 80008c4:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <main+0x6ac>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fb89 	bl	8000fe0 <HAL_Delay>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80008ce:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <main+0x6b0>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fd73 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	0159      	lsls	r1, r3, #5
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2201      	movs	r2, #1
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fd6b 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	0199      	lsls	r1, r3, #6
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fd63 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 80008fa:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <main+0x6ac>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fb6e 	bl	8000fe0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000904:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <main+0x6b0>)
 8000906:	2200      	movs	r2, #0
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fd58 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2200      	movs	r2, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fd50 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	0199      	lsls	r1, r3, #6
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	2200      	movs	r2, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fd48 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <main+0x6ac>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fb53 	bl	8000fe0 <HAL_Delay>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800093a:	4b58      	ldr	r3, [pc, #352]	; (8000a9c <main+0x6b0>)
 800093c:	2201      	movs	r2, #1
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fd3d 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	0159      	lsls	r1, r3, #5
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2201      	movs	r2, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fd35 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	0199      	lsls	r1, r3, #6
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2201      	movs	r2, #1
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fd2d 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <main+0x6ac>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fb38 	bl	8000fe0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000970:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <main+0x6b0>)
 8000972:	2200      	movs	r2, #0
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fd22 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	0159      	lsls	r1, r3, #5
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f001 fd1a 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	0199      	lsls	r1, r3, #6
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2200      	movs	r2, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f001 fd12 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 800099c:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <main+0x6ac>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fb1d 	bl	8000fe0 <HAL_Delay>

	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <main+0x6b0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fd07 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	0159      	lsls	r1, r3, #5
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2201      	movs	r2, #1
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 fcff 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	0199      	lsls	r1, r3, #6
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2201      	movs	r2, #1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fcf7 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i);
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <main+0x6ac>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fb02 	bl	8000fe0 <HAL_Delay>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <main+0x6b0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fcec 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	0159      	lsls	r1, r3, #5
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fce4 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	0199      	lsls	r1, r3, #6
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2200      	movs	r2, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fcdc 	bl	80023c0 <HAL_GPIO_WritePin>
	  		  HAL_Delay(i*10);
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <main+0x6ac>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	189b      	adds	r3, r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fae3 	bl	8000fe0 <HAL_Delay>

	  		  ADC_value = 0;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <main+0x6b4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
	  		  for (int i = 3; i!=0; i=i-1)
 8000a20:	2303      	movs	r3, #3
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e019      	b.n	8000a5a <main+0x66e>
	  		  {
	  		  	  HAL_ADC_Start(&hadc1);
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <main+0x6b8>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fe23 	bl	8001674 <HAL_ADC_Start>
	  		  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <main+0x6b8>)
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fea8 	bl	8001788 <HAL_ADC_PollForConversion>
	  		  	  ADC_value = ADC_value + HAL_ADC_GetValue(&hadc1);
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <main+0x6b8>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 ff32 	bl	80018a4 <HAL_ADC_GetValue>
 8000a40:	0002      	movs	r2, r0
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <main+0x6b4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	18d3      	adds	r3, r2, r3
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <main+0x6b4>)
 8000a4c:	601a      	str	r2, [r3, #0]
	  		  	  HAL_Delay(5);
 8000a4e:	2005      	movs	r0, #5
 8000a50:	f000 fac6 	bl	8000fe0 <HAL_Delay>
	  		  for (int i = 3; i!=0; i=i-1)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1e2      	bne.n	8000a26 <main+0x63a>
	  		  }
	  		    HAL_ADC_Stop(&hadc1);
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <main+0x6b8>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fe54 	bl	8001710 <HAL_ADC_Stop>
	  		    ADC_value = ADC_value/3;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <main+0x6b4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fbd0 	bl	8000214 <__divsi3>
 8000a74:	0003      	movs	r3, r0
 8000a76:	001a      	movs	r2, r3
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <main+0x6b4>)
 8000a7a:	601a      	str	r2, [r3, #0]
	  	  while ((ADC_value>3347)&&(ADC_value<=4095))
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <main+0x6b4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <main+0x6bc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	dc00      	bgt.n	8000a88 <main+0x69c>
 8000a86:	e60a      	b.n	800069e <main+0x2b2>
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <main+0x6b4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <main+0x6c0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	dc00      	bgt.n	8000a94 <main+0x6a8>
 8000a92:	e6a1      	b.n	80007d8 <main+0x3ec>
	  	  while ((ADC_value>0)&&(ADC_value<=2282))
 8000a94:	e603      	b.n	800069e <main+0x2b2>
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	50000400 	.word	0x50000400
 8000aa0:	2000002c 	.word	0x2000002c
 8000aa4:	20000030 	.word	0x20000030
 8000aa8:	00000d13 	.word	0x00000d13
 8000aac:	00000fff 	.word	0x00000fff

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b099      	sub	sp, #100	; 0x64
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	242c      	movs	r4, #44	; 0x2c
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	0018      	movs	r0, r3
 8000abc:	2334      	movs	r3, #52	; 0x34
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f002 fac5 	bl	8003050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac6:	231c      	movs	r3, #28
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	0018      	movs	r0, r3
 8000acc:	2310      	movs	r3, #16
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f002 fabd 	bl	8003050 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2318      	movs	r3, #24
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f002 fab6 	bl	8003050 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fc87 	bl	80023fc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2202      	movs	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2240      	movs	r2, #64	; 0x40
 8000b06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 fcb3 	bl	800247c <HAL_RCC_OscConfig>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f91f 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	211c      	movs	r1, #28
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2207      	movs	r2, #7
 8000b24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 ffb3 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f909 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	01d2      	lsls	r2, r2, #7
 8000b50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 f92e 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b64:	f000 f8fa 	bl	8000d5c <Error_Handler>
  }
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b019      	add	sp, #100	; 0x64
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f002 fa66 	bl	8003050 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <MX_ADC1_Init+0xd0>)
 8000b88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	05d2      	lsls	r2, r2, #23
 8000b90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bd8:	222c      	movs	r2, #44	; 0x2c
 8000bda:	2100      	movs	r1, #0
 8000bdc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bf2:	223c      	movs	r2, #60	; 0x3c
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fb61 	bl	80012c8 <HAL_ADC_Init>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000c0a:	f000 f8a7 	bl	8000d5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	1d3a      	adds	r2, r7, #4
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_ADC1_Init+0xcc>)
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fe48 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000c30:	f000 f894 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b004      	add	sp, #16
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000030 	.word	0x20000030
 8000c40:	40012400 	.word	0x40012400

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	240c      	movs	r4, #12
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	0018      	movs	r0, r3
 8000c50:	2314      	movs	r3, #20
 8000c52:	001a      	movs	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	f002 f9fb 	bl	8003050 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <MX_GPIO_Init+0x110>)
 8000c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <MX_GPIO_Init+0x110>)
 8000c60:	2102      	movs	r1, #2
 8000c62:	430a      	orrs	r2, r1
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
 8000c66:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <MX_GPIO_Init+0x110>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <MX_GPIO_Init+0x110>)
 8000c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c76:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <MX_GPIO_Init+0x110>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7e:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <MX_GPIO_Init+0x110>)
 8000c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c82:	2201      	movs	r2, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <MX_GPIO_Init+0x114>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	21a2      	movs	r1, #162	; 0xa2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f001 fb95 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	0199      	lsls	r1, r3, #6
 8000c9a:	23a0      	movs	r3, #160	; 0xa0
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fb8d 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ca6:	0021      	movs	r1, r4
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <MX_GPIO_Init+0x114>)
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	0010      	movs	r0, r2
 8000cca:	f001 fa15 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000cce:	0021      	movs	r1, r4
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2222      	movs	r2, #34	; 0x22
 8000cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	000c      	movs	r4, r1
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <MX_GPIO_Init+0x114>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f001 fa01 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	0152      	lsls	r2, r2, #5
 8000cfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2201      	movs	r2, #1
 8000d04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	000c      	movs	r4, r1
 8000d14:	187a      	adds	r2, r7, r1
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f001 f9eb 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d22:	0021      	movs	r1, r4
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0192      	lsls	r2, r2, #6
 8000d2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2201      	movs	r2, #1
 8000d30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2202      	movs	r2, #2
 8000d36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	187a      	adds	r2, r7, r1
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 f9d6 	bl	80020f8 <HAL_GPIO_Init>

}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b009      	add	sp, #36	; 0x24
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	50000400 	.word	0x50000400

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x44>)
 8000d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_MspInit+0x44>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x44>)
 8000d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x44>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0549      	lsls	r1, r1, #21
 8000d90:	430a      	orrs	r2, r1
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_MspInit+0x44>)
 8000d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	055b      	lsls	r3, r3, #21
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	2314      	movs	r3, #20
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2314      	movs	r3, #20
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f002 f944 	bl	8003050 <memset>
  if(hadc->Instance==ADC1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_ADC_MspInit+0x80>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12a      	bne.n	8000e28 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_ADC_MspInit+0x84>)
 8000dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_ADC_MspInit+0x84>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	0349      	lsls	r1, r1, #13
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	641a      	str	r2, [r3, #64]	; 0x40
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_ADC_MspInit+0x84>)
 8000de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	035b      	lsls	r3, r3, #13
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_ADC_MspInit+0x84>)
 8000df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_ADC_MspInit+0x84>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	430a      	orrs	r2, r1
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_ADC_MspInit+0x84>)
 8000dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e06:	2114      	movs	r1, #20
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2203      	movs	r2, #3
 8000e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	23a0      	movs	r3, #160	; 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 f968 	bl	80020f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b00a      	add	sp, #40	; 0x28
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40012400 	.word	0x40012400
 8000e34:	40021000 	.word	0x40021000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f8a4 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <SystemInit+0x14>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	0512      	lsls	r2, r2, #20
 8000e76:	609a      	str	r2, [r3, #8]
#endif
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e8a:	e003      	b.n	8000e94 <LoopCopyDataInit>

08000e8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e92:	3104      	adds	r1, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000e98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e9c:	d3f6      	bcc.n	8000e8c <CopyDataInit>
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopForever+0x12>)
  b LoopFillZerobss
 8000ea0:	e002      	b.n	8000ea8 <LoopFillZerobss>

08000ea2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ea4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea6:	3204      	adds	r2, #4

08000ea8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <LoopForever+0x16>)
  cmp r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eac:	d3f9      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eae:	f7ff ffdd 	bl	8000e6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000eb2:	f002 f8a9 	bl	8003008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff fa99 	bl	80003ec <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   r0, =_estack
 8000ebc:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000ec0:	080030c0 	.word	0x080030c0
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ec8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000ecc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000ed0:	20000098 	.word	0x20000098

08000ed4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x3c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Init+0x3c>)
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	0049      	lsls	r1, r1, #1
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f810 	bl	8000f18 <HAL_InitTick>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff ff30 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_InitTick+0x88>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d02b      	beq.n	8000f88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_InitTick+0x8c>)
 8000f32:	681c      	ldr	r4, [r3, #0]
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_InitTick+0x88>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0019      	movs	r1, r3
 8000f3a:	23fa      	movs	r3, #250	; 0xfa
 8000f3c:	0098      	lsls	r0, r3, #2
 8000f3e:	f7ff f8df 	bl	8000100 <__udivsi3>
 8000f42:	0003      	movs	r3, r0
 8000f44:	0019      	movs	r1, r3
 8000f46:	0020      	movs	r0, r4
 8000f48:	f7ff f8da 	bl	8000100 <__udivsi3>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 f8c5 	bl	80020de <HAL_SYSTICK_Config>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d112      	bne.n	8000f7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d80a      	bhi.n	8000f74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 f8a4 	bl	80020b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_InitTick+0x90>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e00d      	b.n	8000f90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e008      	b.n	8000f90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7e:	230f      	movs	r3, #15
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e003      	b.n	8000f90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781b      	ldrb	r3, [r3, #0]
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b005      	add	sp, #20
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_IncTick+0x18>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	18d2      	adds	r2, r2, r3
 8000fba:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <HAL_IncTick+0x18>)
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000094 	.word	0x20000094
 8000fc8:	2000000c 	.word	0x2000000c

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	20000094 	.word	0x20000094

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fff0 	bl	8000fcc <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	d004      	beq.n	8001004 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_Delay+0x40>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	f7ff ffe1 	bl	8000fcc <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	429a      	cmp	r2, r3
 8001014:	d8f7      	bhi.n	8001006 <HAL_Delay+0x26>
  {
  }
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	2000000c 	.word	0x2000000c

08001024 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001034:	401a      	ands	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	fe3fffff 	.word	0xfe3fffff

0800104c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	23e0      	movs	r3, #224	; 0xe0
 800105a:	045b      	lsls	r3, r3, #17
 800105c:	4013      	ands	r3, r2
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}

08001066 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	2104      	movs	r1, #4
 800107a:	400a      	ands	r2, r1
 800107c:	2107      	movs	r1, #7
 800107e:	4091      	lsls	r1, r2
 8001080:	000a      	movs	r2, r1
 8001082:	43d2      	mvns	r2, r2
 8001084:	401a      	ands	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2104      	movs	r1, #4
 800108a:	400b      	ands	r3, r1
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4099      	lsls	r1, r3
 8001090:	000b      	movs	r3, r1
 8001092:	431a      	orrs	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	23c0      	movs	r3, #192	; 0xc0
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4013      	ands	r3, r2
 80010b2:	d101      	bne.n	80010b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	211f      	movs	r1, #31
 80010d6:	400a      	ands	r2, r1
 80010d8:	210f      	movs	r1, #15
 80010da:	4091      	lsls	r1, r2
 80010dc:	000a      	movs	r2, r1
 80010de:	43d2      	mvns	r2, r2
 80010e0:	401a      	ands	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0e9b      	lsrs	r3, r3, #26
 80010e6:	210f      	movs	r1, #15
 80010e8:	4019      	ands	r1, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	201f      	movs	r0, #31
 80010ee:	4003      	ands	r3, r0
 80010f0:	4099      	lsls	r1, r3
 80010f2:	000b      	movs	r3, r1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}

08001102 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	035b      	lsls	r3, r3, #13
 8001114:	0b5b      	lsrs	r3, r3, #13
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	0352      	lsls	r2, r2, #13
 8001136:	0b52      	lsrs	r2, r2, #13
 8001138:	43d2      	mvns	r2, r2
 800113a:	401a      	ands	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}

08001148 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	0212      	lsls	r2, r2, #8
 800115c:	43d2      	mvns	r2, r2
 800115e:	401a      	ands	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	400b      	ands	r3, r1
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <LL_ADC_SetChannelSamplingTime+0x34>)
 800116a:	400b      	ands	r3, r1
 800116c:	431a      	orrs	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	07ffff00 	.word	0x07ffff00

08001180 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800118e:	4013      	ands	r3, r2
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	0552      	lsls	r2, r2, #21
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	6fffffe8 	.word	0x6fffffe8

080011a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	055b      	lsls	r3, r3, #21
 80011b8:	401a      	ands	r2, r3
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	055b      	lsls	r3, r3, #21
 80011be:	429a      	cmp	r2, r3
 80011c0:	d101      	bne.n	80011c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <LL_ADC_Enable+0x20>)
 80011de:	4013      	ands	r3, r2
 80011e0:	2201      	movs	r2, #1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	7fffffe8 	.word	0x7fffffe8

080011f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <LL_ADC_Disable+0x20>)
 8001202:	4013      	ands	r3, r2
 8001204:	2202      	movs	r2, #2
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	7fffffe8 	.word	0x7fffffe8

08001218 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2201      	movs	r2, #1
 8001226:	4013      	ands	r3, r2
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <LL_ADC_IsEnabled+0x18>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <LL_ADC_IsEnabled+0x1a>
 8001230:	2300      	movs	r3, #0
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}

0800123a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2202      	movs	r2, #2
 8001248:	4013      	ands	r3, r2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsDisableOngoing+0x18>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsDisableOngoing+0x1a>
 8001252:	2300      	movs	r3, #0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}

0800125c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <LL_ADC_REG_StartConversion+0x20>)
 800126a:	4013      	ands	r3, r2
 800126c:	2204      	movs	r2, #4
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	7fffffe8 	.word	0x7fffffe8

08001280 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <LL_ADC_REG_StopConversion+0x20>)
 800128e:	4013      	ands	r3, r2
 8001290:	2210      	movs	r2, #16
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	7fffffe8 	.word	0x7fffffe8

080012a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2204      	movs	r2, #4
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d101      	bne.n	80012bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012bc:	2300      	movs	r3, #0
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	231f      	movs	r3, #31
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e1aa      	b.n	8001644 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10a      	bne.n	800130c <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fd59 	bl	8000db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2254      	movs	r2, #84	; 0x54
 8001308:	2100      	movs	r1, #0
 800130a:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff49 	bl	80011a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d114      	bne.n	8001344 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff ff2e 	bl	8001180 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001324:	4bc9      	ldr	r3, [pc, #804]	; (800164c <HAL_ADC_Init+0x384>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	49c9      	ldr	r1, [pc, #804]	; (8001650 <HAL_ADC_Init+0x388>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe fee8 	bl	8000100 <__udivsi3>
 8001330:	0003      	movs	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8001336:	e002      	b.n	800133e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3b01      	subs	r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff ff2d 	bl	80011a8 <LL_ADC_IsInternalRegulatorEnabled>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d10f      	bne.n	8001372 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	2210      	movs	r2, #16
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2201      	movs	r2, #1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800136a:	231f      	movs	r3, #31
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff ff94 	bl	80012a4 <LL_ADC_REG_IsConversionOngoing>
 800137c:	0003      	movs	r3, r0
 800137e:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	2210      	movs	r2, #16
 8001386:	4013      	ands	r3, r2
 8001388:	d000      	beq.n	800138c <HAL_ADC_Init+0xc4>
 800138a:	e14e      	b.n	800162a <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d000      	beq.n	8001394 <HAL_ADC_Init+0xcc>
 8001392:	e14a      	b.n	800162a <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	4aae      	ldr	r2, [pc, #696]	; (8001654 <HAL_ADC_Init+0x38c>)
 800139a:	4013      	ands	r3, r2
 800139c:	2202      	movs	r2, #2
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff35 	bl	8001218 <LL_ADC_IsEnabled>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d137      	bne.n	8001422 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2218      	movs	r2, #24
 80013ba:	4393      	bics	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	0899      	lsrs	r1, r3, #2
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	0f9b      	lsrs	r3, r3, #30
 80013da:	079a      	lsls	r2, r3, #30
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	23c0      	movs	r3, #192	; 0xc0
 80013ea:	061b      	lsls	r3, r3, #24
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d018      	beq.n	8001422 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	05db      	lsls	r3, r3, #23
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d012      	beq.n	8001422 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	061b      	lsls	r3, r3, #24
 8001404:	429a      	cmp	r2, r3
 8001406:	d00c      	beq.n	8001422 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8001408:	4b93      	ldr	r3, [pc, #588]	; (8001658 <HAL_ADC_Init+0x390>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a93      	ldr	r2, [pc, #588]	; (800165c <HAL_ADC_Init+0x394>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	23f0      	movs	r3, #240	; 0xf0
 8001418:	039b      	lsls	r3, r3, #14
 800141a:	401a      	ands	r2, r3
 800141c:	4b8e      	ldr	r3, [pc, #568]	; (8001658 <HAL_ADC_Init+0x390>)
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7e1b      	ldrb	r3, [r3, #24]
 8001426:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e5b      	ldrb	r3, [r3, #25]
 800142c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800142e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e9b      	ldrb	r3, [r3, #26]
 8001434:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001436:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <HAL_ADC_Init+0x17e>
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	015b      	lsls	r3, r3, #5
 8001444:	e000      	b.n	8001448 <HAL_ADC_Init+0x180>
 8001446:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001448:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800144e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da04      	bge.n	8001462 <HAL_ADC_Init+0x19a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	e001      	b.n	8001466 <HAL_ADC_Init+0x19e>
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8001466:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	5c5b      	ldrb	r3, [r3, r1]
 800146e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001470:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d115      	bne.n	80014ae <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7e9b      	ldrb	r3, [r3, #26]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	0252      	lsls	r2, r2, #9
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	e00b      	b.n	80014ae <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	2220      	movs	r2, #32
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2201      	movs	r2, #1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ba:	23e0      	movs	r3, #224	; 0xe0
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80014d4:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 80014da:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 80014e0:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	223c      	movs	r2, #60	; 0x3c
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d103      	bne.n	80014fa <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4313      	orrs	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4a57      	ldr	r2, [pc, #348]	; (8001660 <HAL_ADC_Init+0x398>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	430a      	orrs	r2, r1
 800150e:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4a53      	ldr	r2, [pc, #332]	; (8001664 <HAL_ADC_Init+0x39c>)
 8001518:	4013      	ands	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	430a      	orrs	r2, r1
 8001524:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f7ff fd98 	bl	8001066 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	494a      	ldr	r1, [pc, #296]	; (8001668 <HAL_ADC_Init+0x3a0>)
 8001540:	001a      	movs	r2, r3
 8001542:	f7ff fd90 	bl	8001066 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2110      	movs	r1, #16
 800155a:	4249      	negs	r1, r1
 800155c:	430a      	orrs	r2, r1
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
 8001560:	e03c      	b.n	80015dc <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	039b      	lsls	r3, r3, #14
 800156a:	429a      	cmp	r2, r3
 800156c:	d136      	bne.n	80015dc <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e00c      	b.n	800158e <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	40da      	lsrs	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	220f      	movs	r2, #15
 8001582:	4013      	ands	r3, r2
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d006      	beq.n	8001596 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	3301      	adds	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b07      	cmp	r3, #7
 8001592:	d9ef      	bls.n	8001574 <HAL_ADC_Init+0x2ac>
 8001594:	e000      	b.n	8001598 <HAL_ADC_Init+0x2d0>
        {
          break;
 8001596:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d109      	bne.n	80015b2 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2110      	movs	r1, #16
 80015aa:	4249      	negs	r1, r1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
 80015b0:	e014      	b.n	80015dc <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a2b      	ldr	r2, [pc, #172]	; (800166c <HAL_ADC_Init+0x3a4>)
 80015be:	4694      	mov	ip, r2
 80015c0:	4463      	add	r3, ip
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	221c      	movs	r2, #28
 80015c6:	4013      	ands	r3, r2
 80015c8:	2210      	movs	r2, #16
 80015ca:	4252      	negs	r2, r2
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0011      	movs	r1, r2
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <HAL_ADC_Init+0x3a8>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	2203      	movs	r2, #3
 80015f8:	4393      	bics	r3, r2
 80015fa:	2201      	movs	r2, #1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001602:	e01c      	b.n	800163e <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	2212      	movs	r2, #18
 800160a:	4393      	bics	r3, r2
 800160c:	2210      	movs	r2, #16
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2201      	movs	r2, #1
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8001620:	231f      	movs	r3, #31
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001628:	e009      	b.n	800163e <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	2210      	movs	r2, #16
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001636:	231f      	movs	r3, #31
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800163e:	231f      	movs	r3, #31
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b008      	add	sp, #32
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000004 	.word	0x20000004
 8001650:	00030d40 	.word	0x00030d40
 8001654:	fffffefd 	.word	0xfffffefd
 8001658:	40012708 	.word	0x40012708
 800165c:	ffc3ffff 	.word	0xffc3ffff
 8001660:	fffe0219 	.word	0xfffe0219
 8001664:	dffffc02 	.word	0xdffffc02
 8001668:	07ffff04 	.word	0x07ffff04
 800166c:	3fffffff 	.word	0x3fffffff
 8001670:	833fffe7 	.word	0x833fffe7

08001674 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff fe0f 	bl	80012a4 <LL_ADC_REG_IsConversionOngoing>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d135      	bne.n	80016f6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2254      	movs	r2, #84	; 0x54
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_Start+0x24>
 8001694:	2302      	movs	r3, #2
 8001696:	e035      	b.n	8001704 <HAL_ADC_Start+0x90>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2254      	movs	r2, #84	; 0x54
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016a0:	250f      	movs	r5, #15
 80016a2:	197c      	adds	r4, r7, r5
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 fb18 	bl	8001cdc <ADC_Enable>
 80016ac:	0003      	movs	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d119      	bne.n	80016ec <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_ADC_Start+0x98>)
 80016be:	4013      	ands	r3, r2
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0052      	lsls	r2, r2, #1
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	221c      	movs	r2, #28
 80016d6:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2254      	movs	r2, #84	; 0x54
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fdb9 	bl	800125c <LL_ADC_REG_StartConversion>
 80016ea:	e008      	b.n	80016fe <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2254      	movs	r2, #84	; 0x54
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]
 80016f4:	e003      	b.n	80016fe <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f6:	230f      	movs	r3, #15
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2202      	movs	r2, #2
 80016fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016fe:	230f      	movs	r3, #15
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	781b      	ldrb	r3, [r3, #0]
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	fffff0fe 	.word	0xfffff0fe

08001710 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2254      	movs	r2, #84	; 0x54
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Stop+0x16>
 8001722:	2302      	movs	r3, #2
 8001724:	e02a      	b.n	800177c <HAL_ADC_Stop+0x6c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2254      	movs	r2, #84	; 0x54
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800172e:	250f      	movs	r5, #15
 8001730:	197c      	adds	r4, r7, r5
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f000 fa95 	bl	8001c64 <ADC_ConversionStop>
 800173a:	0003      	movs	r3, r0
 800173c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800173e:	197b      	adds	r3, r7, r5
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d113      	bne.n	800176e <HAL_ADC_Stop+0x5e>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001746:	250f      	movs	r5, #15
 8001748:	197c      	adds	r4, r7, r5
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fb21 	bl	8001d94 <ADC_Disable>
 8001752:	0003      	movs	r3, r0
 8001754:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001756:	197b      	adds	r3, r7, r5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d107      	bne.n	800176e <HAL_ADC_Stop+0x5e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_ADC_Stop+0x74>)
 8001764:	4013      	ands	r3, r2
 8001766:	2201      	movs	r2, #1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2254      	movs	r2, #84	; 0x54
 8001772:	2100      	movs	r1, #0
 8001774:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001776:	230f      	movs	r3, #15
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bdb0      	pop	{r4, r5, r7, pc}
 8001784:	fffffefe 	.word	0xfffffefe

08001788 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d102      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800179a:	2308      	movs	r3, #8
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e00f      	b.n	80017c0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	2220      	movs	r2, #32
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e06c      	b.n	8001896 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80017bc:	2304      	movs	r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80017c0:	f7ff fc04 	bl	8000fcc <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017c8:	e019      	b.n	80017fe <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	d016      	beq.n	80017fe <HAL_ADC_PollForConversion+0x76>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017d0:	f7ff fbfc 	bl	8000fcc <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d302      	bcc.n	80017e6 <HAL_ADC_PollForConversion+0x5e>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	2204      	movs	r2, #4
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2254      	movs	r2, #84	; 0x54
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04b      	b.n	8001896 <HAL_ADC_PollForConversion+0x10e>
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	d0df      	beq.n	80017ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fc3f 	bl	80010a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d02e      	beq.n	8001884 <HAL_ADC_PollForConversion+0xfc>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e9b      	ldrb	r3, [r3, #26]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12a      	bne.n	8001884 <HAL_ADC_PollForConversion+0xfc>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	4013      	ands	r3, r2
 8001838:	2b08      	cmp	r3, #8
 800183a:	d123      	bne.n	8001884 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff fd2f 	bl	80012a4 <LL_ADC_REG_IsConversionOngoing>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d110      	bne.n	800186c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	210c      	movs	r1, #12
 8001856:	438a      	bics	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_ADC_PollForConversion+0x118>)
 8001860:	4013      	ands	r3, r2
 8001862:	2201      	movs	r2, #1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	; 0x58
 800186a:	e00b      	b.n	8001884 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	2220      	movs	r2, #32
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2201      	movs	r2, #1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7e1b      	ldrb	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d103      	bne.n	8001894 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	220c      	movs	r2, #12
 8001892:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	fffffefe 	.word	0xfffffefe

080018a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2254      	movs	r2, #84	; 0x54
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x24>
 80018dc:	2302      	movs	r3, #2
 80018de:	e1bc      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x39e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2254      	movs	r2, #84	; 0x54
 80018e4:	2101      	movs	r1, #1
 80018e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fcd9 	bl	80012a4 <LL_ADC_REG_IsConversionOngoing>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d000      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x3c>
 80018f6:	e19f      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d100      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x46>
 8001900:	e13e      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	429a      	cmp	r2, r3
 800190c:	d004      	beq.n	8001918 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001912:	4abf      	ldr	r2, [pc, #764]	; (8001c10 <HAL_ADC_ConfigChannel+0x354>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d108      	bne.n	800192a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f7ff fbed 	bl	8001102 <LL_ADC_REG_SetSequencerChAdd>
 8001928:	e0c9      	b.n	8001abe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	211f      	movs	r1, #31
 8001934:	400b      	ands	r3, r1
 8001936:	210f      	movs	r1, #15
 8001938:	4099      	lsls	r1, r3
 800193a:	000b      	movs	r3, r1
 800193c:	43db      	mvns	r3, r3
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	035b      	lsls	r3, r3, #13
 8001948:	0b5b      	lsrs	r3, r3, #13
 800194a:	d105      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x9c>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	221f      	movs	r2, #31
 8001954:	4013      	ands	r3, r2
 8001956:	e098      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d000      	beq.n	8001964 <HAL_ADC_ConfigChannel+0xa8>
 8001962:	e091      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1cc>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d000      	beq.n	8001970 <HAL_ADC_ConfigChannel+0xb4>
 800196e:	e089      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1c8>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2204      	movs	r2, #4
 8001976:	4013      	ands	r3, r2
 8001978:	d000      	beq.n	800197c <HAL_ADC_ConfigChannel+0xc0>
 800197a:	e081      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1c4>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	4013      	ands	r3, r2
 8001984:	d000      	beq.n	8001988 <HAL_ADC_ConfigChannel+0xcc>
 8001986:	e079      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1c0>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d000      	beq.n	8001994 <HAL_ADC_ConfigChannel+0xd8>
 8001992:	e071      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x1bc>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	4013      	ands	r3, r2
 800199c:	d000      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0xe4>
 800199e:	e069      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x1b8>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	4013      	ands	r3, r2
 80019a8:	d000      	beq.n	80019ac <HAL_ADC_ConfigChannel+0xf0>
 80019aa:	e061      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1b4>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	4013      	ands	r3, r2
 80019b4:	d000      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0xfc>
 80019b6:	e059      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x1b0>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	d151      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1ac>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d149      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1a8>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	d141      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1a4>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d139      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1a0>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	4013      	ands	r3, r2
 80019f2:	d131      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x19c>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	019b      	lsls	r3, r3, #6
 80019fc:	4013      	ands	r3, r2
 80019fe:	d129      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x198>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d121      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x194>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	4013      	ands	r3, r2
 8001a16:	d119      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x190>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	4013      	ands	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x18c>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x188>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	02db      	lsls	r3, r3, #11
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d001      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0x184>
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	e024      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a44:	2311      	movs	r3, #17
 8001a46:	e020      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a48:	2310      	movs	r3, #16
 8001a4a:	e01e      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	e01c      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	230e      	movs	r3, #14
 8001a52:	e01a      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	230d      	movs	r3, #13
 8001a56:	e018      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	e016      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	230b      	movs	r3, #11
 8001a5e:	e014      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	230a      	movs	r3, #10
 8001a62:	e012      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a64:	2309      	movs	r3, #9
 8001a66:	e010      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a68:	2308      	movs	r3, #8
 8001a6a:	e00e      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	e00c      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a70:	2306      	movs	r3, #6
 8001a72:	e00a      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e008      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e006      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6852      	ldr	r2, [r2, #4]
 8001a8e:	201f      	movs	r0, #31
 8001a90:	4002      	ands	r2, r0
 8001a92:	4093      	lsls	r3, r2
 8001a94:	000a      	movs	r2, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d808      	bhi.n	8001abe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	001a      	movs	r2, r3
 8001aba:	f7ff fb02 	bl	80010c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	001a      	movs	r2, r3
 8001acc:	f7ff fb3c 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db00      	blt.n	8001ada <HAL_ADC_ConfigChannel+0x21e>
 8001ad8:	e0b8      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff fab5 	bl	800104c <LL_ADC_GetCommonPathInternalCh>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a4b      	ldr	r2, [pc, #300]	; (8001c18 <HAL_ADC_ConfigChannel+0x35c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d11d      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x270>
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d118      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	0412      	lsls	r2, r2, #16
 8001b00:	4313      	orrs	r3, r2
 8001b02:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001b04:	0019      	movs	r1, r3
 8001b06:	0010      	movs	r0, r2
 8001b08:	f7ff fa8c 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4943      	ldr	r1, [pc, #268]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7fe faf4 	bl	8000100 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001b1c:	e002      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f9      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b2a:	e08f      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3c      	ldr	r2, [pc, #240]	; (8001c24 <HAL_ADC_ConfigChannel+0x368>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10e      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x298>
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	045b      	lsls	r3, r3, #17
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0452      	lsls	r2, r2, #17
 8001b46:	4313      	orrs	r3, r2
 8001b48:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	f7ff fa69 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>
 8001b52:	e07b      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <HAL_ADC_ConfigChannel+0x36c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d000      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x2a4>
 8001b5e:	e075      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	03db      	lsls	r3, r3, #15
 8001b66:	4013      	ands	r3, r2
 8001b68:	d000      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x2b0>
 8001b6a:	e06f      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	03d2      	lsls	r2, r2, #15
 8001b72:	4313      	orrs	r3, r2
 8001b74:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001b76:	0019      	movs	r1, r3
 8001b78:	0010      	movs	r0, r2
 8001b7a:	f7ff fa53 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>
 8001b7e:	e065      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001b90:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <HAL_ADC_ConfigChannel+0x354>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d107      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	f7ff fabf 	bl	8001124 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da4e      	bge.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fa4b 	bl	800104c <LL_ADC_GetCommonPathInternalCh>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_ADC_ConfigChannel+0x35c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d108      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_ADC_ConfigChannel+0x370>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001bcc:	0019      	movs	r1, r3
 8001bce:	0010      	movs	r0, r2
 8001bd0:	f7ff fa28 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>
 8001bd4:	e03a      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_ADC_ConfigChannel+0x368>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d108      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_ADC_ConfigChannel+0x374>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001be8:	0019      	movs	r1, r3
 8001bea:	0010      	movs	r0, r2
 8001bec:	f7ff fa1a 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>
 8001bf0:	e02c      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_ADC_ConfigChannel+0x36c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d127      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_ADC_ConfigChannel+0x378>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_ADC_ConfigChannel+0x358>)
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	f7ff fa0c 	bl	8001024 <LL_ADC_SetCommonPathInternalCh>
 8001c0c:	e01e      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x390>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	80000004 	.word	0x80000004
 8001c14:	40012708 	.word	0x40012708
 8001c18:	b0001000 	.word	0xb0001000
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	00030d40 	.word	0x00030d40
 8001c24:	b8004000 	.word	0xb8004000
 8001c28:	b4002000 	.word	0xb4002000
 8001c2c:	ff7fffff 	.word	0xff7fffff
 8001c30:	feffffff 	.word	0xfeffffff
 8001c34:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001c44:	2317      	movs	r3, #23
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2254      	movs	r2, #84	; 0x54
 8001c50:	2100      	movs	r1, #0
 8001c52:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c54:	2317      	movs	r3, #23
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b006      	add	sp, #24
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)

08001c64 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff fb17 	bl	80012a4 <LL_ADC_REG_IsConversionOngoing>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d02b      	beq.n	8001cd2 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff fadb 	bl	800123a <LL_ADC_IsDisableOngoing>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d104      	bne.n	8001c92 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff faf7 	bl	8001280 <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c92:	f7ff f99b 	bl	8000fcc <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	60fb      	str	r3, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001c9a:	e014      	b.n	8001cc6 <ADC_ConversionStop+0x62>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001c9c:	f7ff f996 	bl	8000fcc <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d90d      	bls.n	8001cc6 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	2210      	movs	r2, #16
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e006      	b.n	8001cd4 <ADC_ConversionStop+0x70>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1e4      	bne.n	8001c9c <ADC_ConversionStop+0x38>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fa95 	bl	8001218 <LL_ADC_IsEnabled>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d149      	bne.n	8001d86 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <ADC_Enable+0xb4>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	2210      	movs	r2, #16
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2201      	movs	r2, #1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e036      	b.n	8001d88 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fa56 	bl	80011d0 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e5b      	ldrb	r3, [r3, #25]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d02c      	beq.n	8001d86 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f94e 	bl	8000fcc <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d34:	e020      	b.n	8001d78 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fa6c 	bl	8001218 <LL_ADC_IsEnabled>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d104      	bne.n	8001d4e <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff fa41 	bl	80011d0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d4e:	f7ff f93d 	bl	8000fcc <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d90d      	bls.n	8001d78 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	2210      	movs	r2, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d1d7      	bne.n	8001d36 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	80000017 	.word	0x80000017

08001d94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fa4a 	bl	800123a <LL_ADC_IsDisableOngoing>
 8001da6:	0003      	movs	r3, r0
 8001da8:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff fa32 	bl	8001218 <LL_ADC_IsEnabled>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d040      	beq.n	8001e3a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d13d      	bne.n	8001e3a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10d      	bne.n	8001de8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fa0f 	bl	80011f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dde:	f7ff f8f5 	bl	8000fcc <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	60bb      	str	r3, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001de6:	e022      	b.n	8001e2e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	2210      	movs	r2, #16
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e01b      	b.n	8001e3c <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e04:	f7ff f8e2 	bl	8000fcc <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d90d      	bls.n	8001e2e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	2210      	movs	r2, #16
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2201      	movs	r2, #1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e006      	b.n	8001e3c <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d1e4      	bne.n	8001e04 <ADC_Disable+0x70>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <LL_ADC_IsEnabled>:
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <LL_ADC_IsEnabled+0x18>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <LL_ADC_IsEnabled+0x1a>
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <LL_ADC_IsCalibrationOnGoing>:
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0fdb      	lsrs	r3, r3, #31
 8001e74:	07da      	lsls	r2, r3, #31
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2254      	movs	r2, #84	; 0x54
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADCEx_Calibration_Start+0x1a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e06c      	b.n	8001f80 <HAL_ADCEx_Calibration_Start+0xf4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2254      	movs	r2, #84	; 0x54
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001eae:	2317      	movs	r3, #23
 8001eb0:	18fc      	adds	r4, r7, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff ff6d 	bl	8001d94 <ADC_Disable>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	7023      	strb	r3, [r4, #0]
  
  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff ffbe 	bl	8001e44 <LL_ADC_IsEnabled>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d14c      	bne.n	8001f66 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <HAL_ADCEx_Calibration_Start+0xfc>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0609      	lsls	r1, r1, #24
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f0a:	e014      	b.n	8001f36 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_ADCEx_Calibration_Start+0x100>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d90d      	bls.n	8001f36 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	2212      	movs	r2, #18
 8001f20:	4393      	bics	r3, r2
 8001f22:	2210      	movs	r2, #16
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2254      	movs	r2, #84	; 0x54
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e024      	b.n	8001f80 <HAL_ADCEx_Calibration_Start+0xf4>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7ff ff93 	bl	8001e66 <LL_ADC_IsCalibrationOnGoing>
 8001f40:	1e03      	subs	r3, r0, #0
 8001f42:	d1e3      	bne.n	8001f0c <HAL_ADCEx_Calibration_Start+0x80>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	; 0x58
 8001f64:	e005      	b.n	8001f72 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2254      	movs	r2, #84	; 0x54
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f7a:	2317      	movs	r3, #23
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b007      	add	sp, #28
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	fffffefd 	.word	0xfffffefd
 8001f8c:	0002f1ff 	.word	0x0002f1ff

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa4:	d828      	bhi.n	8001ff8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <__NVIC_SetPriority+0xd4>)
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	33c0      	adds	r3, #192	; 0xc0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	589b      	ldr	r3, [r3, r2]
 8001fb6:	1dfa      	adds	r2, r7, #7
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	0011      	movs	r1, r2
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	00d2      	lsls	r2, r2, #3
 8001fc2:	21ff      	movs	r1, #255	; 0xff
 8001fc4:	4091      	lsls	r1, r2
 8001fc6:	000a      	movs	r2, r1
 8001fc8:	43d2      	mvns	r2, r2
 8001fca:	401a      	ands	r2, r3
 8001fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	2303      	movs	r3, #3
 8001fde:	4003      	ands	r3, r0
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	481f      	ldr	r0, [pc, #124]	; (8002064 <__NVIC_SetPriority+0xd4>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	33c0      	adds	r3, #192	; 0xc0
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ff6:	e031      	b.n	800205c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <__NVIC_SetPriority+0xd8>)
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	0019      	movs	r1, r3
 8002000:	230f      	movs	r3, #15
 8002002:	400b      	ands	r3, r1
 8002004:	3b08      	subs	r3, #8
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3306      	adds	r3, #6
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	1dfa      	adds	r2, r7, #7
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	0011      	movs	r1, r2
 8002018:	2203      	movs	r2, #3
 800201a:	400a      	ands	r2, r1
 800201c:	00d2      	lsls	r2, r2, #3
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	4091      	lsls	r1, r2
 8002022:	000a      	movs	r2, r1
 8002024:	43d2      	mvns	r2, r2
 8002026:	401a      	ands	r2, r3
 8002028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	401a      	ands	r2, r3
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0018      	movs	r0, r3
 8002038:	2303      	movs	r3, #3
 800203a:	4003      	ands	r3, r0
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <__NVIC_SetPriority+0xd8>)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	001c      	movs	r4, r3
 8002048:	230f      	movs	r3, #15
 800204a:	4023      	ands	r3, r4
 800204c:	3b08      	subs	r3, #8
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	430a      	orrs	r2, r1
 8002052:	3306      	adds	r3, #6
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	18c3      	adds	r3, r0, r3
 8002058:	3304      	adds	r3, #4
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b003      	add	sp, #12
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <SysTick_Config+0x40>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e010      	b.n	80020a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <SysTick_Config+0x44>)
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	3a01      	subs	r2, #1
 8002088:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	2301      	movs	r3, #1
 800208c:	425b      	negs	r3, r3
 800208e:	2103      	movs	r1, #3
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ff7d 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SysTick_Config+0x44>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x44>)
 800209e:	2207      	movs	r2, #7
 80020a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	00ffffff 	.word	0x00ffffff
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	210f      	movs	r1, #15
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	1c02      	adds	r2, r0, #0
 80020c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b004      	add	sp, #16
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7ff ffbf 	bl	800206c <SysTick_Config>
 80020ee:	0003      	movs	r3, r0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002106:	e147      	b.n	8002398 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4091      	lsls	r1, r2
 8002112:	000a      	movs	r2, r1
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d100      	bne.n	8002120 <HAL_GPIO_Init+0x28>
 800211e:	e138      	b.n	8002392 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x38>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d123      	bne.n	8002178 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	58d3      	ldr	r3, [r2, r3]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2207      	movs	r2, #7
 8002142:	4013      	ands	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	409a      	lsls	r2, r3
 800214a:	0013      	movs	r3, r2
 800214c:	43da      	mvns	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2107      	movs	r1, #7
 800215c:	400b      	ands	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	409a      	lsls	r2, r3
 8002162:	0013      	movs	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	409a      	lsls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	43da      	mvns	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	409a      	lsls	r2, r3
 800219e:	0013      	movs	r3, r2
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d00b      	beq.n	80021cc <HAL_GPIO_Init+0xd4>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c0:	2b11      	cmp	r3, #17
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b12      	cmp	r3, #18
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	43da      	mvns	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	409a      	lsls	r2, r3
 80021ee:	0013      	movs	r3, r2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002202:	2201      	movs	r2, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	43da      	mvns	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	2201      	movs	r2, #1
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
 8002220:	0013      	movs	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	43da      	mvns	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	0013      	movs	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	055b      	lsls	r3, r3, #21
 8002266:	4013      	ands	r3, r2
 8002268:	d100      	bne.n	800226c <HAL_GPIO_Init+0x174>
 800226a:	e092      	b.n	8002392 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800226c:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3318      	adds	r3, #24
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	589b      	ldr	r3, [r3, r2]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2203      	movs	r2, #3
 800227e:	4013      	ands	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	220f      	movs	r2, #15
 8002284:	409a      	lsls	r2, r3
 8002286:	0013      	movs	r3, r2
 8002288:	43da      	mvns	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	23a0      	movs	r3, #160	; 0xa0
 8002294:	05db      	lsls	r3, r3, #23
 8002296:	429a      	cmp	r2, r3
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0x1ca>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00d      	beq.n	80022be <HAL_GPIO_Init+0x1c6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a44      	ldr	r2, [pc, #272]	; (80023b8 <HAL_GPIO_Init+0x2c0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <HAL_GPIO_Init+0x1c2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_GPIO_Init+0x2c4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_GPIO_Init+0x1be>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x1cc>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x1cc>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x1cc>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x1cc>
 80022c2:	2300      	movs	r3, #0
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	2103      	movs	r1, #3
 80022c8:	400a      	ands	r2, r1
 80022ca:	00d2      	lsls	r2, r2, #3
 80022cc:	4093      	lsls	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022d4:	4936      	ldr	r1, [pc, #216]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3318      	adds	r3, #24
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022e2:	4a33      	ldr	r2, [pc, #204]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	58d3      	ldr	r3, [r2, r3]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	4013      	ands	r3, r2
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002308:	4929      	ldr	r1, [pc, #164]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002312:	2384      	movs	r3, #132	; 0x84
 8002314:	58d3      	ldr	r3, [r2, r3]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	4013      	ands	r3, r2
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002336:	491e      	ldr	r1, [pc, #120]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002338:	2284      	movs	r2, #132	; 0x84
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	035b      	lsls	r3, r3, #13
 8002356:	4013      	ands	r3, r2
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43da      	mvns	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	039b      	lsls	r3, r3, #14
 8002380:	4013      	ands	r3, r2
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	40da      	lsrs	r2, r3
 80023a0:	1e13      	subs	r3, r2, #0
 80023a2:	d000      	beq.n	80023a6 <HAL_GPIO_Init+0x2ae>
 80023a4:	e6b0      	b.n	8002108 <HAL_GPIO_Init+0x10>
  }
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021800 	.word	0x40021800
 80023b4:	50000400 	.word	0x50000400
 80023b8:	50000800 	.word	0x50000800
 80023bc:	50000c00 	.word	0x50000c00

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	0008      	movs	r0, r1
 80023ca:	0011      	movs	r1, r2
 80023cc:	1cbb      	adds	r3, r7, #2
 80023ce:	1c02      	adds	r2, r0, #0
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	1c7b      	adds	r3, r7, #1
 80023d4:	1c0a      	adds	r2, r1, #0
 80023d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d8:	1c7b      	adds	r3, r7, #1
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e0:	1cbb      	adds	r3, r7, #2
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ea:	1cbb      	adds	r3, r7, #2
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b002      	add	sp, #8
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d11f      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	0013      	movs	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	189b      	adds	r3, r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4912      	ldr	r1, [pc, #72]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800242e:	0018      	movs	r0, r3
 8002430:	f7fd fe66 	bl	8000100 <__udivsi3>
 8002434:	0003      	movs	r3, r0
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243a:	e008      	b.n	800244e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3b01      	subs	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e001      	b.n	800244e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e009      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	401a      	ands	r2, r3
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	429a      	cmp	r2, r3
 800245e:	d0ed      	beq.n	800243c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	40007000 	.word	0x40007000
 8002470:	fffff9ff 	.word	0xfffff9ff
 8002474:	20000004 	.word	0x20000004
 8002478:	000f4240 	.word	0x000f4240

0800247c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e2f9      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d100      	bne.n	800249a <HAL_RCC_OscConfig+0x1e>
 8002498:	e07c      	b.n	8002594 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4bc3      	ldr	r3, [pc, #780]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2238      	movs	r2, #56	; 0x38
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a4:	4bc0      	ldr	r3, [pc, #768]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0x3e>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_OscConfig+0x44>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4bb9      	ldr	r3, [pc, #740]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	d062      	beq.n	8002592 <HAL_RCC_OscConfig+0x116>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d15e      	bne.n	8002592 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e2d4      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x78>
 80024e4:	4bb0      	ldr	r3, [pc, #704]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4baf      	ldr	r3, [pc, #700]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	0249      	lsls	r1, r1, #9
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e020      	b.n	8002536 <HAL_RCC_OscConfig+0xba>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	23a0      	movs	r3, #160	; 0xa0
 80024fa:	02db      	lsls	r3, r3, #11
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10e      	bne.n	800251e <HAL_RCC_OscConfig+0xa2>
 8002500:	4ba9      	ldr	r3, [pc, #676]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4ba8      	ldr	r3, [pc, #672]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	02c9      	lsls	r1, r1, #11
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	4ba6      	ldr	r3, [pc, #664]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4ba5      	ldr	r3, [pc, #660]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0249      	lsls	r1, r1, #9
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e00b      	b.n	8002536 <HAL_RCC_OscConfig+0xba>
 800251e:	4ba2      	ldr	r3, [pc, #648]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4ba1      	ldr	r3, [pc, #644]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002524:	49a1      	ldr	r1, [pc, #644]	; (80027ac <HAL_RCC_OscConfig+0x330>)
 8002526:	400a      	ands	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	4b9f      	ldr	r3, [pc, #636]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b9e      	ldr	r3, [pc, #632]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002530:	499f      	ldr	r1, [pc, #636]	; (80027b0 <HAL_RCC_OscConfig+0x334>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d014      	beq.n	8002568 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe fd45 	bl	8000fcc <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe fd40 	bl	8000fcc <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e293      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255a:	4b93      	ldr	r3, [pc, #588]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	029b      	lsls	r3, r3, #10
 8002562:	4013      	ands	r3, r2
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xcc>
 8002566:	e015      	b.n	8002594 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fd30 	bl	8000fcc <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002572:	f7fe fd2b 	bl	8000fcc <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b64      	cmp	r3, #100	; 0x64
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e27e      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002584:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	4013      	ands	r3, r2
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0xf6>
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002592:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d100      	bne.n	80025a0 <HAL_RCC_OscConfig+0x124>
 800259e:	e099      	b.n	80026d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a0:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2238      	movs	r2, #56	; 0x38
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025aa:	4b7f      	ldr	r3, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2203      	movs	r2, #3
 80025b0:	4013      	ands	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d102      	bne.n	80025c0 <HAL_RCC_OscConfig+0x144>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d002      	beq.n	80025c6 <HAL_RCC_OscConfig+0x14a>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d135      	bne.n	8002632 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c6:	4b78      	ldr	r3, [pc, #480]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4013      	ands	r3, r2
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x162>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e251      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a74      	ldr	r2, [pc, #464]	; (80027b4 <HAL_RCC_OscConfig+0x338>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x33c>)
 8002600:	4013      	ands	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800260e:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0adb      	lsrs	r3, r3, #11
 8002614:	2207      	movs	r2, #7
 8002616:	4013      	ands	r3, r2
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_RCC_OscConfig+0x340>)
 800261a:	40da      	lsrs	r2, r3
 800261c:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x344>)
 800261e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x348>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0018      	movs	r0, r3
 8002626:	f7fe fc77 	bl	8000f18 <HAL_InitTick>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d051      	beq.n	80026d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e227      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d030      	beq.n	800269c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5e      	ldr	r2, [pc, #376]	; (80027b8 <HAL_RCC_OscConfig+0x33c>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800264e:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0049      	lsls	r1, r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fcb6 	bl	8000fcc <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fcb1 	bl	8000fcc <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e204      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4013      	ands	r3, r2
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x338>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	e01b      	b.n	80026d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800269c:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	4949      	ldr	r1, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x34c>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fc90 	bl	8000fcc <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe fc8b 	bl	8000fcc <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1de      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4013      	ands	r3, r2
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x236>
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	4013      	ands	r3, r2
 80026dc:	d047      	beq.n	800276e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80026de:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b18      	cmp	r3, #24
 80026e8:	d10a      	bne.n	8002700 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	2202      	movs	r2, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d03c      	beq.n	800276e <HAL_RCC_OscConfig+0x2f2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d138      	bne.n	800276e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e1c0      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d019      	beq.n	800273c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800270a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800270e:	2101      	movs	r1, #1
 8002710:	430a      	orrs	r2, r1
 8002712:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fc5a 	bl	8000fcc <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271e:	f7fe fc55 	bl	8000fcc <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1a8      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	2202      	movs	r2, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d0f1      	beq.n	800271e <HAL_RCC_OscConfig+0x2a2>
 800273a:	e018      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 800273e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002742:	2101      	movs	r1, #1
 8002744:	438a      	bics	r2, r1
 8002746:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fc40 	bl	8000fcc <HAL_GetTick>
 800274c:	0003      	movs	r3, r0
 800274e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002752:	f7fe fc3b 	bl	8000fcc <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e18e      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d1f1      	bne.n	8002752 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d100      	bne.n	800277a <HAL_RCC_OscConfig+0x2fe>
 8002778:	e0c6      	b.n	8002908 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	231f      	movs	r3, #31
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2238      	movs	r2, #56	; 0x38
 8002788:	4013      	ands	r3, r2
 800278a:	2b20      	cmp	r3, #32
 800278c:	d11e      	bne.n	80027cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_OscConfig+0x32c>)
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d100      	bne.n	800279a <HAL_RCC_OscConfig+0x31e>
 8002798:	e0b6      	b.n	8002908 <HAL_RCC_OscConfig+0x48c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d000      	beq.n	80027a4 <HAL_RCC_OscConfig+0x328>
 80027a2:	e0b1      	b.n	8002908 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e16c      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
 80027a8:	40021000 	.word	0x40021000
 80027ac:	fffeffff 	.word	0xfffeffff
 80027b0:	fffbffff 	.word	0xfffbffff
 80027b4:	ffff80ff 	.word	0xffff80ff
 80027b8:	ffffc7ff 	.word	0xffffc7ff
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	20000004 	.word	0x20000004
 80027c4:	20000008 	.word	0x20000008
 80027c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027cc:	4baf      	ldr	r3, [pc, #700]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80027ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	4013      	ands	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_OscConfig+0x360>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x362>
 80027dc:	2300      	movs	r3, #0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4baa      	ldr	r3, [pc, #680]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80027e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e6:	4ba9      	ldr	r3, [pc, #676]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	0549      	lsls	r1, r1, #21
 80027ec:	430a      	orrs	r2, r1
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80027f0:	4ba6      	ldr	r3, [pc, #664]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80027f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027fe:	231f      	movs	r3, #31
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002806:	4ba2      	ldr	r3, [pc, #648]	; (8002a90 <HAL_RCC_OscConfig+0x614>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4013      	ands	r3, r2
 8002810:	d11a      	bne.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002812:	4b9f      	ldr	r3, [pc, #636]	; (8002a90 <HAL_RCC_OscConfig+0x614>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b9e      	ldr	r3, [pc, #632]	; (8002a90 <HAL_RCC_OscConfig+0x614>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0049      	lsls	r1, r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002820:	f7fe fbd4 	bl	8000fcc <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fbcf 	bl	8000fcc <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e122      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283c:	4b94      	ldr	r3, [pc, #592]	; (8002a90 <HAL_RCC_OscConfig+0x614>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x3e2>
 8002850:	4b8e      	ldr	r3, [pc, #568]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002854:	4b8d      	ldr	r3, [pc, #564]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002856:	2101      	movs	r1, #1
 8002858:	430a      	orrs	r2, r1
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x404>
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800286a:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800286c:	2104      	movs	r1, #4
 800286e:	430a      	orrs	r2, r1
 8002870:	65da      	str	r2, [r3, #92]	; 0x5c
 8002872:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002876:	4b85      	ldr	r3, [pc, #532]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002878:	2101      	movs	r1, #1
 800287a:	430a      	orrs	r2, r1
 800287c:	65da      	str	r2, [r3, #92]	; 0x5c
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
 8002880:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002884:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002886:	2101      	movs	r1, #1
 8002888:	438a      	bics	r2, r1
 800288a:	65da      	str	r2, [r3, #92]	; 0x5c
 800288c:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800288e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002890:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002892:	2104      	movs	r1, #4
 8002894:	438a      	bics	r2, r1
 8002896:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d014      	beq.n	80028ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb94 	bl	8000fcc <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a8:	e009      	b.n	80028be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fb8f 	bl	8000fcc <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x618>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0e1      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2202      	movs	r2, #2
 80028c4:	4013      	ands	r3, r2
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x42e>
 80028c8:	e013      	b.n	80028f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fb7f 	bl	8000fcc <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d2:	e009      	b.n	80028e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fb7a 	bl	8000fcc <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	4a6d      	ldr	r2, [pc, #436]	; (8002a94 <HAL_RCC_OscConfig+0x618>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028f2:	231f      	movs	r3, #31
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80028fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002900:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002902:	4965      	ldr	r1, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x61c>)
 8002904:	400a      	ands	r2, r1
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d100      	bne.n	8002912 <HAL_RCC_OscConfig+0x496>
 8002910:	e0b6      	b.n	8002a80 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002912:	4b5e      	ldr	r3, [pc, #376]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2238      	movs	r2, #56	; 0x38
 8002918:	4013      	ands	r3, r2
 800291a:	2b10      	cmp	r3, #16
 800291c:	d100      	bne.n	8002920 <HAL_RCC_OscConfig+0x4a4>
 800291e:	e07e      	b.n	8002a1e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d153      	bne.n	80029d0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b57      	ldr	r3, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800292e:	495b      	ldr	r1, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x620>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fb4a 	bl	8000fcc <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe fb45 	bl	8000fcc <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e098      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002950:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	049b      	lsls	r3, r3, #18
 8002958:	4013      	ands	r3, r2
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a4f      	ldr	r2, [pc, #316]	; (8002aa0 <HAL_RCC_OscConfig+0x624>)
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	431a      	orrs	r2, r3
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002986:	430a      	orrs	r2, r1
 8002988:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0449      	lsls	r1, r1, #17
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002998:	4b3c      	ldr	r3, [pc, #240]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	0549      	lsls	r1, r1, #21
 80029a2:	430a      	orrs	r2, r1
 80029a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fb11 	bl	8000fcc <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fb0c 	bl	8000fcc <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e05f      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	049b      	lsls	r3, r3, #18
 80029ca:	4013      	ands	r3, r2
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x534>
 80029ce:	e057      	b.n	8002a80 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029d6:	4931      	ldr	r1, [pc, #196]	; (8002a9c <HAL_RCC_OscConfig+0x620>)
 80029d8:	400a      	ands	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80029dc:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029e2:	2103      	movs	r1, #3
 80029e4:	438a      	bics	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 80029ee:	492d      	ldr	r1, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x628>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe faea 	bl	8000fcc <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fae5 	bl	8000fcc <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e038      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	049b      	lsls	r3, r3, #18
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x582>
 8002a1c:	e030      	b.n	8002a80 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e02b      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_RCC_OscConfig+0x610>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2203      	movs	r2, #3
 8002a34:	401a      	ands	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d11e      	bne.n	8002a7c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2270      	movs	r2, #112	; 0x70
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d117      	bne.n	8002a7c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	23fe      	movs	r3, #254	; 0xfe
 8002a50:	01db      	lsls	r3, r3, #7
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10e      	bne.n	8002a7c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	23f8      	movs	r3, #248	; 0xf8
 8002a62:	039b      	lsls	r3, r3, #14
 8002a64:	401a      	ands	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	0f5b      	lsrs	r3, r3, #29
 8002a72:	075a      	lsls	r2, r3, #29
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b008      	add	sp, #32
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
 8002a94:	00001388 	.word	0x00001388
 8002a98:	efffffff 	.word	0xefffffff
 8002a9c:	feffffff 	.word	0xfeffffff
 8002aa0:	1fc1808c 	.word	0x1fc1808c
 8002aa4:	effeffff 	.word	0xeffeffff

08002aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0e9      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d91e      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2207      	movs	r2, #7
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fa76 	bl	8000fcc <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe fa71 	bl	8000fcc <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_RCC_ClockConfig+0x1f4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0ca      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d015      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d006      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b1c:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	21e0      	movs	r1, #224	; 0xe0
 8002b24:	01c9      	lsls	r1, r1, #7
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d057      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d12b      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e097      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	049b      	lsls	r3, r3, #18
 8002b70:	4013      	ands	r3, r2
 8002b72:	d11f      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e08b      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b80:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d113      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e07f      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e074      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e06d      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2207      	movs	r2, #7
 8002bba:	4393      	bics	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fa00 	bl	8000fcc <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd0:	e009      	b.n	8002be6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd2:	f7fe f9fb 	bl	8000fcc <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <HAL_RCC_ClockConfig+0x1f4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e054      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2238      	movs	r2, #56	; 0x38
 8002bec:	401a      	ands	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1ec      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4013      	ands	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d21e      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c18:	f7fe f9d8 	bl	8000fcc <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c22:	f7fe f9d3 	bl	8000fcc <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_RCC_ClockConfig+0x1f4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e02c      	b.n	8002c90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_RCC_ClockConfig+0x200>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c62:	f000 f829 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c66:	0001      	movs	r1, r0
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	220f      	movs	r2, #15
 8002c70:	401a      	ands	r2, r3
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_RCC_ClockConfig+0x204>)
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	58d3      	ldr	r3, [r2, r3]
 8002c78:	221f      	movs	r2, #31
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	000a      	movs	r2, r1
 8002c7e:	40da      	lsrs	r2, r3
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x208>)
 8002c82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x20c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe f945 	bl	8000f18 <HAL_InitTick>
 8002c8e:	0003      	movs	r3, r0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	00001388 	.word	0x00001388
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	fffff0ff 	.word	0xfffff0ff
 8002ca8:	ffff8fff 	.word	0xffff8fff
 8002cac:	08003078 	.word	0x08003078
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	20000008 	.word	0x20000008

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2238      	movs	r2, #56	; 0x38
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d10f      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002cc8:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0adb      	lsrs	r3, r3, #11
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	4835      	ldr	r0, [pc, #212]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cde:	f7fd fa0f 	bl	8000100 <__udivsi3>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	e05d      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2238      	movs	r2, #56	; 0x38
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d102      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e054      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2238      	movs	r2, #56	; 0x38
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d138      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	2207      	movs	r2, #7
 8002d18:	4013      	ands	r3, r2
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4824      	ldr	r0, [pc, #144]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d28:	f7fd f9ea 	bl	8000100 <__udivsi3>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	0019      	movs	r1, r3
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	227f      	movs	r2, #127	; 0x7f
 8002d38:	4013      	ands	r3, r2
 8002d3a:	434b      	muls	r3, r1
 8002d3c:	617b      	str	r3, [r7, #20]
        break;
 8002d3e:	e00d      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	481c      	ldr	r0, [pc, #112]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d44:	f7fd f9dc 	bl	8000100 <__udivsi3>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	227f      	movs	r2, #127	; 0x7f
 8002d54:	4013      	ands	r3, r2
 8002d56:	434b      	muls	r3, r1
 8002d58:	617b      	str	r3, [r7, #20]
        break;
 8002d5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0f5b      	lsrs	r3, r3, #29
 8002d62:	2207      	movs	r2, #7
 8002d64:	4013      	ands	r3, r2
 8002d66:	3301      	adds	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	6978      	ldr	r0, [r7, #20]
 8002d6e:	f7fd f9c7 	bl	8000100 <__udivsi3>
 8002d72:	0003      	movs	r3, r0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e015      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2238      	movs	r2, #56	; 0x38
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d103      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2238      	movs	r2, #56	; 0x38
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b18      	cmp	r3, #24
 8002d96:	d103      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d98:	23fa      	movs	r3, #250	; 0xfa
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	e001      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002da4:	693b      	ldr	r3, [r7, #16]
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b006      	add	sp, #24
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	40021000 	.word	0x40021000
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002dc4:	2313      	movs	r3, #19
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dcc:	2312      	movs	r3, #18
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d100      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002de0:	e0a4      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2311      	movs	r3, #17
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	055b      	lsls	r3, r3, #21
 8002df2:	4013      	ands	r3, r2
 8002df4:	d111      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0549      	lsls	r1, r1, #21
 8002e00:	430a      	orrs	r2, r1
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e04:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	055b      	lsls	r3, r3, #21
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2311      	movs	r3, #17
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1a:	4b74      	ldr	r3, [pc, #464]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	0049      	lsls	r1, r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e28:	f7fe f8d0 	bl	8000fcc <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e30:	e00b      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe f8cb 	bl	8000fcc <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d904      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002e40:	2313      	movs	r3, #19
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2203      	movs	r2, #3
 8002e46:	701a      	strb	r2, [r3, #0]
        break;
 8002e48:	e005      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4a:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0ed      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002e56:	2313      	movs	r3, #19
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d154      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e64:	23c0      	movs	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d019      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d014      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	4a5b      	ldr	r2, [pc, #364]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e86:	4b58      	ldr	r3, [pc, #352]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0249      	lsls	r1, r1, #9
 8002e90:	430a      	orrs	r2, r1
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e94:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e9a:	4956      	ldr	r1, [pc, #344]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea0:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d016      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f88d 	bl	8000fcc <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb6:	e00c      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f888 	bl	8000fcc <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	4a4d      	ldr	r2, [pc, #308]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d904      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002ec8:	2313      	movs	r3, #19
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2203      	movs	r2, #3
 8002ece:	701a      	strb	r2, [r3, #0]
            break;
 8002ed0:	e004      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed2:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d0ed      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002edc:	2313      	movs	r3, #19
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee6:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	4a41      	ldr	r2, [pc, #260]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002efa:	e00c      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002efc:	2312      	movs	r3, #18
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2213      	movs	r2, #19
 8002f02:	18ba      	adds	r2, r7, r2
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e005      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	2312      	movs	r3, #18
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2213      	movs	r2, #19
 8002f10:	18ba      	adds	r2, r7, r2
 8002f12:	7812      	ldrb	r2, [r2, #0]
 8002f14:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f16:	2311      	movs	r3, #17
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f26:	4935      	ldr	r1, [pc, #212]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4013      	ands	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	4013      	ands	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	4a29      	ldr	r2, [pc, #164]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	01db      	lsls	r3, r3, #7
 8002f70:	4013      	ands	r3, r2
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	0899      	lsrs	r1, r3, #2
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0249      	lsls	r1, r1, #9
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d016      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d106      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	0249      	lsls	r1, r1, #9
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002fda:	2312      	movs	r3, #18
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b006      	add	sp, #24
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	fffffcff 	.word	0xfffffcff
 8002ff4:	fffeffff 	.word	0xfffeffff
 8002ff8:	00001388 	.word	0x00001388
 8002ffc:	efffffff 	.word	0xefffffff
 8003000:	ffffcfff 	.word	0xffffcfff
 8003004:	ffff3fff 	.word	0xffff3fff

08003008 <__libc_init_array>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	2600      	movs	r6, #0
 800300c:	4d0c      	ldr	r5, [pc, #48]	; (8003040 <__libc_init_array+0x38>)
 800300e:	4c0d      	ldr	r4, [pc, #52]	; (8003044 <__libc_init_array+0x3c>)
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	42a6      	cmp	r6, r4
 8003016:	d109      	bne.n	800302c <__libc_init_array+0x24>
 8003018:	2600      	movs	r6, #0
 800301a:	f000 f821 	bl	8003060 <_init>
 800301e:	4d0a      	ldr	r5, [pc, #40]	; (8003048 <__libc_init_array+0x40>)
 8003020:	4c0a      	ldr	r4, [pc, #40]	; (800304c <__libc_init_array+0x44>)
 8003022:	1b64      	subs	r4, r4, r5
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	42a6      	cmp	r6, r4
 8003028:	d105      	bne.n	8003036 <__libc_init_array+0x2e>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	00b3      	lsls	r3, r6, #2
 800302e:	58eb      	ldr	r3, [r5, r3]
 8003030:	4798      	blx	r3
 8003032:	3601      	adds	r6, #1
 8003034:	e7ee      	b.n	8003014 <__libc_init_array+0xc>
 8003036:	00b3      	lsls	r3, r6, #2
 8003038:	58eb      	ldr	r3, [r5, r3]
 800303a:	4798      	blx	r3
 800303c:	3601      	adds	r6, #1
 800303e:	e7f2      	b.n	8003026 <__libc_init_array+0x1e>
 8003040:	080030b8 	.word	0x080030b8
 8003044:	080030b8 	.word	0x080030b8
 8003048:	080030b8 	.word	0x080030b8
 800304c:	080030bc 	.word	0x080030bc

08003050 <memset>:
 8003050:	0003      	movs	r3, r0
 8003052:	1812      	adds	r2, r2, r0
 8003054:	4293      	cmp	r3, r2
 8003056:	d100      	bne.n	800305a <memset+0xa>
 8003058:	4770      	bx	lr
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	e7f9      	b.n	8003054 <memset+0x4>

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
