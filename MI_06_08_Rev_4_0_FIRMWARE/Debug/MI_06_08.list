
MI_06_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003798  08003798  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003798  08003798  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  080037b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080037b0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c07  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161f  00000000  00000000  00026c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00028260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00028960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013804  00000000  00000000  00028f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006af6  00000000  00000000  0003c79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ad3d  00000000  00000000  00043292  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdfcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001790  00000000  00000000  000be04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003740 	.word	0x08003740

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003740 	.word	0x08003740

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fd89 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 fb5b 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 fc3b 	bl	8000c74 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003fe:	f000 fbb7 	bl	8000b70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000402:	4bef      	ldr	r3, [pc, #956]	; (80007c0 <main+0x3d4>)
 8000404:	0018      	movs	r0, r3
 8000406:	f002 f8b1 	bl	800256c <HAL_ADCEx_Calibration_Start>
  for (int i = 10; i!=0; i=i-1)
 800040a:	230a      	movs	r3, #10
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e019      	b.n	8000444 <main+0x58>
  {
	  HAL_ADC_Start(&hadc1);
 8000410:	4beb      	ldr	r3, [pc, #940]	; (80007c0 <main+0x3d4>)
 8000412:	0018      	movs	r0, r3
 8000414:	f001 fa16 	bl	8001844 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000418:	4be9      	ldr	r3, [pc, #932]	; (80007c0 <main+0x3d4>)
 800041a:	2164      	movs	r1, #100	; 0x64
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fa9b 	bl	8001958 <HAL_ADC_PollForConversion>
	  ADC_value =ADC_value+HAL_ADC_GetValue(&hadc1);
 8000422:	4be7      	ldr	r3, [pc, #924]	; (80007c0 <main+0x3d4>)
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fb25 	bl	8001a74 <HAL_ADC_GetValue>
 800042a:	0002      	movs	r2, r0
 800042c:	4be5      	ldr	r3, [pc, #916]	; (80007c4 <main+0x3d8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	18d3      	adds	r3, r2, r3
 8000432:	001a      	movs	r2, r3
 8000434:	4be3      	ldr	r3, [pc, #908]	; (80007c4 <main+0x3d8>)
 8000436:	601a      	str	r2, [r3, #0]
	  HAL_Delay(50);
 8000438:	2032      	movs	r0, #50	; 0x32
 800043a:	f000 fde9 	bl	8001010 <HAL_Delay>
  for (int i = 10; i!=0; i=i-1)
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	3b01      	subs	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1e2      	bne.n	8000410 <main+0x24>
  }
  HAL_ADC_Stop(&hadc1);
 800044a:	4bdd      	ldr	r3, [pc, #884]	; (80007c0 <main+0x3d4>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fa47 	bl	80018e0 <HAL_ADC_Stop>
  HAL_Delay(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f000 fddc 	bl	8001010 <HAL_Delay>
  ADC_value = ADC_value/10;
 8000458:	4bda      	ldr	r3, [pc, #872]	; (80007c4 <main+0x3d8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	210a      	movs	r1, #10
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff fed8 	bl	8000214 <__divsi3>
 8000464:	0003      	movs	r3, r0
 8000466:	001a      	movs	r2, r3
 8000468:	4bd6      	ldr	r3, [pc, #856]	; (80007c4 <main+0x3d8>)
 800046a:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/*12*/
	  while ((ADC_value>0)&&(ADC_value<=2282))
 800046c:	e117      	b.n	800069e <main+0x2b2>
	  {
		  int i = 70;
 800046e:	2346      	movs	r3, #70	; 0x46
 8000470:	607b      	str	r3, [r7, #4]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000472:	4bd5      	ldr	r3, [pc, #852]	; (80007c8 <main+0x3dc>)
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	0018      	movs	r0, r3
 800047a:	f002 fb11 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800047e:	4bd2      	ldr	r3, [pc, #840]	; (80007c8 <main+0x3dc>)
 8000480:	2201      	movs	r2, #1
 8000482:	2102      	movs	r1, #2
 8000484:	0018      	movs	r0, r3
 8000486:	f002 fb0b 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800048a:	4bcf      	ldr	r3, [pc, #828]	; (80007c8 <main+0x3dc>)
 800048c:	2201      	movs	r2, #1
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fb05 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	0159      	lsls	r1, r3, #5
 800049a:	23a0      	movs	r3, #160	; 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2201      	movs	r2, #1
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fafd 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	0199      	lsls	r1, r3, #6
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	0018      	movs	r0, r3
 80004b2:	f002 faf5 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fda9 	bl	8001010 <HAL_Delay>

		  /*23*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80004be:	4bc2      	ldr	r3, [pc, #776]	; (80007c8 <main+0x3dc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	2120      	movs	r1, #32
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 faeb 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80004ca:	4bbf      	ldr	r3, [pc, #764]	; (80007c8 <main+0x3dc>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	2102      	movs	r1, #2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fae5 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80004d6:	4bbc      	ldr	r3, [pc, #752]	; (80007c8 <main+0x3dc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fadf 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	0159      	lsls	r1, r3, #5
 80004e6:	23a0      	movs	r3, #160	; 0xa0
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2201      	movs	r2, #1
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 fad7 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	0199      	lsls	r1, r3, #6
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2201      	movs	r2, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 facf 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fd83 	bl	8001010 <HAL_Delay>

		  /*34*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800050a:	4baf      	ldr	r3, [pc, #700]	; (80007c8 <main+0x3dc>)
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fac5 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000516:	4bac      	ldr	r3, [pc, #688]	; (80007c8 <main+0x3dc>)
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f002 fabf 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000522:	4ba9      	ldr	r3, [pc, #676]	; (80007c8 <main+0x3dc>)
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fab9 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	0159      	lsls	r1, r3, #5
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2200      	movs	r2, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fab1 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	0199      	lsls	r1, r3, #6
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	2201      	movs	r2, #1
 8000548:	0018      	movs	r0, r3
 800054a:	f002 faa9 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd5d 	bl	8001010 <HAL_Delay>

		  /*45*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000556:	4b9c      	ldr	r3, [pc, #624]	; (80007c8 <main+0x3dc>)
 8000558:	2201      	movs	r2, #1
 800055a:	2120      	movs	r1, #32
 800055c:	0018      	movs	r0, r3
 800055e:	f002 fa9f 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000562:	4b99      	ldr	r3, [pc, #612]	; (80007c8 <main+0x3dc>)
 8000564:	2200      	movs	r2, #0
 8000566:	2102      	movs	r1, #2
 8000568:	0018      	movs	r0, r3
 800056a:	f002 fa99 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800056e:	4b96      	ldr	r3, [pc, #600]	; (80007c8 <main+0x3dc>)
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fa93 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	0159      	lsls	r1, r3, #5
 800057e:	23a0      	movs	r3, #160	; 0xa0
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2201      	movs	r2, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f002 fa8b 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	0199      	lsls	r1, r3, #6
 800058e:	23a0      	movs	r3, #160	; 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2201      	movs	r2, #1
 8000594:	0018      	movs	r0, r3
 8000596:	f002 fa83 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fd37 	bl	8001010 <HAL_Delay>

		  /*56*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005a2:	4b89      	ldr	r3, [pc, #548]	; (80007c8 <main+0x3dc>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fa79 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005ae:	4b86      	ldr	r3, [pc, #536]	; (80007c8 <main+0x3dc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	2102      	movs	r1, #2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 fa73 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ba:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <main+0x3dc>)
 80005bc:	2201      	movs	r2, #1
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 fa6d 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	0159      	lsls	r1, r3, #5
 80005ca:	23a0      	movs	r3, #160	; 0xa0
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2201      	movs	r2, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 fa65 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	0199      	lsls	r1, r3, #6
 80005da:	23a0      	movs	r3, #160	; 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2200      	movs	r2, #0
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fa5d 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fd11 	bl	8001010 <HAL_Delay>

		  /*61*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ee:	4b76      	ldr	r3, [pc, #472]	; (80007c8 <main+0x3dc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 fa53 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005fa:	4b73      	ldr	r3, [pc, #460]	; (80007c8 <main+0x3dc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	0018      	movs	r0, r3
 8000602:	f002 fa4d 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000606:	4b70      	ldr	r3, [pc, #448]	; (80007c8 <main+0x3dc>)
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fa47 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	0159      	lsls	r1, r3, #5
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2200      	movs	r2, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f002 fa3f 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	0199      	lsls	r1, r3, #6
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2200      	movs	r2, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fa37 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i-30);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3b1e      	subs	r3, #30
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fcea 	bl	8001010 <HAL_Delay>

		  ADC_value = 0;
 800063c:	4b61      	ldr	r3, [pc, #388]	; (80007c4 <main+0x3d8>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
		  for (int i = 3; i!=0; i=i-1)
 8000642:	2303      	movs	r3, #3
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	e019      	b.n	800067c <main+0x290>
		  {
		  	  HAL_ADC_Start(&hadc1);
 8000648:	4b5d      	ldr	r3, [pc, #372]	; (80007c0 <main+0x3d4>)
 800064a:	0018      	movs	r0, r3
 800064c:	f001 f8fa 	bl	8001844 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <main+0x3d4>)
 8000652:	2164      	movs	r1, #100	; 0x64
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f97f 	bl	8001958 <HAL_ADC_PollForConversion>
		  	  ADC_value = ADC_value + HAL_ADC_GetValue(&hadc1);
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <main+0x3d4>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fa09 	bl	8001a74 <HAL_ADC_GetValue>
 8000662:	0002      	movs	r2, r0
 8000664:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <main+0x3d8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	18d3      	adds	r3, r2, r3
 800066a:	001a      	movs	r2, r3
 800066c:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <main+0x3d8>)
 800066e:	601a      	str	r2, [r3, #0]
		  	  HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f000 fccd 	bl	8001010 <HAL_Delay>
		  for (int i = 3; i!=0; i=i-1)
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	3b01      	subs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e2      	bne.n	8000648 <main+0x25c>
		  }
		    HAL_ADC_Stop(&hadc1);
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <main+0x3d4>)
 8000684:	0018      	movs	r0, r3
 8000686:	f001 f92b 	bl	80018e0 <HAL_ADC_Stop>
		    ADC_value = ADC_value/3;
 800068a:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <main+0x3d8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2103      	movs	r1, #3
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff fdbf 	bl	8000214 <__divsi3>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <main+0x3d8>)
 800069c:	601a      	str	r2, [r3, #0]
	  while ((ADC_value>0)&&(ADC_value<=2282))
 800069e:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <main+0x3d8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dc00      	bgt.n	80006a8 <main+0x2bc>
 80006a6:	e07d      	b.n	80007a4 <main+0x3b8>
 80006a8:	4b46      	ldr	r3, [pc, #280]	; (80007c4 <main+0x3d8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a47      	ldr	r2, [pc, #284]	; (80007cc <main+0x3e0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	dc00      	bgt.n	80006b4 <main+0x2c8>
 80006b2:	e6dc      	b.n	800046e <main+0x82>


	 }

	  while ((ADC_value>2282)&&(ADC_value<=3347))
 80006b4:	e076      	b.n	80007a4 <main+0x3b8>
	 {
		  i=400;
 80006b6:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <main+0x3e4>)
 80006b8:	22c8      	movs	r2, #200	; 0xc8
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <main+0x3dc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 f9eb 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80006ca:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <main+0x3dc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	2102      	movs	r1, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 f9e5 	bl	8002aa0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006d6:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <main+0x3dc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f9df 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	0159      	lsls	r1, r3, #5
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 f9d7 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	0199      	lsls	r1, r3, #6
 80006f6:	23a0      	movs	r3, #160	; 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2201      	movs	r2, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 f9cf 	bl	8002aa0 <HAL_GPIO_WritePin>

		  HAL_Delay(i);
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <main+0x3e4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fc82 	bl	8001010 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <main+0x3dc>)
 800070e:	2200      	movs	r2, #0
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f9c4 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	0159      	lsls	r1, r3, #5
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2200      	movs	r2, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f002 f9bc 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	0199      	lsls	r1, r3, #6
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2200      	movs	r2, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f9b4 	bl	8002aa0 <HAL_GPIO_WritePin>

		  HAL_Delay(i);
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <main+0x3e4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fc67 	bl	8001010 <HAL_Delay>

		  ADC_value = 0;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0x3d8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
		  for (int i = 3; i!=0; i=i-1)
 8000748:	2303      	movs	r3, #3
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e019      	b.n	8000782 <main+0x396>
		  {
		  	  HAL_ADC_Start(&hadc1);
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <main+0x3d4>)
 8000750:	0018      	movs	r0, r3
 8000752:	f001 f877 	bl	8001844 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <main+0x3d4>)
 8000758:	2164      	movs	r1, #100	; 0x64
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f8fc 	bl	8001958 <HAL_ADC_PollForConversion>
		  	  ADC_value = ADC_value + HAL_ADC_GetValue(&hadc1);
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <main+0x3d4>)
 8000762:	0018      	movs	r0, r3
 8000764:	f001 f986 	bl	8001a74 <HAL_ADC_GetValue>
 8000768:	0002      	movs	r2, r0
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <main+0x3d8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	18d3      	adds	r3, r2, r3
 8000770:	001a      	movs	r2, r3
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <main+0x3d8>)
 8000774:	601a      	str	r2, [r3, #0]
		  	  HAL_Delay(10);
 8000776:	200a      	movs	r0, #10
 8000778:	f000 fc4a 	bl	8001010 <HAL_Delay>
		  for (int i = 3; i!=0; i=i-1)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3b01      	subs	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1e2      	bne.n	800074e <main+0x362>
		  }
		    HAL_ADC_Stop(&hadc1);
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <main+0x3d4>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 f8a8 	bl	80018e0 <HAL_ADC_Stop>
		    ADC_value = ADC_value/3;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x3d8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2103      	movs	r1, #3
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff fd3c 	bl	8000214 <__divsi3>
 800079c:	0003      	movs	r3, r0
 800079e:	001a      	movs	r2, r3
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <main+0x3d8>)
 80007a2:	601a      	str	r2, [r3, #0]
	  while ((ADC_value>2282)&&(ADC_value<=3347))
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <main+0x3d8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <main+0x3e0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	dc00      	bgt.n	80007b0 <main+0x3c4>
 80007ae:	e165      	b.n	8000a7c <main+0x690>
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <main+0x3d8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <main+0x3e8>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	dc00      	bgt.n	80007bc <main+0x3d0>
 80007ba:	e77c      	b.n	80006b6 <main+0x2ca>
	 }

	  while ((ADC_value>3347)&&(ADC_value<=4095))
 80007bc:	e15e      	b.n	8000a7c <main+0x690>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000030 	.word	0x20000030
 80007c4:	2000002c 	.word	0x2000002c
 80007c8:	50000400 	.word	0x50000400
 80007cc:	000008ea 	.word	0x000008ea
 80007d0:	20000000 	.word	0x20000000
 80007d4:	00000d13 	.word	0x00000d13
	 {
		  i=50;
 80007d8:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <main+0x6ac>)
 80007da:	2232      	movs	r2, #50	; 0x32
 80007dc:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007de:	4baf      	ldr	r3, [pc, #700]	; (8000a9c <main+0x6b0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 f95b 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007ea:	4bac      	ldr	r3, [pc, #688]	; (8000a9c <main+0x6b0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2102      	movs	r1, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 f955 	bl	8002aa0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007f6:	4ba9      	ldr	r3, [pc, #676]	; (8000a9c <main+0x6b0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 f94f 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	0159      	lsls	r1, r3, #5
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2201      	movs	r2, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f947 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	0199      	lsls	r1, r3, #6
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2201      	movs	r2, #1
 800081c:	0018      	movs	r0, r3
 800081e:	f002 f93f 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 8000822:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <main+0x6ac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fbf2 	bl	8001010 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800082c:	4b9b      	ldr	r3, [pc, #620]	; (8000a9c <main+0x6b0>)
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0018      	movs	r0, r3
 8000834:	f002 f934 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	0159      	lsls	r1, r3, #5
 800083c:	23a0      	movs	r3, #160	; 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	2200      	movs	r2, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f002 f92c 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	0199      	lsls	r1, r3, #6
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2200      	movs	r2, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f924 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 8000858:	4b8f      	ldr	r3, [pc, #572]	; (8000a98 <main+0x6ac>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fbd7 	bl	8001010 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000862:	4b8e      	ldr	r3, [pc, #568]	; (8000a9c <main+0x6b0>)
 8000864:	2201      	movs	r2, #1
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	0018      	movs	r0, r3
 800086a:	f002 f919 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	0159      	lsls	r1, r3, #5
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f002 f911 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	0199      	lsls	r1, r3, #6
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2201      	movs	r2, #1
 8000888:	0018      	movs	r0, r3
 800088a:	f002 f909 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 800088e:	4b82      	ldr	r3, [pc, #520]	; (8000a98 <main+0x6ac>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fbbc 	bl	8001010 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000898:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <main+0x6b0>)
 800089a:	2200      	movs	r2, #0
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0018      	movs	r0, r3
 80008a0:	f002 f8fe 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	0159      	lsls	r1, r3, #5
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 f8f6 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	0199      	lsls	r1, r3, #6
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	2200      	movs	r2, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 f8ee 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 80008c4:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <main+0x6ac>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fba1 	bl	8001010 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80008ce:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <main+0x6b0>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 f8e3 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	0159      	lsls	r1, r3, #5
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2201      	movs	r2, #1
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 f8db 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	0199      	lsls	r1, r3, #6
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2201      	movs	r2, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 f8d3 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 80008fa:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <main+0x6ac>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fb86 	bl	8001010 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000904:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <main+0x6b0>)
 8000906:	2200      	movs	r2, #0
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0018      	movs	r0, r3
 800090c:	f002 f8c8 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2200      	movs	r2, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f002 f8c0 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	0199      	lsls	r1, r3, #6
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	2200      	movs	r2, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f002 f8b8 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <main+0x6ac>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fb6b 	bl	8001010 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800093a:	4b58      	ldr	r3, [pc, #352]	; (8000a9c <main+0x6b0>)
 800093c:	2201      	movs	r2, #1
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	0018      	movs	r0, r3
 8000942:	f002 f8ad 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	0159      	lsls	r1, r3, #5
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2201      	movs	r2, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f002 f8a5 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	0199      	lsls	r1, r3, #6
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2201      	movs	r2, #1
 8000960:	0018      	movs	r0, r3
 8000962:	f002 f89d 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <main+0x6ac>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fb50 	bl	8001010 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000970:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <main+0x6b0>)
 8000972:	2200      	movs	r2, #0
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0018      	movs	r0, r3
 8000978:	f002 f892 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	0159      	lsls	r1, r3, #5
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f002 f88a 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	0199      	lsls	r1, r3, #6
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2200      	movs	r2, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f002 f882 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 800099c:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <main+0x6ac>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fb35 	bl	8001010 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <main+0x6b0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 f877 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	0159      	lsls	r1, r3, #5
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2201      	movs	r2, #1
 80009bc:	0018      	movs	r0, r3
 80009be:	f002 f86f 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	0199      	lsls	r1, r3, #6
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2201      	movs	r2, #1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 f867 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i);
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <main+0x6ac>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fb1a 	bl	8001010 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <main+0x6b0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 f85c 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	0159      	lsls	r1, r3, #5
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 f854 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	0199      	lsls	r1, r3, #6
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2200      	movs	r2, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 f84c 	bl	8002aa0 <HAL_GPIO_WritePin>
		  HAL_Delay(i*10);
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <main+0x6ac>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	189b      	adds	r3, r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fafb 	bl	8001010 <HAL_Delay>

		  ADC_value = 0;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <main+0x6b4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
		  for (int i = 3; i!=0; i=i-1)
 8000a20:	2303      	movs	r3, #3
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e019      	b.n	8000a5a <main+0x66e>
		  {
		  	  HAL_ADC_Start(&hadc1);
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <main+0x6b8>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 ff0b 	bl	8001844 <HAL_ADC_Start>
		  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <main+0x6b8>)
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 ff90 	bl	8001958 <HAL_ADC_PollForConversion>
		  	  ADC_value = ADC_value + HAL_ADC_GetValue(&hadc1);
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <main+0x6b8>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 f81a 	bl	8001a74 <HAL_ADC_GetValue>
 8000a40:	0002      	movs	r2, r0
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <main+0x6b4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	18d3      	adds	r3, r2, r3
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <main+0x6b4>)
 8000a4c:	601a      	str	r2, [r3, #0]
		  	  HAL_Delay(5);
 8000a4e:	2005      	movs	r0, #5
 8000a50:	f000 fade 	bl	8001010 <HAL_Delay>
		  for (int i = 3; i!=0; i=i-1)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1e2      	bne.n	8000a26 <main+0x63a>
		  }
		    HAL_ADC_Stop(&hadc1);
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <main+0x6b8>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 ff3c 	bl	80018e0 <HAL_ADC_Stop>
		    ADC_value = ADC_value/3;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <main+0x6b4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fbd0 	bl	8000214 <__divsi3>
 8000a74:	0003      	movs	r3, r0
 8000a76:	001a      	movs	r2, r3
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <main+0x6b4>)
 8000a7a:	601a      	str	r2, [r3, #0]
	  while ((ADC_value>3347)&&(ADC_value<=4095))
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <main+0x6b4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <main+0x6bc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	dc00      	bgt.n	8000a88 <main+0x69c>
 8000a86:	e60a      	b.n	800069e <main+0x2b2>
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <main+0x6b4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <main+0x6c0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	dc00      	bgt.n	8000a94 <main+0x6a8>
 8000a92:	e6a1      	b.n	80007d8 <main+0x3ec>
	  while ((ADC_value>0)&&(ADC_value<=2282))
 8000a94:	e603      	b.n	800069e <main+0x2b2>
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	50000400 	.word	0x50000400
 8000aa0:	2000002c 	.word	0x2000002c
 8000aa4:	20000030 	.word	0x20000030
 8000aa8:	00000d13 	.word	0x00000d13
 8000aac:	00000fff 	.word	0x00000fff

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b099      	sub	sp, #100	; 0x64
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	242c      	movs	r4, #44	; 0x2c
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	0018      	movs	r0, r3
 8000abc:	2334      	movs	r3, #52	; 0x34
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f002 fe35 	bl	8003730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac6:	231c      	movs	r3, #28
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	0018      	movs	r0, r3
 8000acc:	2310      	movs	r3, #16
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f002 fe2d 	bl	8003730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2318      	movs	r3, #24
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f002 fe26 	bl	8003730 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fff7 	bl	8002adc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2202      	movs	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2240      	movs	r2, #64	; 0x40
 8000b06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 f823 	bl	8002b5c <HAL_RCC_OscConfig>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f937 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	211c      	movs	r1, #28
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2207      	movs	r2, #7
 8000b24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fb23 	bl	8003188 <HAL_RCC_ClockConfig>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f921 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	01d2      	lsls	r2, r2, #7
 8000b50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 fc9e 	bl	800349c <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b64:	f000 f912 	bl	8000d8c <Error_Handler>
  }
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b019      	add	sp, #100	; 0x64
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000b76:	2310      	movs	r3, #16
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2318      	movs	r3, #24
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f002 fdd5 	bl	8003730 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fdce 	bl	8003730 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <MX_ADC1_Init+0x100>)
 8000b98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	05d2      	lsls	r2, r2, #23
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000be8:	222c      	movs	r2, #44	; 0x2c
 8000bea:	2100      	movs	r1, #0
 8000bec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000c02:	223c      	movs	r2, #60	; 0x3c
 8000c04:	2100      	movs	r1, #0
 8000c06:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f000 fc41 	bl	8001498 <HAL_ADC_Init>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c1a:	f000 f8b7 	bl	8000d8c <Error_Handler>
  }
  /** Configure Analog WatchDog 2 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000c1e:	2110      	movs	r1, #16
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	22c0      	movs	r2, #192	; 0xc0
 8000c24:	0412      	lsls	r2, r2, #16
 8000c26:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000c28:	187a      	adds	r2, r7, r1
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 f900 	bl	8001e34 <HAL_ADC_AnalogWDGConfig>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000c38:	f000 f8a8 	bl	8000d8c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4e:	1d3a      	adds	r2, r7, #4
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_ADC1_Init+0xfc>)
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 ff19 	bl	8001a8c <HAL_ADC_ConfigChannel>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000c5e:	f000 f895 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b00a      	add	sp, #40	; 0x28
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000030 	.word	0x20000030
 8000c70:	40012400 	.word	0x40012400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	240c      	movs	r4, #12
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2314      	movs	r3, #20
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f002 fd53 	bl	8003730 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <MX_GPIO_Init+0x110>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <MX_GPIO_Init+0x110>)
 8000c90:	2102      	movs	r1, #2
 8000c92:	430a      	orrs	r2, r1
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <MX_GPIO_Init+0x110>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x110>)
 8000ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <MX_GPIO_Init+0x110>)
 8000ca8:	2101      	movs	r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <MX_GPIO_Init+0x110>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <MX_GPIO_Init+0x114>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	21a2      	movs	r1, #162	; 0xa2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 feed 	bl	8002aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc6:	23c0      	movs	r3, #192	; 0xc0
 8000cc8:	0199      	lsls	r1, r3, #6
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	2200      	movs	r2, #0
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fee5 	bl	8002aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cd6:	0021      	movs	r1, r4
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	000c      	movs	r4, r1
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <MX_GPIO_Init+0x114>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f001 fd6d 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000cfe:	0021      	movs	r1, r4
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2222      	movs	r2, #34	; 0x22
 8000d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	000c      	movs	r4, r1
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <MX_GPIO_Init+0x114>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f001 fd59 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	0152      	lsls	r2, r2, #5
 8000d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	000c      	movs	r4, r1
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	23a0      	movs	r3, #160	; 0xa0
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fd43 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d52:	0021      	movs	r1, r4
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	0192      	lsls	r2, r2, #6
 8000d5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2202      	movs	r2, #2
 8000d66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	187a      	adds	r2, r7, r1
 8000d70:	23a0      	movs	r3, #160	; 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	0011      	movs	r1, r2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fd2e 	bl	80027d8 <HAL_GPIO_Init>

}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b009      	add	sp, #36	; 0x24
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	50000400 	.word	0x50000400

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x44>)
 8000da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x44>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x44>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x44>)
 8000db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0549      	lsls	r1, r1, #21
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x44>)
 8000dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	055b      	lsls	r3, r3, #21
 8000dcc:	4013      	ands	r3, r2
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	2314      	movs	r3, #20
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f002 fc9c 	bl	8003730 <memset>
  if(hadc->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12a      	bne.n	8000e58 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0349      	lsls	r1, r1, #13
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	035b      	lsls	r3, r3, #13
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e36:	2114      	movs	r1, #20
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2203      	movs	r2, #3
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	187a      	adds	r2, r7, r1
 8000e4c:	23a0      	movs	r3, #160	; 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f001 fcc0 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b00a      	add	sp, #40	; 0x28
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40012400 	.word	0x40012400
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f8a4 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <SystemInit+0x14>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	0512      	lsls	r2, r2, #20
 8000ea6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000eb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eba:	e003      	b.n	8000ec4 <LoopCopyDataInit>

08000ebc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ebe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ec0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ec2:	3104      	adds	r1, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ec8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ecc:	d3f6      	bcc.n	8000ebc <CopyDataInit>
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopForever+0x12>)
  b LoopFillZerobss
 8000ed0:	e002      	b.n	8000ed8 <LoopFillZerobss>

08000ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ed4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed6:	3204      	adds	r2, #4

08000ed8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <LoopForever+0x16>)
  cmp r2, r3
 8000eda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000edc:	d3f9      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ede:	f7ff ffdd 	bl	8000e9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ee2:	f002 fc01 	bl	80036e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee6:	f7ff fa81 	bl	80003ec <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8000ef0:	080037a0 	.word	0x080037a0
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ef8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000efc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000f00:	20000098 	.word	0x20000098

08000f04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x3c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Init+0x3c>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0049      	lsls	r1, r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f810 	bl	8000f48 <HAL_InitTick>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff ff30 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_InitTick+0x88>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d02b      	beq.n	8000fb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_InitTick+0x8c>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HAL_InitTick+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0019      	movs	r1, r3
 8000f6a:	23fa      	movs	r3, #250	; 0xfa
 8000f6c:	0098      	lsls	r0, r3, #2
 8000f6e:	f7ff f8c7 	bl	8000100 <__udivsi3>
 8000f72:	0003      	movs	r3, r0
 8000f74:	0019      	movs	r1, r3
 8000f76:	0020      	movs	r0, r4
 8000f78:	f7ff f8c2 	bl	8000100 <__udivsi3>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 fc1d 	bl	80027be <HAL_SYSTICK_Config>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d112      	bne.n	8000fae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d80a      	bhi.n	8000fa4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	2301      	movs	r3, #1
 8000f92:	425b      	negs	r3, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fbfc 	bl	8002794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_InitTick+0x90>)
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e00d      	b.n	8000fc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e008      	b.n	8000fc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e003      	b.n	8000fc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b005      	add	sp, #20
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000008 	.word	0x20000008

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_IncTick+0x18>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	18d2      	adds	r2, r2, r3
 8000fea:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <HAL_IncTick+0x18>)
 8000fec:	601a      	str	r2, [r3, #0]
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000094 	.word	0x20000094
 8000ff8:	2000000c 	.word	0x2000000c

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	20000094 	.word	0x20000094

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff fff0 	bl	8000ffc <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	d004      	beq.n	8001034 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	f7ff ffe1 	bl	8000ffc <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	429a      	cmp	r2, r3
 8001044:	d8f7      	bhi.n	8001036 <HAL_Delay+0x26>
  {
  }
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	2000000c 	.word	0x2000000c

08001054 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001064:	401a      	ands	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	fe3fffff 	.word	0xfe3fffff

0800107c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	23e0      	movs	r3, #224	; 0xe0
 800108a:	045b      	lsls	r3, r3, #17
 800108c:	4013      	ands	r3, r2
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	2104      	movs	r1, #4
 80010aa:	400a      	ands	r2, r1
 80010ac:	2107      	movs	r1, #7
 80010ae:	4091      	lsls	r1, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	43d2      	mvns	r2, r2
 80010b4:	401a      	ands	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2104      	movs	r1, #4
 80010ba:	400b      	ands	r3, r1
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4099      	lsls	r1, r3
 80010c0:	000b      	movs	r3, r1
 80010c2:	431a      	orrs	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b004      	add	sp, #16
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	23c0      	movs	r3, #192	; 0xc0
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4013      	ands	r3, r2
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	211f      	movs	r1, #31
 8001106:	400a      	ands	r2, r1
 8001108:	210f      	movs	r1, #15
 800110a:	4091      	lsls	r1, r2
 800110c:	000a      	movs	r2, r1
 800110e:	43d2      	mvns	r2, r2
 8001110:	401a      	ands	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0e9b      	lsrs	r3, r3, #26
 8001116:	210f      	movs	r1, #15
 8001118:	4019      	ands	r1, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	201f      	movs	r0, #31
 800111e:	4003      	ands	r3, r0
 8001120:	4099      	lsls	r1, r3
 8001122:	000b      	movs	r3, r1
 8001124:	431a      	orrs	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}

08001132 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	035b      	lsls	r3, r3, #13
 8001144:	0b5b      	lsrs	r3, r3, #13
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	0352      	lsls	r2, r2, #13
 8001166:	0b52      	lsrs	r2, r2, #13
 8001168:	43d2      	mvns	r2, r2
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	0212      	lsls	r2, r2, #8
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	400b      	ands	r3, r1
 8001198:	4904      	ldr	r1, [pc, #16]	; (80011ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800119a:	400b      	ands	r3, r1
 800119c:	431a      	orrs	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	07ffff00 	.word	0x07ffff00

080011b0 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d103      	bne.n	80011cc <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	330c      	adds	r3, #12
 80011c8:	001c      	movs	r4, r3
 80011ca:	e009      	b.n	80011e0 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	33a0      	adds	r3, #160	; 0xa0
 80011d0:	0019      	movs	r1, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	0d5b      	lsrs	r3, r3, #21
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	2204      	movs	r2, #4
 80011da:	4013      	ands	r3, r2
 80011dc:	18cb      	adds	r3, r1, r3
 80011de:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80011e6:	400a      	ands	r2, r1
 80011e8:	43d2      	mvns	r2, r2
 80011ea:	401a      	ands	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	400b      	ands	r3, r1
 80011f2:	4313      	orrs	r3, r2
 80011f4:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b005      	add	sp, #20
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	7cc00000 	.word	0x7cc00000
 8001204:	7cc7ffff 	.word	0x7cc7ffff

08001208 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3320      	adds	r3, #32
 800121a:	0018      	movs	r0, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	0d1b      	lsrs	r3, r3, #20
 8001220:	2203      	movs	r2, #3
 8001222:	401a      	ands	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	0d5b      	lsrs	r3, r3, #21
 8001228:	2101      	movs	r1, #1
 800122a:	400b      	ands	r3, r1
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	18c3      	adds	r3, r0, r3
 8001232:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	4a06      	ldr	r2, [pc, #24]	; (8001250 <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 8001238:	401a      	ands	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0419      	lsls	r1, r3, #16
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b005      	add	sp, #20
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	f000f000 	.word	0xf000f000

08001254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <LL_ADC_EnableInternalRegulator+0x24>)
 8001262:	4013      	ands	r3, r2
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0552      	lsls	r2, r2, #21
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	6fffffe8 	.word	0x6fffffe8

0800127c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	055b      	lsls	r3, r3, #21
 800128c:	401a      	ands	r2, r3
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	055b      	lsls	r3, r3, #21
 8001292:	429a      	cmp	r2, r3
 8001294:	d101      	bne.n	800129a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800129a:	2300      	movs	r3, #0
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <LL_ADC_Enable+0x20>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	2201      	movs	r2, #1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	7fffffe8 	.word	0x7fffffe8

080012c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <LL_ADC_Disable+0x20>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	2202      	movs	r2, #2
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	7fffffe8 	.word	0x7fffffe8

080012ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <LL_ADC_IsEnabled+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_ADC_IsEnabled+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}

0800130e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2202      	movs	r2, #2
 800131c:	4013      	ands	r3, r2
 800131e:	2b02      	cmp	r3, #2
 8001320:	d101      	bne.n	8001326 <LL_ADC_IsDisableOngoing+0x18>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <LL_ADC_IsDisableOngoing+0x1a>
 8001326:	2300      	movs	r3, #0
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <LL_ADC_REG_StartConversion+0x20>)
 800133e:	4013      	ands	r3, r2
 8001340:	2204      	movs	r2, #4
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	7fffffe8 	.word	0x7fffffe8

08001354 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <LL_ADC_REG_StopConversion+0x20>)
 8001362:	4013      	ands	r3, r2
 8001364:	2210      	movs	r2, #16
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}
 8001374:	7fffffe8 	.word	0x7fffffe8

08001378 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2204      	movs	r2, #4
 8001386:	4013      	ands	r3, r2
 8001388:	2b04      	cmp	r3, #4
 800138a:	d101      	bne.n	8001390 <LL_ADC_REG_IsConversionOngoing+0x18>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}

0800139a <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	0052      	lsls	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0052      	lsls	r2, r2, #1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	605a      	str	r2, [r3, #4]
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}

0800141a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	4393      	bics	r3, r2
 8001448:	001a      	movs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <LL_ADC_DisableIT_AWD2+0x1c>)
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	605a      	str	r2, [r3, #4]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	fffffeff 	.word	0xfffffeff

08001478 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a03      	ldr	r2, [pc, #12]	; (8001494 <LL_ADC_DisableIT_AWD3+0x1c>)
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	605a      	str	r2, [r3, #4]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	fffffdff 	.word	0xfffffdff

08001498 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	231f      	movs	r3, #31
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1aa      	b.n	8001814 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10a      	bne.n	80014dc <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff fc89 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2254      	movs	r2, #84	; 0x54
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fecb 	bl	800127c <LL_ADC_IsInternalRegulatorEnabled>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d114      	bne.n	8001514 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff feb0 	bl	8001254 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014f4:	4bc9      	ldr	r3, [pc, #804]	; (800181c <HAL_ADC_Init+0x384>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	49c9      	ldr	r1, [pc, #804]	; (8001820 <HAL_ADC_Init+0x388>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7fe fe00 	bl	8000100 <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8001506:	e002      	b.n	800150e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3b01      	subs	r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff feaf 	bl	800127c <LL_ADC_IsInternalRegulatorEnabled>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d10f      	bne.n	8001542 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	2210      	movs	r2, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001532:	2201      	movs	r2, #1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800153a:	231f      	movs	r3, #31
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff ff16 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 800154c:	0003      	movs	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	2210      	movs	r2, #16
 8001556:	4013      	ands	r3, r2
 8001558:	d000      	beq.n	800155c <HAL_ADC_Init+0xc4>
 800155a:	e14e      	b.n	80017fa <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d000      	beq.n	8001564 <HAL_ADC_Init+0xcc>
 8001562:	e14a      	b.n	80017fa <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	4aae      	ldr	r2, [pc, #696]	; (8001824 <HAL_ADC_Init+0x38c>)
 800156a:	4013      	ands	r3, r2
 800156c:	2202      	movs	r2, #2
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff feb7 	bl	80012ec <LL_ADC_IsEnabled>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d137      	bne.n	80015f2 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2218      	movs	r2, #24
 800158a:	4393      	bics	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	0899      	lsrs	r1, r3, #2
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0f9b      	lsrs	r3, r3, #30
 80015aa:	079a      	lsls	r2, r3, #30
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	23c0      	movs	r3, #192	; 0xc0
 80015ba:	061b      	lsls	r3, r3, #24
 80015bc:	429a      	cmp	r2, r3
 80015be:	d018      	beq.n	80015f2 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d012      	beq.n	80015f2 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d00c      	beq.n	80015f2 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80015d8:	4b93      	ldr	r3, [pc, #588]	; (8001828 <HAL_ADC_Init+0x390>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a93      	ldr	r2, [pc, #588]	; (800182c <HAL_ADC_Init+0x394>)
 80015de:	4013      	ands	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	23f0      	movs	r3, #240	; 0xf0
 80015e8:	039b      	lsls	r3, r3, #14
 80015ea:	401a      	ands	r2, r3
 80015ec:	4b8e      	ldr	r3, [pc, #568]	; (8001828 <HAL_ADC_Init+0x390>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7e1b      	ldrb	r3, [r3, #24]
 80015f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e5b      	ldrb	r3, [r3, #25]
 80015fc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e9b      	ldrb	r3, [r3, #26]
 8001604:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001606:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_ADC_Init+0x17e>
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	e000      	b.n	8001618 <HAL_ADC_Init+0x180>
 8001616:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001618:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800161e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da04      	bge.n	8001632 <HAL_ADC_Init+0x19a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	e001      	b.n	8001636 <HAL_ADC_Init+0x19e>
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8001636:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	5c5b      	ldrb	r3, [r3, r1]
 800163e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8001640:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	5c9b      	ldrb	r3, [r3, r2]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d115      	bne.n	800167e <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7e9b      	ldrb	r3, [r3, #26]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	0252      	lsls	r2, r2, #9
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	e00b      	b.n	800167e <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	2220      	movs	r2, #32
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2201      	movs	r2, #1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	23e0      	movs	r3, #224	; 0xe0
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001694:	4313      	orrs	r3, r2
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80016a4:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 80016aa:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 80016b0:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	223c      	movs	r2, #60	; 0x3c
 80016bc:	5c9b      	ldrb	r3, [r3, r2]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d103      	bne.n	80016ca <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2201      	movs	r2, #1
 80016c6:	4313      	orrs	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a57      	ldr	r2, [pc, #348]	; (8001830 <HAL_ADC_Init+0x398>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a53      	ldr	r2, [pc, #332]	; (8001834 <HAL_ADC_Init+0x39c>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	001a      	movs	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	f7ff fcc8 	bl	8001096 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	494a      	ldr	r1, [pc, #296]	; (8001838 <HAL_ADC_Init+0x3a0>)
 8001710:	001a      	movs	r2, r3
 8001712:	f7ff fcc0 	bl	8001096 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2110      	movs	r1, #16
 800172a:	4249      	negs	r1, r1
 800172c:	430a      	orrs	r2, r1
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
 8001730:	e03c      	b.n	80017ac <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	039b      	lsls	r3, r3, #14
 800173a:	429a      	cmp	r2, r3
 800173c:	d136      	bne.n	80017ac <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e00c      	b.n	800175e <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	40da      	lsrs	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	220f      	movs	r2, #15
 8001752:	4013      	ands	r3, r2
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d006      	beq.n	8001766 <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	3301      	adds	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b07      	cmp	r3, #7
 8001762:	d9ef      	bls.n	8001744 <HAL_ADC_Init+0x2ac>
 8001764:	e000      	b.n	8001768 <HAL_ADC_Init+0x2d0>
        {
          break;
 8001766:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d109      	bne.n	8001782 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2110      	movs	r1, #16
 800177a:	4249      	negs	r1, r1
 800177c:	430a      	orrs	r2, r1
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
 8001780:	e014      	b.n	80017ac <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	4a2b      	ldr	r2, [pc, #172]	; (800183c <HAL_ADC_Init+0x3a4>)
 800178e:	4694      	mov	ip, r2
 8001790:	4463      	add	r3, ip
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	221c      	movs	r2, #28
 8001796:	4013      	ands	r3, r2
 8001798:	2210      	movs	r2, #16
 800179a:	4252      	negs	r2, r2
 800179c:	409a      	lsls	r2, r3
 800179e:	0011      	movs	r1, r2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_ADC_Init+0x3a8>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d10b      	bne.n	80017d4 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	2203      	movs	r2, #3
 80017c8:	4393      	bics	r3, r2
 80017ca:	2201      	movs	r2, #1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017d2:	e01c      	b.n	800180e <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	2212      	movs	r2, #18
 80017da:	4393      	bics	r3, r2
 80017dc:	2210      	movs	r2, #16
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2201      	movs	r2, #1
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 80017f0:	231f      	movs	r3, #31
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017f8:	e009      	b.n	800180e <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	2210      	movs	r2, #16
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001806:	231f      	movs	r3, #31
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800180e:	231f      	movs	r3, #31
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b008      	add	sp, #32
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000004 	.word	0x20000004
 8001820:	00030d40 	.word	0x00030d40
 8001824:	fffffefd 	.word	0xfffffefd
 8001828:	40012708 	.word	0x40012708
 800182c:	ffc3ffff 	.word	0xffc3ffff
 8001830:	fffe0219 	.word	0xfffe0219
 8001834:	dffffc02 	.word	0xdffffc02
 8001838:	07ffff04 	.word	0x07ffff04
 800183c:	3fffffff 	.word	0x3fffffff
 8001840:	833fffe7 	.word	0x833fffe7

08001844 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff fd91 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d135      	bne.n	80018c6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2254      	movs	r2, #84	; 0x54
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ADC_Start+0x24>
 8001864:	2302      	movs	r3, #2
 8001866:	e035      	b.n	80018d4 <HAL_ADC_Start+0x90>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2254      	movs	r2, #84	; 0x54
 800186c:	2101      	movs	r1, #1
 800186e:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001870:	250f      	movs	r5, #15
 8001872:	197c      	adds	r4, r7, r5
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0018      	movs	r0, r3
 8001878:	f000 fda0 	bl	80023bc <ADC_Enable>
 800187c:	0003      	movs	r3, r0
 800187e:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001880:	197b      	adds	r3, r7, r5
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d119      	bne.n	80018bc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_ADC_Start+0x98>)
 800188e:	4013      	ands	r3, r2
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	0052      	lsls	r2, r2, #1
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	221c      	movs	r2, #28
 80018a6:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2254      	movs	r2, #84	; 0x54
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fd3b 	bl	8001330 <LL_ADC_REG_StartConversion>
 80018ba:	e008      	b.n	80018ce <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2254      	movs	r2, #84	; 0x54
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]
 80018c4:	e003      	b.n	80018ce <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018c6:	230f      	movs	r3, #15
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2202      	movs	r2, #2
 80018cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018ce:	230f      	movs	r3, #15
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	781b      	ldrb	r3, [r3, #0]
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bdb0      	pop	{r4, r5, r7, pc}
 80018dc:	fffff0fe 	.word	0xfffff0fe

080018e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2254      	movs	r2, #84	; 0x54
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Stop+0x16>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e02a      	b.n	800194c <HAL_ADC_Stop+0x6c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2254      	movs	r2, #84	; 0x54
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80018fe:	250f      	movs	r5, #15
 8001900:	197c      	adds	r4, r7, r5
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 fd1d 	bl	8002344 <ADC_ConversionStop>
 800190a:	0003      	movs	r3, r0
 800190c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800190e:	197b      	adds	r3, r7, r5
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d113      	bne.n	800193e <HAL_ADC_Stop+0x5e>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001916:	250f      	movs	r5, #15
 8001918:	197c      	adds	r4, r7, r5
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f000 fda9 	bl	8002474 <ADC_Disable>
 8001922:	0003      	movs	r3, r0
 8001924:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d107      	bne.n	800193e <HAL_ADC_Stop+0x5e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_ADC_Stop+0x74>)
 8001934:	4013      	ands	r3, r2
 8001936:	2201      	movs	r2, #1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2254      	movs	r2, #84	; 0x54
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001946:	230f      	movs	r3, #15
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	781b      	ldrb	r3, [r3, #0]
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b004      	add	sp, #16
 8001952:	bdb0      	pop	{r4, r5, r7, pc}
 8001954:	fffffefe 	.word	0xfffffefe

08001958 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b08      	cmp	r3, #8
 8001968:	d102      	bne.n	8001970 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800196a:	2308      	movs	r3, #8
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e00f      	b.n	8001990 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	2220      	movs	r2, #32
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e06c      	b.n	8001a66 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800198c:	2304      	movs	r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001990:	f7ff fb34 	bl	8000ffc <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001998:	e019      	b.n	80019ce <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	d016      	beq.n	80019ce <HAL_ADC_PollForConversion+0x76>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019a0:	f7ff fb2c 	bl	8000ffc <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d302      	bcc.n	80019b6 <HAL_ADC_PollForConversion+0x5e>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	2204      	movs	r2, #4
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2254      	movs	r2, #84	; 0x54
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04b      	b.n	8001a66 <HAL_ADC_PollForConversion+0x10e>
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0df      	beq.n	800199a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fb6f 	bl	80010d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d02e      	beq.n	8001a54 <HAL_ADC_PollForConversion+0xfc>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7e9b      	ldrb	r3, [r3, #26]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d12a      	bne.n	8001a54 <HAL_ADC_PollForConversion+0xfc>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2208      	movs	r2, #8
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d123      	bne.n	8001a54 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff fcb1 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d110      	bne.n	8001a3c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	210c      	movs	r1, #12
 8001a26:	438a      	bics	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_ADC_PollForConversion+0x118>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	2201      	movs	r2, #1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58
 8001a3a:	e00b      	b.n	8001a54 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	2220      	movs	r2, #32
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e1b      	ldrb	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	220c      	movs	r2, #12
 8001a62:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	fffffefe 	.word	0xfffffefe

08001a74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	5c9b      	ldrb	r3, [r3, r2]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x24>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e1bc      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x39e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2254      	movs	r2, #84	; 0x54
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff fc5b 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d000      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x3c>
 8001ac6:	e19f      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d100      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x46>
 8001ad0:	e13e      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001ae2:	4abf      	ldr	r2, [pc, #764]	; (8001de0 <HAL_ADC_ConfigChannel+0x354>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d108      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0019      	movs	r1, r3
 8001af2:	0010      	movs	r0, r2
 8001af4:	f7ff fb1d 	bl	8001132 <LL_ADC_REG_SetSequencerChAdd>
 8001af8:	e0c9      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	211f      	movs	r1, #31
 8001b04:	400b      	ands	r3, r1
 8001b06:	210f      	movs	r1, #15
 8001b08:	4099      	lsls	r1, r3
 8001b0a:	000b      	movs	r3, r1
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	035b      	lsls	r3, r3, #13
 8001b18:	0b5b      	lsrs	r3, r3, #13
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x9c>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	221f      	movs	r2, #31
 8001b24:	4013      	ands	r3, r2
 8001b26:	e098      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d000      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0xa8>
 8001b32:	e091      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1cc>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d000      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0xb4>
 8001b3e:	e089      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1c8>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2204      	movs	r2, #4
 8001b46:	4013      	ands	r3, r2
 8001b48:	d000      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0xc0>
 8001b4a:	e081      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1c4>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	4013      	ands	r3, r2
 8001b54:	d000      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0xcc>
 8001b56:	e079      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1c0>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d000      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0xd8>
 8001b62:	e071      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1bc>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d000      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0xe4>
 8001b6e:	e069      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1b8>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	4013      	ands	r3, r2
 8001b78:	d000      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0xf0>
 8001b7a:	e061      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1b4>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	4013      	ands	r3, r2
 8001b84:	d000      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0xfc>
 8001b86:	e059      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1b0>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	d151      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1ac>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d149      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1a8>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d141      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1a4>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d139      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1a0>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	015b      	lsls	r3, r3, #5
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d131      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x19c>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	019b      	lsls	r3, r3, #6
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d129      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x198>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d121      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x194>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	4013      	ands	r3, r2
 8001be6:	d119      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x190>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d111      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x18c>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d109      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x188>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	02db      	lsls	r3, r3, #11
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d001      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x184>
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	e024      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c10:	2300      	movs	r3, #0
 8001c12:	e022      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c14:	2311      	movs	r3, #17
 8001c16:	e020      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c18:	2310      	movs	r3, #16
 8001c1a:	e01e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	e01c      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	230e      	movs	r3, #14
 8001c22:	e01a      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	230d      	movs	r3, #13
 8001c26:	e018      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	230c      	movs	r3, #12
 8001c2a:	e016      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	230b      	movs	r3, #11
 8001c2e:	e014      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c30:	230a      	movs	r3, #10
 8001c32:	e012      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c34:	2309      	movs	r3, #9
 8001c36:	e010      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c38:	2308      	movs	r3, #8
 8001c3a:	e00e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	e00c      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c40:	2306      	movs	r3, #6
 8001c42:	e00a      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c44:	2305      	movs	r3, #5
 8001c46:	e008      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e006      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e004      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	6852      	ldr	r2, [r2, #4]
 8001c5e:	201f      	movs	r0, #31
 8001c60:	4002      	ands	r2, r0
 8001c62:	4093      	lsls	r3, r2
 8001c64:	000a      	movs	r2, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d808      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	001a      	movs	r2, r3
 8001c8a:	f7ff fa32 	bl	80010f2 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	f7ff fa6c 	bl	8001178 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db00      	blt.n	8001caa <HAL_ADC_ConfigChannel+0x21e>
 8001ca8:	e0b8      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001caa:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff f9e5 	bl	800107c <LL_ADC_GetCommonPathInternalCh>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_ADC_ConfigChannel+0x35c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d11d      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x270>
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d118      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0412      	lsls	r2, r2, #16
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	f7ff f9bc 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HAL_ADC_ConfigChannel+0x360>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4943      	ldr	r1, [pc, #268]	; (8001df0 <HAL_ADC_ConfigChannel+0x364>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7fe fa0c 	bl	8000100 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cfa:	e08f      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <HAL_ADC_ConfigChannel+0x368>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10e      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x298>
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	045b      	lsls	r3, r3, #17
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	0452      	lsls	r2, r2, #17
 8001d16:	4313      	orrs	r3, r2
 8001d18:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f7ff f999 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001d22:	e07b      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a33      	ldr	r2, [pc, #204]	; (8001df8 <HAL_ADC_ConfigChannel+0x36c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d000      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x2a4>
 8001d2e:	e075      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	03db      	lsls	r3, r3, #15
 8001d36:	4013      	ands	r3, r2
 8001d38:	d000      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x2b0>
 8001d3a:	e06f      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	03d2      	lsls	r2, r2, #15
 8001d42:	4313      	orrs	r3, r2
 8001d44:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f7ff f983 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001d4e:	e065      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	061b      	lsls	r3, r3, #24
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d004      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001d60:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_ADC_ConfigChannel+0x354>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d107      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0019      	movs	r1, r3
 8001d70:	0010      	movs	r0, r2
 8001d72:	f7ff f9ef 	bl	8001154 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da4e      	bge.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff f97b 	bl	800107c <LL_ADC_GetCommonPathInternalCh>
 8001d86:	0003      	movs	r3, r0
 8001d88:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_ADC_ConfigChannel+0x35c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_ADC_ConfigChannel+0x370>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0010      	movs	r0, r2
 8001da0:	f7ff f958 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001da4:	e03a      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_ADC_ConfigChannel+0x368>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d108      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_ADC_ConfigChannel+0x374>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001db8:	0019      	movs	r1, r3
 8001dba:	0010      	movs	r0, r2
 8001dbc:	f7ff f94a 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001dc0:	e02c      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_ADC_ConfigChannel+0x36c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d127      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_ADC_ConfigChannel+0x378>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_ADC_ConfigChannel+0x358>)
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	f7ff f93c 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001ddc:	e01e      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x390>
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	80000004 	.word	0x80000004
 8001de4:	40012708 	.word	0x40012708
 8001de8:	b0001000 	.word	0xb0001000
 8001dec:	20000004 	.word	0x20000004
 8001df0:	00030d40 	.word	0x00030d40
 8001df4:	b8004000 	.word	0xb8004000
 8001df8:	b4002000 	.word	0xb4002000
 8001dfc:	ff7fffff 	.word	0xff7fffff
 8001e00:	feffffff 	.word	0xfeffffff
 8001e04:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001e14:	2317      	movs	r3, #23
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2254      	movs	r2, #84	; 0x54
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e24:	2317      	movs	r3, #23
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b006      	add	sp, #24
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)

08001e34 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3e:	230f      	movs	r3, #15
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2254      	movs	r2, #84	; 0x54
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_AnalogWDGConfig+0x20>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e269      	b.n	8002328 <HAL_ADC_AnalogWDGConfig+0x4f4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2254      	movs	r2, #84	; 0x54
 8001e58:	2101      	movs	r1, #1
 8001e5a:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fa89 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d000      	beq.n	8001e6c <HAL_ADC_AnalogWDGConfig+0x38>
 8001e6a:	e22a      	b.n	80022c2 <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a93      	ldr	r2, [pc, #588]	; (80020c0 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d142      	bne.n	8001efc <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	0412      	lsls	r2, r2, #16
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d011      	beq.n	8001ea6 <HAL_ADC_AnalogWDGConfig+0x72>
 8001e82:	22c0      	movs	r2, #192	; 0xc0
 8001e84:	0412      	lsls	r2, r2, #16
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d115      	bne.n	8001eb6 <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4a8c      	ldr	r2, [pc, #560]	; (80020c4 <HAL_ADC_AnalogWDGConfig+0x290>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	22c0      	movs	r2, #192	; 0xc0
 8001e98:	0412      	lsls	r2, r2, #16
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	4988      	ldr	r1, [pc, #544]	; (80020c0 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	f7ff f986 	bl	80011b0 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001ea4:	e00f      	b.n	8001ec6 <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a87      	ldr	r2, [pc, #540]	; (80020c8 <HAL_ADC_AnalogWDGConfig+0x294>)
 8001eac:	4984      	ldr	r1, [pc, #528]	; (80020c0 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff f97e 	bl	80011b0 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001eb4:	e007      	b.n	8001ec6 <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4981      	ldr	r1, [pc, #516]	; (80020c0 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff f976 	bl	80011b0 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001ec4:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a80      	ldr	r2, [pc, #512]	; (80020cc <HAL_ADC_AnalogWDGConfig+0x298>)
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fa5f 	bl	800139a <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	7b1b      	ldrb	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fa79 	bl	80013e0 <LL_ADC_EnableIT_AWD1>
 8001eee:	e1e8      	b.n	80022c2 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff fa9f 	bl	8001438 <LL_ADC_DisableIT_AWD1>
 8001efa:	e1e2      	b.n	80022c2 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0412      	lsls	r2, r2, #16
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_ADC_AnalogWDGConfig+0xd6>
 8001f08:	e18f      	b.n	800222a <HAL_ADC_AnalogWDGConfig+0x3f6>
 8001f0a:	22c0      	movs	r2, #192	; 0xc0
 8001f0c:	0412      	lsls	r2, r2, #16
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d000      	beq.n	8001f14 <HAL_ADC_AnalogWDGConfig+0xe0>
 8001f12:	e193      	b.n	800223c <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6d      	ldr	r2, [pc, #436]	; (80020d0 <HAL_ADC_AnalogWDGConfig+0x29c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d000      	beq.n	8001f20 <HAL_ADC_AnalogWDGConfig+0xec>
 8001f1e:	e0bc      	b.n	800209a <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	22a0      	movs	r2, #160	; 0xa0
 8001f26:	5899      	ldr	r1, [r3, r2]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	035b      	lsls	r3, r3, #13
 8001f2e:	0b5b      	lsrs	r3, r3, #13
 8001f30:	d108      	bne.n	8001f44 <HAL_ADC_AnalogWDGConfig+0x110>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	221f      	movs	r2, #31
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	e0a4      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d000      	beq.n	8001f50 <HAL_ADC_AnalogWDGConfig+0x11c>
 8001f4e:	e09d      	b.n	800208c <HAL_ADC_AnalogWDGConfig+0x258>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d000      	beq.n	8001f5c <HAL_ADC_AnalogWDGConfig+0x128>
 8001f5a:	e095      	b.n	8002088 <HAL_ADC_AnalogWDGConfig+0x254>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2204      	movs	r2, #4
 8001f62:	4013      	ands	r3, r2
 8001f64:	d000      	beq.n	8001f68 <HAL_ADC_AnalogWDGConfig+0x134>
 8001f66:	e08d      	b.n	8002084 <HAL_ADC_AnalogWDGConfig+0x250>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d000      	beq.n	8001f74 <HAL_ADC_AnalogWDGConfig+0x140>
 8001f72:	e085      	b.n	8002080 <HAL_ADC_AnalogWDGConfig+0x24c>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d000      	beq.n	8001f80 <HAL_ADC_AnalogWDGConfig+0x14c>
 8001f7e:	e07d      	b.n	800207c <HAL_ADC_AnalogWDGConfig+0x248>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2220      	movs	r2, #32
 8001f86:	4013      	ands	r3, r2
 8001f88:	d000      	beq.n	8001f8c <HAL_ADC_AnalogWDGConfig+0x158>
 8001f8a:	e075      	b.n	8002078 <HAL_ADC_AnalogWDGConfig+0x244>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	4013      	ands	r3, r2
 8001f94:	d000      	beq.n	8001f98 <HAL_ADC_AnalogWDGConfig+0x164>
 8001f96:	e06d      	b.n	8002074 <HAL_ADC_AnalogWDGConfig+0x240>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d000      	beq.n	8001fa4 <HAL_ADC_AnalogWDGConfig+0x170>
 8001fa2:	e065      	b.n	8002070 <HAL_ADC_AnalogWDGConfig+0x23c>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	d000      	beq.n	8001fb2 <HAL_ADC_AnalogWDGConfig+0x17e>
 8001fb0:	e05b      	b.n	800206a <HAL_ADC_AnalogWDGConfig+0x236>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d152      	bne.n	8002064 <HAL_ADC_AnalogWDGConfig+0x230>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d149      	bne.n	800205e <HAL_ADC_AnalogWDGConfig+0x22a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d140      	bne.n	8002058 <HAL_ADC_AnalogWDGConfig+0x224>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	015b      	lsls	r3, r3, #5
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d137      	bne.n	8002052 <HAL_ADC_AnalogWDGConfig+0x21e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	019b      	lsls	r3, r3, #6
 8001fea:	4013      	ands	r3, r2
 8001fec:	d12e      	bne.n	800204c <HAL_ADC_AnalogWDGConfig+0x218>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	01db      	lsls	r3, r3, #7
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d125      	bne.n	8002046 <HAL_ADC_AnalogWDGConfig+0x212>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4013      	ands	r3, r2
 8002004:	d11c      	bne.n	8002040 <HAL_ADC_AnalogWDGConfig+0x20c>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	4013      	ands	r3, r2
 8002010:	d113      	bne.n	800203a <HAL_ADC_AnalogWDGConfig+0x206>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	029b      	lsls	r3, r3, #10
 800201a:	4013      	ands	r3, r2
 800201c:	d10a      	bne.n	8002034 <HAL_ADC_AnalogWDGConfig+0x200>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	02db      	lsls	r3, r3, #11
 8002026:	4013      	ands	r3, r2
 8002028:	d002      	beq.n	8002030 <HAL_ADC_AnalogWDGConfig+0x1fc>
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	02db      	lsls	r3, r3, #11
 800202e:	e02e      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002030:	2301      	movs	r3, #1
 8002032:	e02c      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	029b      	lsls	r3, r3, #10
 8002038:	e029      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	e026      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	e023      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	01db      	lsls	r3, r3, #7
 800204a:	e020      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	e01d      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	e01a      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	e017      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	e014      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	e011      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	e00e      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	e00c      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002074:	2340      	movs	r3, #64	; 0x40
 8002076:	e00a      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002078:	2320      	movs	r3, #32
 800207a:	e008      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 800207c:	2310      	movs	r3, #16
 800207e:	e006      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002080:	2308      	movs	r3, #8
 8002082:	e004      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002084:	2304      	movs	r3, #4
 8002086:	e002      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 8002088:	2302      	movs	r3, #2
 800208a:	e000      	b.n	800208e <HAL_ADC_AnalogWDGConfig+0x25a>
 800208c:	2301      	movs	r3, #1
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	430b      	orrs	r3, r1
 8002094:	21a0      	movs	r1, #160	; 0xa0
 8002096:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 8002098:	e0d9      	b.n	800224e <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	22a4      	movs	r2, #164	; 0xa4
 80020a0:	5899      	ldr	r1, [r3, r2]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	035b      	lsls	r3, r3, #13
 80020a8:	0b5b      	lsrs	r3, r3, #13
 80020aa:	d113      	bne.n	80020d4 <HAL_ADC_AnalogWDGConfig+0x2a0>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	221f      	movs	r2, #31
 80020b4:	4013      	ands	r3, r2
 80020b6:	2201      	movs	r2, #1
 80020b8:	409a      	lsls	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	e0af      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	7cc00000 	.word	0x7cc00000
 80020c4:	fc07ffff 	.word	0xfc07ffff
 80020c8:	0087ffff 	.word	0x0087ffff
 80020cc:	fffeffff 	.word	0xfffeffff
 80020d0:	0017ffff 	.word	0x0017ffff
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d000      	beq.n	80020e0 <HAL_ADC_AnalogWDGConfig+0x2ac>
 80020de:	e09d      	b.n	800221c <HAL_ADC_AnalogWDGConfig+0x3e8>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	d000      	beq.n	80020ec <HAL_ADC_AnalogWDGConfig+0x2b8>
 80020ea:	e095      	b.n	8002218 <HAL_ADC_AnalogWDGConfig+0x3e4>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2204      	movs	r2, #4
 80020f2:	4013      	ands	r3, r2
 80020f4:	d000      	beq.n	80020f8 <HAL_ADC_AnalogWDGConfig+0x2c4>
 80020f6:	e08d      	b.n	8002214 <HAL_ADC_AnalogWDGConfig+0x3e0>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2208      	movs	r2, #8
 80020fe:	4013      	ands	r3, r2
 8002100:	d000      	beq.n	8002104 <HAL_ADC_AnalogWDGConfig+0x2d0>
 8002102:	e085      	b.n	8002210 <HAL_ADC_AnalogWDGConfig+0x3dc>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2210      	movs	r2, #16
 800210a:	4013      	ands	r3, r2
 800210c:	d000      	beq.n	8002110 <HAL_ADC_AnalogWDGConfig+0x2dc>
 800210e:	e07d      	b.n	800220c <HAL_ADC_AnalogWDGConfig+0x3d8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2220      	movs	r2, #32
 8002116:	4013      	ands	r3, r2
 8002118:	d000      	beq.n	800211c <HAL_ADC_AnalogWDGConfig+0x2e8>
 800211a:	e075      	b.n	8002208 <HAL_ADC_AnalogWDGConfig+0x3d4>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2240      	movs	r2, #64	; 0x40
 8002122:	4013      	ands	r3, r2
 8002124:	d000      	beq.n	8002128 <HAL_ADC_AnalogWDGConfig+0x2f4>
 8002126:	e06d      	b.n	8002204 <HAL_ADC_AnalogWDGConfig+0x3d0>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	4013      	ands	r3, r2
 8002130:	d000      	beq.n	8002134 <HAL_ADC_AnalogWDGConfig+0x300>
 8002132:	e065      	b.n	8002200 <HAL_ADC_AnalogWDGConfig+0x3cc>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d000      	beq.n	8002142 <HAL_ADC_AnalogWDGConfig+0x30e>
 8002140:	e05b      	b.n	80021fa <HAL_ADC_AnalogWDGConfig+0x3c6>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d152      	bne.n	80021f4 <HAL_ADC_AnalogWDGConfig+0x3c0>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4013      	ands	r3, r2
 8002158:	d149      	bne.n	80021ee <HAL_ADC_AnalogWDGConfig+0x3ba>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	4013      	ands	r3, r2
 8002164:	d140      	bne.n	80021e8 <HAL_ADC_AnalogWDGConfig+0x3b4>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	015b      	lsls	r3, r3, #5
 800216e:	4013      	ands	r3, r2
 8002170:	d137      	bne.n	80021e2 <HAL_ADC_AnalogWDGConfig+0x3ae>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	4013      	ands	r3, r2
 800217c:	d12e      	bne.n	80021dc <HAL_ADC_AnalogWDGConfig+0x3a8>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	01db      	lsls	r3, r3, #7
 8002186:	4013      	ands	r3, r2
 8002188:	d125      	bne.n	80021d6 <HAL_ADC_AnalogWDGConfig+0x3a2>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	4013      	ands	r3, r2
 8002194:	d11c      	bne.n	80021d0 <HAL_ADC_AnalogWDGConfig+0x39c>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	025b      	lsls	r3, r3, #9
 800219e:	4013      	ands	r3, r2
 80021a0:	d113      	bne.n	80021ca <HAL_ADC_AnalogWDGConfig+0x396>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	4013      	ands	r3, r2
 80021ac:	d10a      	bne.n	80021c4 <HAL_ADC_AnalogWDGConfig+0x390>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	02db      	lsls	r3, r3, #11
 80021b6:	4013      	ands	r3, r2
 80021b8:	d002      	beq.n	80021c0 <HAL_ADC_AnalogWDGConfig+0x38c>
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	02db      	lsls	r3, r3, #11
 80021be:	e02e      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e02c      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	e029      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	e026      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	e023      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	01db      	lsls	r3, r3, #7
 80021da:	e020      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	019b      	lsls	r3, r3, #6
 80021e0:	e01d      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	e01a      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	e017      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	e014      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	e011      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	e00e      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	e00c      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002204:	2340      	movs	r3, #64	; 0x40
 8002206:	e00a      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002208:	2320      	movs	r3, #32
 800220a:	e008      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800220c:	2310      	movs	r3, #16
 800220e:	e006      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002210:	2308      	movs	r3, #8
 8002212:	e004      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002214:	2304      	movs	r3, #4
 8002216:	e002      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8002218:	2302      	movs	r3, #2
 800221a:	e000      	b.n	800221e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800221c:	2301      	movs	r3, #1
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	430b      	orrs	r3, r1
 8002224:	21a4      	movs	r1, #164	; 0xa4
 8002226:	5053      	str	r3, [r2, r1]
          break;
 8002228:	e011      	b.n	800224e <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <HAL_ADC_AnalogWDGConfig+0x4fc>)
 8002234:	0019      	movs	r1, r3
 8002236:	f7fe ffbb 	bl	80011b0 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800223a:	e008      	b.n	800224e <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	0019      	movs	r1, r3
 8002248:	f7fe ffb2 	bl	80011b0 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800224c:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a38      	ldr	r2, [pc, #224]	; (8002334 <HAL_ADC_AnalogWDGConfig+0x500>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d11a      	bne.n	800228e <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	4a36      	ldr	r2, [pc, #216]	; (8002338 <HAL_ADC_AnalogWDGConfig+0x504>)
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff f8a1 	bl	80013b0 <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7b1b      	ldrb	r3, [r3, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff f8be 	bl	80013fc <LL_ADC_EnableIT_AWD2>
 8002280:	e01f      	b.n	80022c2 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0018      	movs	r0, r3
 8002288:	f7ff f8e6 	bl	8001458 <LL_ADC_DisableIT_AWD2>
 800228c:	e019      	b.n	80022c2 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_ADC_AnalogWDGConfig+0x508>)
 8002294:	401a      	ands	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff f892 	bl	80013c8 <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	7b1b      	ldrb	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff f8b2 	bl	800141a <LL_ADC_EnableIT_AWD3>
 80022b6:	e004      	b.n	80022c2 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff f8db 	bl	8001478 <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_ADC_AnalogWDGConfig+0x50c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d118      	bne.n	80022fe <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	2103      	movs	r1, #3
 80022da:	400b      	ands	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	2103      	movs	r1, #3
 80022f2:	400b      	ands	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e005      	b.n	800230a <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	f7fe ff77 	bl	8001208 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2254      	movs	r2, #84	; 0x54
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002322:	230f      	movs	r3, #15
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b006      	add	sp, #24
 800232e:	bd80      	pop	{r7, pc}
 8002330:	0087ffff 	.word	0x0087ffff
 8002334:	0017ffff 	.word	0x0017ffff
 8002338:	fffdffff 	.word	0xfffdffff
 800233c:	fffbffff 	.word	0xfffbffff
 8002340:	7cc00000 	.word	0x7cc00000

08002344 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff f811 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d02b      	beq.n	80023b2 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0018      	movs	r0, r3
 8002360:	f7fe ffd5 	bl	800130e <LL_ADC_IsDisableOngoing>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d104      	bne.n	8002372 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe fff1 	bl	8001354 <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002372:	f7fe fe43 	bl	8000ffc <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	60fb      	str	r3, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800237a:	e014      	b.n	80023a6 <ADC_ConversionStop+0x62>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800237c:	f7fe fe3e 	bl	8000ffc <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d90d      	bls.n	80023a6 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	2210      	movs	r2, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	; 0x58
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	2201      	movs	r2, #1
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e006      	b.n	80023b4 <ADC_ConversionStop+0x70>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d1e4      	bne.n	800237c <ADC_ConversionStop+0x38>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fe ff8f 	bl	80012ec <LL_ADC_IsEnabled>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d149      	bne.n	8002466 <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <ADC_Enable+0xb4>)
 80023da:	4013      	ands	r3, r2
 80023dc:	d00d      	beq.n	80023fa <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	2210      	movs	r2, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2201      	movs	r2, #1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e036      	b.n	8002468 <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fe ff50 	bl	80012a4 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e5b      	ldrb	r3, [r3, #25]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d02c      	beq.n	8002466 <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800240c:	f7fe fdf6 	bl	8000ffc <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002414:	e020      	b.n	8002458 <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	f7fe ff66 	bl	80012ec <LL_ADC_IsEnabled>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d104      	bne.n	800242e <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0018      	movs	r0, r3
 800242a:	f7fe ff3b 	bl	80012a4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800242e:	f7fe fde5 	bl	8000ffc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d90d      	bls.n	8002458 <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	2210      	movs	r2, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2201      	movs	r2, #1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e007      	b.n	8002468 <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	4013      	ands	r3, r2
 8002462:	2b01      	cmp	r3, #1
 8002464:	d1d7      	bne.n	8002416 <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	80000017 	.word	0x80000017

08002474 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f7fe ff44 	bl	800130e <LL_ADC_IsDisableOngoing>
 8002486:	0003      	movs	r3, r0
 8002488:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0018      	movs	r0, r3
 8002490:	f7fe ff2c 	bl	80012ec <LL_ADC_IsEnabled>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d040      	beq.n	800251a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13d      	bne.n	800251a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2205      	movs	r2, #5
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10d      	bne.n	80024c8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe ff09 	bl	80012c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2203      	movs	r2, #3
 80024bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024be:	f7fe fd9d 	bl	8000ffc <HAL_GetTick>
 80024c2:	0003      	movs	r3, r0
 80024c4:	60bb      	str	r3, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024c6:	e022      	b.n	800250e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	2210      	movs	r2, #16
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2201      	movs	r2, #1
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e01b      	b.n	800251c <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024e4:	f7fe fd8a 	bl	8000ffc <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d90d      	bls.n	800250e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	2210      	movs	r2, #16
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	2201      	movs	r2, #1
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e006      	b.n	800251c <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d1e4      	bne.n	80024e4 <ADC_Disable+0x70>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bd80      	pop	{r7, pc}

08002524 <LL_ADC_IsEnabled>:
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <LL_ADC_IsEnabled+0x18>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <LL_ADC_IsEnabled+0x1a>
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}

08002546 <LL_ADC_IsCalibrationOnGoing>:
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0fdb      	lsrs	r3, r3, #31
 8002554:	07da      	lsls	r2, r3, #31
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	429a      	cmp	r2, r3
 800255c:	d101      	bne.n	8002562 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2254      	movs	r2, #84	; 0x54
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADCEx_Calibration_Start+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e06c      	b.n	8002660 <HAL_ADCEx_Calibration_Start+0xf4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2254      	movs	r2, #84	; 0x54
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800258e:	2317      	movs	r3, #23
 8002590:	18fc      	adds	r4, r7, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff ff6d 	bl	8002474 <ADC_Disable>
 800259a:	0003      	movs	r3, r0
 800259c:	7023      	strb	r3, [r4, #0]
  
  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff ffbe 	bl	8002524 <LL_ADC_IsEnabled>
 80025a8:	1e03      	subs	r3, r0, #0
 80025aa:	d14c      	bne.n	8002646 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <HAL_ADCEx_Calibration_Start+0xfc>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	2202      	movs	r2, #2
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2203      	movs	r2, #3
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2103      	movs	r1, #3
 80025d4:	438a      	bics	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	0609      	lsls	r1, r1, #24
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025ea:	e014      	b.n	8002616 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_ADCEx_Calibration_Start+0x100>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d90d      	bls.n	8002616 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	2212      	movs	r2, #18
 8002600:	4393      	bics	r3, r2
 8002602:	2210      	movs	r2, #16
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2254      	movs	r2, #84	; 0x54
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e024      	b.n	8002660 <HAL_ADCEx_Calibration_Start+0xf4>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff ff93 	bl	8002546 <LL_ADC_IsCalibrationOnGoing>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d1e3      	bne.n	80025ec <HAL_ADCEx_Calibration_Start+0x80>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	2203      	movs	r2, #3
 800263a:	4393      	bics	r3, r2
 800263c:	2201      	movs	r2, #1
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	; 0x58
 8002644:	e005      	b.n	8002652 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	2210      	movs	r2, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2254      	movs	r2, #84	; 0x54
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800265a:	2317      	movs	r3, #23
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b007      	add	sp, #28
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	fffffefd 	.word	0xfffffefd
 800266c:	0002f1ff 	.word	0x0002f1ff

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	0002      	movs	r2, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b7f      	cmp	r3, #127	; 0x7f
 8002684:	d828      	bhi.n	80026d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002686:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <__NVIC_SetPriority+0xd4>)
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	33c0      	adds	r3, #192	; 0xc0
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	589b      	ldr	r3, [r3, r2]
 8002696:	1dfa      	adds	r2, r7, #7
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	0011      	movs	r1, r2
 800269c:	2203      	movs	r2, #3
 800269e:	400a      	ands	r2, r1
 80026a0:	00d2      	lsls	r2, r2, #3
 80026a2:	21ff      	movs	r1, #255	; 0xff
 80026a4:	4091      	lsls	r1, r2
 80026a6:	000a      	movs	r2, r1
 80026a8:	43d2      	mvns	r2, r2
 80026aa:	401a      	ands	r2, r3
 80026ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	401a      	ands	r2, r3
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	0018      	movs	r0, r3
 80026bc:	2303      	movs	r3, #3
 80026be:	4003      	ands	r3, r0
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026c4:	481f      	ldr	r0, [pc, #124]	; (8002744 <__NVIC_SetPriority+0xd4>)
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	430a      	orrs	r2, r1
 80026d0:	33c0      	adds	r3, #192	; 0xc0
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026d6:	e031      	b.n	800273c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <__NVIC_SetPriority+0xd8>)
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	0019      	movs	r1, r3
 80026e0:	230f      	movs	r3, #15
 80026e2:	400b      	ands	r3, r1
 80026e4:	3b08      	subs	r3, #8
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3306      	adds	r3, #6
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	3304      	adds	r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1dfa      	adds	r2, r7, #7
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	0011      	movs	r1, r2
 80026f8:	2203      	movs	r2, #3
 80026fa:	400a      	ands	r2, r1
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	21ff      	movs	r1, #255	; 0xff
 8002700:	4091      	lsls	r1, r2
 8002702:	000a      	movs	r2, r1
 8002704:	43d2      	mvns	r2, r2
 8002706:	401a      	ands	r2, r3
 8002708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	401a      	ands	r2, r3
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	0018      	movs	r0, r3
 8002718:	2303      	movs	r3, #3
 800271a:	4003      	ands	r3, r0
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <__NVIC_SetPriority+0xd8>)
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	001c      	movs	r4, r3
 8002728:	230f      	movs	r3, #15
 800272a:	4023      	ands	r3, r4
 800272c:	3b08      	subs	r3, #8
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	430a      	orrs	r2, r1
 8002732:	3306      	adds	r3, #6
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	18c3      	adds	r3, r0, r3
 8002738:	3304      	adds	r3, #4
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b003      	add	sp, #12
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	e000e100 	.word	0xe000e100
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <SysTick_Config+0x40>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e010      	b.n	8002784 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <SysTick_Config+0x44>)
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	3a01      	subs	r2, #1
 8002768:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	2301      	movs	r3, #1
 800276c:	425b      	negs	r3, r3
 800276e:	2103      	movs	r1, #3
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ff7d 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <SysTick_Config+0x44>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x44>)
 800277e:	2207      	movs	r2, #7
 8002780:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	00ffffff 	.word	0x00ffffff
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	210f      	movs	r1, #15
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	1c02      	adds	r2, r0, #0
 80027a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	0011      	movs	r1, r2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff ffbf 	bl	800274c <SysTick_Config>
 80027ce:	0003      	movs	r3, r0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	e147      	b.n	8002a78 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4091      	lsls	r1, r2
 80027f2:	000a      	movs	r2, r1
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d100      	bne.n	8002800 <HAL_GPIO_Init+0x28>
 80027fe:	e138      	b.n	8002a72 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x38>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b12      	cmp	r3, #18
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	58d3      	ldr	r3, [r2, r3]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2207      	movs	r2, #7
 8002822:	4013      	ands	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	409a      	lsls	r2, r3
 800282a:	0013      	movs	r3, r2
 800282c:	43da      	mvns	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2107      	movs	r1, #7
 800283c:	400b      	ands	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	409a      	lsls	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	0092      	lsls	r2, r2, #2
 8002854:	6939      	ldr	r1, [r7, #16]
 8002856:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	409a      	lsls	r2, r3
 8002866:	0013      	movs	r3, r2
 8002868:	43da      	mvns	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d00b      	beq.n	80028ac <HAL_GPIO_Init+0xd4>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a0:	2b11      	cmp	r3, #17
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d130      	bne.n	800290e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	0013      	movs	r3, r2
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028e2:	2201      	movs	r2, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
 80028e8:	0013      	movs	r3, r2
 80028ea:	43da      	mvns	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	2201      	movs	r2, #1
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
 8002900:	0013      	movs	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	409a      	lsls	r2, r3
 800291c:	0013      	movs	r3, r2
 800291e:	43da      	mvns	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	0013      	movs	r3, r2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	055b      	lsls	r3, r3, #21
 8002946:	4013      	ands	r3, r2
 8002948:	d100      	bne.n	800294c <HAL_GPIO_Init+0x174>
 800294a:	e092      	b.n	8002a72 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800294c:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3318      	adds	r3, #24
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	589b      	ldr	r3, [r3, r2]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2203      	movs	r2, #3
 800295e:	4013      	ands	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	220f      	movs	r2, #15
 8002964:	409a      	lsls	r2, r3
 8002966:	0013      	movs	r3, r2
 8002968:	43da      	mvns	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	23a0      	movs	r3, #160	; 0xa0
 8002974:	05db      	lsls	r3, r3, #23
 8002976:	429a      	cmp	r2, r3
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x1ca>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a45      	ldr	r2, [pc, #276]	; (8002a94 <HAL_GPIO_Init+0x2bc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x1c6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a44      	ldr	r2, [pc, #272]	; (8002a98 <HAL_GPIO_Init+0x2c0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x1c2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <HAL_GPIO_Init+0x2c4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x1be>
 8002992:	2303      	movs	r3, #3
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x1cc>
 8002996:	2305      	movs	r3, #5
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x1cc>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x1cc>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x1cc>
 80029a2:	2300      	movs	r3, #0
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	2103      	movs	r1, #3
 80029a8:	400a      	ands	r2, r1
 80029aa:	00d2      	lsls	r2, r2, #3
 80029ac:	4093      	lsls	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80029b4:	4936      	ldr	r1, [pc, #216]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3318      	adds	r3, #24
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029c2:	4a33      	ldr	r2, [pc, #204]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	58d3      	ldr	r3, [r2, r3]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	4013      	ands	r3, r2
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029e8:	4929      	ldr	r1, [pc, #164]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 80029f2:	2384      	movs	r3, #132	; 0x84
 80029f4:	58d3      	ldr	r3, [r2, r3]
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	029b      	lsls	r3, r3, #10
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a16:	491e      	ldr	r1, [pc, #120]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002a18:	2284      	movs	r2, #132	; 0x84
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	035b      	lsls	r3, r3, #13
 8002a36:	4013      	ands	r3, r2
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	039b      	lsls	r3, r3, #14
 8002a60:	4013      	ands	r3, r2
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	40da      	lsrs	r2, r3
 8002a80:	1e13      	subs	r3, r2, #0
 8002a82:	d000      	beq.n	8002a86 <HAL_GPIO_Init+0x2ae>
 8002a84:	e6b0      	b.n	80027e8 <HAL_GPIO_Init+0x10>
  }
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b006      	add	sp, #24
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40021800 	.word	0x40021800
 8002a94:	50000400 	.word	0x50000400
 8002a98:	50000800 	.word	0x50000800
 8002a9c:	50000c00 	.word	0x50000c00

08002aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	0008      	movs	r0, r1
 8002aaa:	0011      	movs	r1, r2
 8002aac:	1cbb      	adds	r3, r7, #2
 8002aae:	1c02      	adds	r2, r0, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	1c7b      	adds	r3, r7, #1
 8002ab4:	1c0a      	adds	r2, r1, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ab8:	1c7b      	adds	r3, r7, #1
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac0:	1cbb      	adds	r3, r7, #2
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aca:	1cbb      	adds	r3, r7, #2
 8002acc:	881a      	ldrh	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d11f      	bne.n	8002b40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	0013      	movs	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4912      	ldr	r1, [pc, #72]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7fd faf6 	bl	8000100 <__udivsi3>
 8002b14:	0003      	movs	r3, r0
 8002b16:	3301      	adds	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b1a:	e008      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e001      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e009      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	401a      	ands	r2, r3
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d0ed      	beq.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b004      	add	sp, #16
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	fffff9ff 	.word	0xfffff9ff
 8002b54:	20000004 	.word	0x20000004
 8002b58:	000f4240 	.word	0x000f4240

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e2f9      	b.n	8003162 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2201      	movs	r2, #1
 8002b74:	4013      	ands	r3, r2
 8002b76:	d100      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1e>
 8002b78:	e07c      	b.n	8002c74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	4bc3      	ldr	r3, [pc, #780]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2238      	movs	r2, #56	; 0x38
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b84:	4bc0      	ldr	r3, [pc, #768]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3e>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4bb9      	ldr	r3, [pc, #740]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d062      	beq.n	8002c72 <HAL_RCC_OscConfig+0x116>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d15e      	bne.n	8002c72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e2d4      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x78>
 8002bc4:	4bb0      	ldr	r3, [pc, #704]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4baf      	ldr	r3, [pc, #700]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0249      	lsls	r1, r1, #9
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e020      	b.n	8002c16 <HAL_RCC_OscConfig+0xba>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	23a0      	movs	r3, #160	; 0xa0
 8002bda:	02db      	lsls	r3, r3, #11
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCC_OscConfig+0xa2>
 8002be0:	4ba9      	ldr	r3, [pc, #676]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4ba8      	ldr	r3, [pc, #672]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	02c9      	lsls	r1, r1, #11
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	4ba6      	ldr	r3, [pc, #664]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4ba5      	ldr	r3, [pc, #660]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0249      	lsls	r1, r1, #9
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e00b      	b.n	8002c16 <HAL_RCC_OscConfig+0xba>
 8002bfe:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4ba1      	ldr	r3, [pc, #644]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c04:	49a1      	ldr	r1, [pc, #644]	; (8002e8c <HAL_RCC_OscConfig+0x330>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b9f      	ldr	r3, [pc, #636]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b9e      	ldr	r3, [pc, #632]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	499f      	ldr	r1, [pc, #636]	; (8002e90 <HAL_RCC_OscConfig+0x334>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d014      	beq.n	8002c48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe f9ed 	bl	8000ffc <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe f9e8 	bl	8000ffc <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e293      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3a:	4b93      	ldr	r3, [pc, #588]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	4013      	ands	r3, r2
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xcc>
 8002c46:	e015      	b.n	8002c74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f9d8 	bl	8000ffc <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c52:	f7fe f9d3 	bl	8000ffc <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e27e      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c64:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	029b      	lsls	r3, r3, #10
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0xf6>
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d100      	bne.n	8002c80 <HAL_RCC_OscConfig+0x124>
 8002c7e:	e099      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	4013      	ands	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x144>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d002      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x14a>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d135      	bne.n	8002d12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca6:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x162>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e251      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a74      	ldr	r2, [pc, #464]	; (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	4b6e      	ldr	r3, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cda:	4b6b      	ldr	r3, [pc, #428]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x33c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cee:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	0adb      	lsrs	r3, r3, #11
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	4a68      	ldr	r2, [pc, #416]	; (8002e9c <HAL_RCC_OscConfig+0x340>)
 8002cfa:	40da      	lsrs	r2, r3
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x344>)
 8002cfe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d00:	4b68      	ldr	r3, [pc, #416]	; (8002ea4 <HAL_RCC_OscConfig+0x348>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7fe f91f 	bl	8000f48 <HAL_InitTick>
 8002d0a:	1e03      	subs	r3, r0, #0
 8002d0c:	d051      	beq.n	8002db2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e227      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d030      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	; (8002e98 <HAL_RCC_OscConfig+0x33c>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	4b57      	ldr	r3, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0049      	lsls	r1, r1, #1
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f95e 	bl	8000ffc <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe f959 	bl	8000ffc <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e204      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4013      	ands	r3, r2
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d7c:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002d82:	4949      	ldr	r1, [pc, #292]	; (8002ea8 <HAL_RCC_OscConfig+0x34c>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f938 	bl	8000ffc <HAL_GetTick>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe f933 	bl	8000ffc <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1de      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4013      	ands	r3, r2
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x236>
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2208      	movs	r2, #8
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d047      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dbe:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2238      	movs	r2, #56	; 0x38
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b18      	cmp	r3, #24
 8002dc8:	d10a      	bne.n	8002de0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d03c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d138      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e1c0      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d019      	beq.n	8002e1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe f902 	bl	8000ffc <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe f8fd 	bl	8000ffc <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1a8      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e14:	2202      	movs	r2, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	d0f1      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2a2>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	438a      	bics	r2, r1
 8002e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f8e8 	bl	8000ffc <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e32:	f7fe f8e3 	bl	8000ffc <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e18e      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d1f1      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2204      	movs	r2, #4
 8002e54:	4013      	ands	r3, r2
 8002e56:	d100      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2fe>
 8002e58:	e0c6      	b.n	8002fe8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5a:	231f      	movs	r3, #31
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2238      	movs	r2, #56	; 0x38
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d11e      	bne.n	8002eac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_OscConfig+0x32c>)
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d100      	bne.n	8002e7a <HAL_RCC_OscConfig+0x31e>
 8002e78:	e0b6      	b.n	8002fe8 <HAL_RCC_OscConfig+0x48c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d000      	beq.n	8002e84 <HAL_RCC_OscConfig+0x328>
 8002e82:	e0b1      	b.n	8002fe8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e16c      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	fffeffff 	.word	0xfffeffff
 8002e90:	fffbffff 	.word	0xfffbffff
 8002e94:	ffff80ff 	.word	0xffff80ff
 8002e98:	ffffc7ff 	.word	0xffffc7ff
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	20000008 	.word	0x20000008
 8002ea8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eac:	4baf      	ldr	r3, [pc, #700]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	055b      	lsls	r3, r3, #21
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x360>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x362>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d011      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4baa      	ldr	r3, [pc, #680]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec6:	4ba9      	ldr	r3, [pc, #676]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0549      	lsls	r1, r1, #21
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ed0:	4ba6      	ldr	r3, [pc, #664]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	055b      	lsls	r3, r3, #21
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002ede:	231f      	movs	r3, #31
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee6:	4ba2      	ldr	r3, [pc, #648]	; (8003170 <HAL_RCC_OscConfig+0x614>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d11a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef2:	4b9f      	ldr	r3, [pc, #636]	; (8003170 <HAL_RCC_OscConfig+0x614>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b9e      	ldr	r3, [pc, #632]	; (8003170 <HAL_RCC_OscConfig+0x614>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0049      	lsls	r1, r1, #1
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002f00:	f7fe f87c 	bl	8000ffc <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fe f877 	bl	8000ffc <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e122      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1c:	4b94      	ldr	r3, [pc, #592]	; (8003170 <HAL_RCC_OscConfig+0x614>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3e2>
 8002f30:	4b8e      	ldr	r3, [pc, #568]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f34:	4b8d      	ldr	r3, [pc, #564]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f36:	2101      	movs	r1, #1
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x41c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x404>
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f52:	4b86      	ldr	r3, [pc, #536]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f58:	2101      	movs	r1, #1
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0x41c>
 8002f60:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f64:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	438a      	bics	r2, r1
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f6c:	4b7f      	ldr	r3, [pc, #508]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002f72:	2104      	movs	r1, #4
 8002f74:	438a      	bics	r2, r1
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d014      	beq.n	8002faa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe f83c 	bl	8000ffc <HAL_GetTick>
 8002f84:	0003      	movs	r3, r0
 8002f86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f88:	e009      	b.n	8002f9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe f837 	bl	8000ffc <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	4a77      	ldr	r2, [pc, #476]	; (8003174 <HAL_RCC_OscConfig+0x618>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0e1      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x42e>
 8002fa8:	e013      	b.n	8002fd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe f827 	bl	8000ffc <HAL_GetTick>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb2:	e009      	b.n	8002fc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f822 	bl	8000ffc <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	4a6d      	ldr	r2, [pc, #436]	; (8003174 <HAL_RCC_OscConfig+0x618>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0cc      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2202      	movs	r2, #2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002fd2:	231f      	movs	r3, #31
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe0:	4b62      	ldr	r3, [pc, #392]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002fe2:	4965      	ldr	r1, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x61c>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d100      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x496>
 8002ff0:	e0b6      	b.n	8003160 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff2:	4b5e      	ldr	r3, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2238      	movs	r2, #56	; 0x38
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d100      	bne.n	8003000 <HAL_RCC_OscConfig+0x4a4>
 8002ffe:	e07e      	b.n	80030fe <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d153      	bne.n	80030b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800300e:	495b      	ldr	r1, [pc, #364]	; (800317c <HAL_RCC_OscConfig+0x620>)
 8003010:	400a      	ands	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fd fff2 	bl	8000ffc <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fd ffed 	bl	8000ffc <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e098      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003030:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	049b      	lsls	r3, r3, #18
 8003038:	4013      	ands	r3, r2
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_RCC_OscConfig+0x624>)
 8003042:	4013      	ands	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1a      	ldr	r2, [r3, #32]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	431a      	orrs	r2, r3
 8003064:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8003066:	430a      	orrs	r2, r1
 8003068:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306a:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x610>)
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	0449      	lsls	r1, r1, #17
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	0549      	lsls	r1, r1, #21
 8003082:	430a      	orrs	r2, r1
 8003084:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd ffb9 	bl	8000ffc <HAL_GetTick>
 800308a:	0003      	movs	r3, r0
 800308c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fd ffb4 	bl	8000ffc <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e05f      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	049b      	lsls	r3, r3, #18
 80030aa:	4013      	ands	r3, r2
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x534>
 80030ae:	e057      	b.n	8003160 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030b6:	4931      	ldr	r1, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x620>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030c2:	2103      	movs	r1, #3
 80030c4:	438a      	bics	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030ce:	492d      	ldr	r1, [pc, #180]	; (8003184 <HAL_RCC_OscConfig+0x628>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fd ff92 	bl	8000ffc <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fd ff8d 	bl	8000ffc <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e038      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_RCC_OscConfig+0x610>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	049b      	lsls	r3, r3, #18
 80030f8:	4013      	ands	r3, r2
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x582>
 80030fc:	e030      	b.n	8003160 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e02b      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCC_OscConfig+0x610>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2203      	movs	r2, #3
 8003114:	401a      	ands	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	429a      	cmp	r2, r3
 800311c:	d11e      	bne.n	800315c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2270      	movs	r2, #112	; 0x70
 8003122:	401a      	ands	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d117      	bne.n	800315c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	23fe      	movs	r3, #254	; 0xfe
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	401a      	ands	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d10e      	bne.n	800315c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	23f8      	movs	r3, #248	; 0xf8
 8003142:	039b      	lsls	r3, r3, #14
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0f5b      	lsrs	r3, r3, #29
 8003152:	075a      	lsls	r2, r3, #29
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b008      	add	sp, #32
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
 8003174:	00001388 	.word	0x00001388
 8003178:	efffffff 	.word	0xefffffff
 800317c:	feffffff 	.word	0xfeffffff
 8003180:	1fc1808c 	.word	0x1fc1808c
 8003184:	effeffff 	.word	0xeffeffff

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0e9      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b76      	ldr	r3, [pc, #472]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2207      	movs	r2, #7
 80031a2:	4013      	ands	r3, r2
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d91e      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b73      	ldr	r3, [pc, #460]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2207      	movs	r2, #7
 80031b0:	4393      	bics	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	4b70      	ldr	r3, [pc, #448]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031bc:	f7fd ff1e 	bl	8000ffc <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c4:	e009      	b.n	80031da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	f7fd ff19 	bl	8000ffc <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_RCC_ClockConfig+0x1f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e0ca      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031da:	4b67      	ldr	r3, [pc, #412]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2207      	movs	r2, #7
 80031e0:	4013      	ands	r3, r2
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2202      	movs	r2, #2
 80031ee:	4013      	ands	r3, r2
 80031f0:	d015      	beq.n	800321e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2204      	movs	r2, #4
 80031f8:	4013      	ands	r3, r2
 80031fa:	d006      	beq.n	800320a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031fc:	4b60      	ldr	r3, [pc, #384]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 8003202:	21e0      	movs	r1, #224	; 0xe0
 8003204:	01c9      	lsls	r1, r1, #7
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320a:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4a5d      	ldr	r2, [pc, #372]	; (8003384 <HAL_RCC_ClockConfig+0x1fc>)
 8003210:	4013      	ands	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	d057      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	029b      	lsls	r3, r3, #10
 8003238:	4013      	ands	r3, r2
 800323a:	d12b      	bne.n	8003294 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e097      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003248:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	049b      	lsls	r3, r3, #18
 8003250:	4013      	ands	r3, r2
 8003252:	d11f      	bne.n	8003294 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e08b      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003260:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4013      	ands	r3, r2
 800326a:	d113      	bne.n	8003294 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e07f      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d106      	bne.n	8003286 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003278:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	2202      	movs	r2, #2
 800327e:	4013      	ands	r3, r2
 8003280:	d108      	bne.n	8003294 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e074      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2202      	movs	r2, #2
 800328c:	4013      	ands	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e06d      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2207      	movs	r2, #7
 800329a:	4393      	bics	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fd fea8 	bl	8000ffc <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b0:	e009      	b.n	80032c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b2:	f7fd fea3 	bl	8000ffc <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_RCC_ClockConfig+0x1f4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e054      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2238      	movs	r2, #56	; 0x38
 80032cc:	401a      	ands	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1ec      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2207      	movs	r2, #7
 80032de:	4013      	ands	r3, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d21e      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2207      	movs	r2, #7
 80032ec:	4393      	bics	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032f8:	f7fd fe80 	bl	8000ffc <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003300:	e009      	b.n	8003316 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fd fe7b 	bl	8000ffc <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_RCC_ClockConfig+0x1f4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e02c      	b.n	8003370 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2207      	movs	r2, #7
 800331c:	4013      	ands	r3, r2
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2204      	movs	r2, #4
 800332a:	4013      	ands	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <HAL_RCC_ClockConfig+0x200>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003342:	f000 f829 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003346:	0001      	movs	r1, r0
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCC_ClockConfig+0x1f8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	220f      	movs	r2, #15
 8003350:	401a      	ands	r2, r3
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x204>)
 8003354:	0092      	lsls	r2, r2, #2
 8003356:	58d3      	ldr	r3, [r2, r3]
 8003358:	221f      	movs	r2, #31
 800335a:	4013      	ands	r3, r2
 800335c:	000a      	movs	r2, r1
 800335e:	40da      	lsrs	r2, r3
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x208>)
 8003362:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_ClockConfig+0x20c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0018      	movs	r0, r3
 800336a:	f7fd fded 	bl	8000f48 <HAL_InitTick>
 800336e:	0003      	movs	r3, r0
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b004      	add	sp, #16
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40022000 	.word	0x40022000
 800337c:	00001388 	.word	0x00001388
 8003380:	40021000 	.word	0x40021000
 8003384:	fffff0ff 	.word	0xfffff0ff
 8003388:	ffff8fff 	.word	0xffff8fff
 800338c:	08003758 	.word	0x08003758
 8003390:	20000004 	.word	0x20000004
 8003394:	20000008 	.word	0x20000008

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800339e:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2238      	movs	r2, #56	; 0x38
 80033a4:	4013      	ands	r3, r2
 80033a6:	d10f      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033a8:	4b39      	ldr	r3, [pc, #228]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0adb      	lsrs	r3, r3, #11
 80033ae:	2207      	movs	r2, #7
 80033b0:	4013      	ands	r3, r2
 80033b2:	2201      	movs	r2, #1
 80033b4:	409a      	lsls	r2, r3
 80033b6:	0013      	movs	r3, r2
 80033b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033ba:	6839      	ldr	r1, [r7, #0]
 80033bc:	4835      	ldr	r0, [pc, #212]	; (8003494 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033be:	f7fc fe9f 	bl	8000100 <__udivsi3>
 80033c2:	0003      	movs	r3, r0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	e05d      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033c8:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2238      	movs	r2, #56	; 0x38
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d102      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033d4:	4b30      	ldr	r3, [pc, #192]	; (8003498 <HAL_RCC_GetSysClockFreq+0x100>)
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e054      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033da:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2238      	movs	r2, #56	; 0x38
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d138      	bne.n	8003458 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033e6:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2203      	movs	r2, #3
 80033ec:	4013      	ands	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	2207      	movs	r2, #7
 80033f8:	4013      	ands	r3, r2
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d10d      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4824      	ldr	r0, [pc, #144]	; (8003498 <HAL_RCC_GetSysClockFreq+0x100>)
 8003408:	f7fc fe7a 	bl	8000100 <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	0019      	movs	r1, r3
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	227f      	movs	r2, #127	; 0x7f
 8003418:	4013      	ands	r3, r2
 800341a:	434b      	muls	r3, r1
 800341c:	617b      	str	r3, [r7, #20]
        break;
 800341e:	e00d      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	481c      	ldr	r0, [pc, #112]	; (8003494 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003424:	f7fc fe6c 	bl	8000100 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	0019      	movs	r1, r3
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	227f      	movs	r2, #127	; 0x7f
 8003434:	4013      	ands	r3, r2
 8003436:	434b      	muls	r3, r1
 8003438:	617b      	str	r3, [r7, #20]
        break;
 800343a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	0f5b      	lsrs	r3, r3, #29
 8003442:	2207      	movs	r2, #7
 8003444:	4013      	ands	r3, r2
 8003446:	3301      	adds	r3, #1
 8003448:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	6978      	ldr	r0, [r7, #20]
 800344e:	f7fc fe57 	bl	8000100 <__udivsi3>
 8003452:	0003      	movs	r3, r0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	e015      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2238      	movs	r2, #56	; 0x38
 800345e:	4013      	ands	r3, r2
 8003460:	2b20      	cmp	r3, #32
 8003462:	d103      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_RCC_GetSysClockFreq+0xf8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2238      	movs	r2, #56	; 0x38
 8003472:	4013      	ands	r3, r2
 8003474:	2b18      	cmp	r3, #24
 8003476:	d103      	bne.n	8003480 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003478:	23fa      	movs	r3, #250	; 0xfa
 800347a:	01db      	lsls	r3, r3, #7
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	e001      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003484:	693b      	ldr	r3, [r7, #16]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b006      	add	sp, #24
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	40021000 	.word	0x40021000
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80034a4:	2313      	movs	r3, #19
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ac:	2312      	movs	r3, #18
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	4013      	ands	r3, r2
 80034be:	d100      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80034c0:	e0a4      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2311      	movs	r3, #17
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	055b      	lsls	r3, r3, #21
 80034d2:	4013      	ands	r3, r2
 80034d4:	d111      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034da:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	0549      	lsls	r1, r1, #21
 80034e0:	430a      	orrs	r2, r1
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80034e4:	4b78      	ldr	r3, [pc, #480]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	055b      	lsls	r3, r3, #21
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2311      	movs	r3, #17
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b73      	ldr	r3, [pc, #460]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0049      	lsls	r1, r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003508:	f7fd fd78 	bl	8000ffc <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003510:	e00b      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fd fd73 	bl	8000ffc <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d904      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003520:	2313      	movs	r3, #19
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2203      	movs	r2, #3
 8003526:	701a      	strb	r2, [r3, #0]
        break;
 8003528:	e005      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800352a:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d0ed      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003536:	2313      	movs	r3, #19
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d154      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003544:	23c0      	movs	r3, #192	; 0xc0
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4013      	ands	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d019      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	d014      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800355c:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	4a5b      	ldr	r2, [pc, #364]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003562:	4013      	ands	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003566:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800356a:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0249      	lsls	r1, r1, #9
 8003570:	430a      	orrs	r2, r1
 8003572:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003574:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800357a:	4956      	ldr	r1, [pc, #344]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800357c:	400a      	ands	r2, r1
 800357e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003580:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d016      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd fd35 	bl	8000ffc <HAL_GetTick>
 8003592:	0003      	movs	r3, r0
 8003594:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fd fd30 	bl	8000ffc <HAL_GetTick>
 800359c:	0002      	movs	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	4a4d      	ldr	r2, [pc, #308]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d904      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80035a8:	2313      	movs	r3, #19
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2203      	movs	r2, #3
 80035ae:	701a      	strb	r2, [r3, #0]
            break;
 80035b0:	e004      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b2:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d0ed      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80035bc:	2313      	movs	r3, #19
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	4a41      	ldr	r2, [pc, #260]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035d6:	430a      	orrs	r2, r1
 80035d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80035da:	e00c      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035dc:	2312      	movs	r3, #18
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2213      	movs	r2, #19
 80035e2:	18ba      	adds	r2, r7, r2
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e005      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	2312      	movs	r3, #18
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2213      	movs	r2, #19
 80035f0:	18ba      	adds	r2, r7, r2
 80035f2:	7812      	ldrb	r2, [r2, #0]
 80035f4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035f6:	2311      	movs	r3, #17
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003606:	4935      	ldr	r1, [pc, #212]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003608:	400a      	ands	r2, r1
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	4013      	ands	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003616:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	2203      	movs	r2, #3
 800361c:	4393      	bics	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003626:	430a      	orrs	r2, r1
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	4013      	ands	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800363a:	4013      	ands	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003644:	430a      	orrs	r2, r1
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	01db      	lsls	r3, r3, #7
 8003650:	4013      	ands	r3, r2
 8003652:	d015      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	0899      	lsrs	r1, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003662:	430a      	orrs	r2, r1
 8003664:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	05db      	lsls	r3, r3, #23
 800366e:	429a      	cmp	r2, r3
 8003670:	d106      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003678:	2180      	movs	r1, #128	; 0x80
 800367a:	0249      	lsls	r1, r1, #9
 800367c:	430a      	orrs	r2, r1
 800367e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d016      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003692:	4013      	ands	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800369c:	430a      	orrs	r2, r1
 800369e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	01db      	lsls	r3, r3, #7
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d106      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	0249      	lsls	r1, r1, #9
 80036b6:	430a      	orrs	r2, r1
 80036b8:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80036ba:	2312      	movs	r3, #18
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	781b      	ldrb	r3, [r3, #0]
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b006      	add	sp, #24
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40007000 	.word	0x40007000
 80036d0:	fffffcff 	.word	0xfffffcff
 80036d4:	fffeffff 	.word	0xfffeffff
 80036d8:	00001388 	.word	0x00001388
 80036dc:	efffffff 	.word	0xefffffff
 80036e0:	ffffcfff 	.word	0xffffcfff
 80036e4:	ffff3fff 	.word	0xffff3fff

080036e8 <__libc_init_array>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	2600      	movs	r6, #0
 80036ec:	4d0c      	ldr	r5, [pc, #48]	; (8003720 <__libc_init_array+0x38>)
 80036ee:	4c0d      	ldr	r4, [pc, #52]	; (8003724 <__libc_init_array+0x3c>)
 80036f0:	1b64      	subs	r4, r4, r5
 80036f2:	10a4      	asrs	r4, r4, #2
 80036f4:	42a6      	cmp	r6, r4
 80036f6:	d109      	bne.n	800370c <__libc_init_array+0x24>
 80036f8:	2600      	movs	r6, #0
 80036fa:	f000 f821 	bl	8003740 <_init>
 80036fe:	4d0a      	ldr	r5, [pc, #40]	; (8003728 <__libc_init_array+0x40>)
 8003700:	4c0a      	ldr	r4, [pc, #40]	; (800372c <__libc_init_array+0x44>)
 8003702:	1b64      	subs	r4, r4, r5
 8003704:	10a4      	asrs	r4, r4, #2
 8003706:	42a6      	cmp	r6, r4
 8003708:	d105      	bne.n	8003716 <__libc_init_array+0x2e>
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	00b3      	lsls	r3, r6, #2
 800370e:	58eb      	ldr	r3, [r5, r3]
 8003710:	4798      	blx	r3
 8003712:	3601      	adds	r6, #1
 8003714:	e7ee      	b.n	80036f4 <__libc_init_array+0xc>
 8003716:	00b3      	lsls	r3, r6, #2
 8003718:	58eb      	ldr	r3, [r5, r3]
 800371a:	4798      	blx	r3
 800371c:	3601      	adds	r6, #1
 800371e:	e7f2      	b.n	8003706 <__libc_init_array+0x1e>
 8003720:	08003798 	.word	0x08003798
 8003724:	08003798 	.word	0x08003798
 8003728:	08003798 	.word	0x08003798
 800372c:	0800379c 	.word	0x0800379c

08003730 <memset>:
 8003730:	0003      	movs	r3, r0
 8003732:	1812      	adds	r2, r2, r0
 8003734:	4293      	cmp	r3, r2
 8003736:	d100      	bne.n	800373a <memset+0xa>
 8003738:	4770      	bx	lr
 800373a:	7019      	strb	r1, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	e7f9      	b.n	8003734 <memset+0x4>

08003740 <_init>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr

0800374c <_fini>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr
