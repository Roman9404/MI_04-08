
MI_06_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aac  08002aac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002aac  08002aac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aac  08002aac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08002ac4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002ac4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061d5  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000141b  00000000  00000000  0002620d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  00027cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001363d  00000000  00000000  00028280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006281  00000000  00000000  0003b8bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ab37  00000000  00000000  00041b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015dc  00000000  00000000  000bc6f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002a54 	.word	0x08002a54

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08002a54 	.word	0x08002a54

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb22 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f8f4 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9d4 	bl	80005d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f950 	bl	80004cc <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
/*12*/
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800022c:	4b75      	ldr	r3, [pc, #468]	; (8000404 <main+0x1ec>)
 800022e:	2200      	movs	r2, #0
 8000230:	2120      	movs	r1, #32
 8000232:	0018      	movs	r0, r3
 8000234:	f001 fdbe 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000238:	4b72      	ldr	r3, [pc, #456]	; (8000404 <main+0x1ec>)
 800023a:	2201      	movs	r2, #1
 800023c:	2102      	movs	r1, #2
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fdb8 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000244:	4b6f      	ldr	r3, [pc, #444]	; (8000404 <main+0x1ec>)
 8000246:	2201      	movs	r2, #1
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fdb2 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	0159      	lsls	r1, r3, #5
 8000254:	23a0      	movs	r3, #160	; 0xa0
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2201      	movs	r2, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fdaa 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	0199      	lsls	r1, r3, #6
 8000264:	23a0      	movs	r3, #160	; 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2200      	movs	r2, #0
 800026a:	0018      	movs	r0, r3
 800026c:	f001 fda2 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_Delay(i);
 8000270:	4b65      	ldr	r3, [pc, #404]	; (8000408 <main+0x1f0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fb79 	bl	800096c <HAL_Delay>

	  /*23*/
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800027a:	4b62      	ldr	r3, [pc, #392]	; (8000404 <main+0x1ec>)
 800027c:	2200      	movs	r2, #0
 800027e:	2120      	movs	r1, #32
 8000280:	0018      	movs	r0, r3
 8000282:	f001 fd97 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000286:	4b5f      	ldr	r3, [pc, #380]	; (8000404 <main+0x1ec>)
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fd91 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000292:	4b5c      	ldr	r3, [pc, #368]	; (8000404 <main+0x1ec>)
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0018      	movs	r0, r3
 800029a:	f001 fd8b 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800029e:	2380      	movs	r3, #128	; 0x80
 80002a0:	0159      	lsls	r1, r3, #5
 80002a2:	23a0      	movs	r3, #160	; 0xa0
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2201      	movs	r2, #1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 fd83 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	0199      	lsls	r1, r3, #6
 80002b2:	23a0      	movs	r3, #160	; 0xa0
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2201      	movs	r2, #1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 fd7b 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_Delay(i);
 80002be:	4b52      	ldr	r3, [pc, #328]	; (8000408 <main+0x1f0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fb52 	bl	800096c <HAL_Delay>

	  /*34*/
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002c8:	4b4e      	ldr	r3, [pc, #312]	; (8000404 <main+0x1ec>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	2120      	movs	r1, #32
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 fd70 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002d4:	4b4b      	ldr	r3, [pc, #300]	; (8000404 <main+0x1ec>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	2102      	movs	r1, #2
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 fd6a 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80002e0:	4b48      	ldr	r3, [pc, #288]	; (8000404 <main+0x1ec>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 fd64 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	0159      	lsls	r1, r3, #5
 80002f0:	23a0      	movs	r3, #160	; 0xa0
 80002f2:	05db      	lsls	r3, r3, #23
 80002f4:	2200      	movs	r2, #0
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fd5c 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	0199      	lsls	r1, r3, #6
 8000300:	23a0      	movs	r3, #160	; 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2201      	movs	r2, #1
 8000306:	0018      	movs	r0, r3
 8000308:	f001 fd54 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_Delay(i);
 800030c:	4b3e      	ldr	r3, [pc, #248]	; (8000408 <main+0x1f0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fb2b 	bl	800096c <HAL_Delay>

	  /*45*/
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000316:	4b3b      	ldr	r3, [pc, #236]	; (8000404 <main+0x1ec>)
 8000318:	2201      	movs	r2, #1
 800031a:	2120      	movs	r1, #32
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fd49 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000322:	4b38      	ldr	r3, [pc, #224]	; (8000404 <main+0x1ec>)
 8000324:	2200      	movs	r2, #0
 8000326:	2102      	movs	r1, #2
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fd43 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800032e:	4b35      	ldr	r3, [pc, #212]	; (8000404 <main+0x1ec>)
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fd3d 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800033a:	2380      	movs	r3, #128	; 0x80
 800033c:	0159      	lsls	r1, r3, #5
 800033e:	23a0      	movs	r3, #160	; 0xa0
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	2201      	movs	r2, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f001 fd35 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 800034a:	2380      	movs	r3, #128	; 0x80
 800034c:	0199      	lsls	r1, r3, #6
 800034e:	23a0      	movs	r3, #160	; 0xa0
 8000350:	05db      	lsls	r3, r3, #23
 8000352:	2201      	movs	r2, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fd2d 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_Delay(i);
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <main+0x1f0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fb04 	bl	800096c <HAL_Delay>

	  /*56*/
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000364:	4b27      	ldr	r3, [pc, #156]	; (8000404 <main+0x1ec>)
 8000366:	2201      	movs	r2, #1
 8000368:	2120      	movs	r1, #32
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fd22 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <main+0x1ec>)
 8000372:	2200      	movs	r2, #0
 8000374:	2102      	movs	r1, #2
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fd1c 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <main+0x1ec>)
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fd16 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	0159      	lsls	r1, r3, #5
 800038c:	23a0      	movs	r3, #160	; 0xa0
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	2201      	movs	r2, #1
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fd0e 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	0199      	lsls	r1, r3, #6
 800039c:	23a0      	movs	r3, #160	; 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	2200      	movs	r2, #0
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fd06 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_Delay(i);
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <main+0x1f0>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fadd 	bl	800096c <HAL_Delay>

	  /*61*/
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <main+0x1ec>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	2120      	movs	r1, #32
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fcfb 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <main+0x1ec>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	2102      	movs	r1, #2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fcf5 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <main+0x1ec>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fcef 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80003d6:	2380      	movs	r3, #128	; 0x80
 80003d8:	0159      	lsls	r1, r3, #5
 80003da:	23a0      	movs	r3, #160	; 0xa0
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2200      	movs	r2, #0
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fce7 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	0199      	lsls	r1, r3, #6
 80003ea:	23a0      	movs	r3, #160	; 0xa0
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	2200      	movs	r2, #0
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fcdf 	bl	8001db4 <HAL_GPIO_WritePin>
	  HAL_Delay(i);
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <main+0x1f0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fab6 	bl	800096c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000400:	e714      	b.n	800022c <main+0x14>
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	50000400 	.word	0x50000400
 8000408:	20000000 	.word	0x20000000

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b099      	sub	sp, #100	; 0x64
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	242c      	movs	r4, #44	; 0x2c
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	2334      	movs	r3, #52	; 0x34
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f002 fb11 	bl	8002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000422:	231c      	movs	r3, #28
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	0018      	movs	r0, r3
 8000428:	2310      	movs	r3, #16
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 fb09 	bl	8002a44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	0018      	movs	r0, r3
 8000436:	2318      	movs	r3, #24
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f002 fb02 	bl	8002a44 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	0018      	movs	r0, r3
 8000446:	f001 fcd3 	bl	8001df0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2202      	movs	r2, #2
 800044e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	0052      	lsls	r2, r2, #1
 8000456:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2240      	movs	r2, #64	; 0x40
 8000462:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	193b      	adds	r3, r7, r4
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fcff 	bl	8001e70 <HAL_RCC_OscConfig>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000476:	f000 f937 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	211c      	movs	r1, #28
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2207      	movs	r2, #7
 8000480:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2100      	movs	r1, #0
 8000498:	0018      	movs	r0, r3
 800049a:	f001 ffff 	bl	800249c <HAL_RCC_ClockConfig>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004a2:	f000 f921 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	01d2      	lsls	r2, r2, #7
 80004ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 f97a 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80004c0:	f000 f912 	bl	80006e8 <Error_Handler>
  }
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b019      	add	sp, #100	; 0x64
 80004ca:	bd90      	pop	{r4, r7, pc}

080004cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80004d2:	2310      	movs	r3, #16
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	0018      	movs	r0, r3
 80004d8:	2318      	movs	r3, #24
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f002 fab1 	bl	8002a44 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	0018      	movs	r0, r3
 80004e6:	230c      	movs	r3, #12
 80004e8:	001a      	movs	r2, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	f002 faaa 	bl	8002a44 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004f0:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <MX_ADC1_Init+0xfc>)
 80004f2:	4a36      	ldr	r2, [pc, #216]	; (80005cc <MX_ADC1_Init+0x100>)
 80004f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f6:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <MX_ADC1_Init+0xfc>)
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	05d2      	lsls	r2, r2, #23
 80004fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000512:	2204      	movs	r2, #4
 8000514:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000518:	2200      	movs	r2, #0
 800051a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800051e:	2200      	movs	r2, #0
 8000520:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000524:	2200      	movs	r2, #0
 8000526:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000536:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000544:	222c      	movs	r2, #44	; 0x2c
 8000546:	2100      	movs	r1, #0
 8000548:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800054c:	2200      	movs	r2, #0
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000558:	2200      	movs	r2, #0
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800055e:	223c      	movs	r2, #60	; 0x3c
 8000560:	2100      	movs	r1, #0
 8000562:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000566:	2200      	movs	r2, #0
 8000568:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_ADC1_Init+0xfc>)
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fbd7 	bl	8000d20 <HAL_ADC_Init>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000576:	f000 f8b7 	bl	80006e8 <Error_Handler>
  }
  /** Configure Analog WatchDog 2 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800057a:	2110      	movs	r1, #16
 800057c:	187b      	adds	r3, r7, r1
 800057e:	22c0      	movs	r2, #192	; 0xc0
 8000580:	0412      	lsls	r2, r2, #16
 8000582:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000584:	187a      	adds	r2, r7, r1
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_ADC1_Init+0xfc>)
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 ff72 	bl	8001474 <HAL_ADC_AnalogWDGConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000594:	f000 f8a8 	bl	80006e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_ADC1_Init+0xfc>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fd8b 	bl	80010cc <HAL_ADC_ConfigChannel>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80005ba:	f000 f895 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b00a      	add	sp, #40	; 0x28
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	40012400 	.word	0x40012400

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	240c      	movs	r4, #12
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	2314      	movs	r3, #20
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f002 fa2f 	bl	8002a44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <MX_GPIO_Init+0x110>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <MX_GPIO_Init+0x110>)
 80005ec:	2102      	movs	r1, #2
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <MX_GPIO_Init+0x110>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <MX_GPIO_Init+0x110>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <MX_GPIO_Init+0x110>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_GPIO_Init+0x110>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000616:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <MX_GPIO_Init+0x114>)
 8000618:	2200      	movs	r2, #0
 800061a:	21a2      	movs	r1, #162	; 0xa2
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fbc9 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000622:	23c0      	movs	r3, #192	; 0xc0
 8000624:	0199      	lsls	r1, r3, #6
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2200      	movs	r2, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fbc1 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2201      	movs	r2, #1
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2202      	movs	r2, #2
 8000644:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	000c      	movs	r4, r1
 800064e:	187b      	adds	r3, r7, r1
 8000650:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <MX_GPIO_Init+0x114>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f001 fa49 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800065a:	0021      	movs	r1, r4
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2222      	movs	r2, #34	; 0x22
 8000660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2201      	movs	r2, #1
 8000666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2201      	movs	r2, #1
 800066c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	000c      	movs	r4, r1
 8000676:	187b      	adds	r3, r7, r1
 8000678:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <MX_GPIO_Init+0x114>)
 800067a:	0019      	movs	r1, r3
 800067c:	0010      	movs	r0, r2
 800067e:	f001 fa35 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000682:	0021      	movs	r1, r4
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	0152      	lsls	r2, r2, #5
 800068a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2201      	movs	r2, #1
 8000690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	000c      	movs	r4, r1
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	23a0      	movs	r3, #160	; 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fa1f 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2201      	movs	r2, #1
 80006bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	187a      	adds	r2, r7, r1
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fa0a 	bl	8001aec <HAL_GPIO_Init>

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b009      	add	sp, #36	; 0x24
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	50000400 	.word	0x50000400

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	641a      	str	r2, [r3, #64]	; 0x40
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0549      	lsls	r1, r1, #21
 800071c:	430a      	orrs	r2, r1
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_MspInit+0x44>)
 8000722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	055b      	lsls	r3, r3, #21
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	2314      	movs	r3, #20
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	0018      	movs	r0, r3
 800074a:	2314      	movs	r3, #20
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f002 f978 	bl	8002a44 <memset>
  if(hadc->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_ADC_MspInit+0x80>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d12a      	bne.n	80007b4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_ADC_MspInit+0x84>)
 8000760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_ADC_MspInit+0x84>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0349      	lsls	r1, r1, #13
 8000768:	430a      	orrs	r2, r1
 800076a:	641a      	str	r2, [r3, #64]	; 0x40
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_ADC_MspInit+0x84>)
 800076e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	035b      	lsls	r3, r3, #13
 8000774:	4013      	ands	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_ADC_MspInit+0x84>)
 800077c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_ADC_MspInit+0x84>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_ADC_MspInit+0x84>)
 8000788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000792:	2114      	movs	r1, #20
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2203      	movs	r2, #3
 800079e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	187a      	adds	r2, r7, r1
 80007a8:	23a0      	movs	r3, #160	; 0xa0
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f99c 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b00a      	add	sp, #40	; 0x28
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400
 80007c0:	40021000 	.word	0x40021000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8a4 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <SystemInit+0x14>)
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	0512      	lsls	r2, r2, #20
 8000802:	609a      	str	r2, [r3, #8]
#endif
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000812:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000814:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000816:	e003      	b.n	8000820 <LoopCopyDataInit>

08000818 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800081a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800081c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800081e:	3104      	adds	r1, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <LoopForever+0xa>)
  ldr r3, =_edata
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <LoopForever+0xe>)
  adds r2, r0, r1
 8000824:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000826:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000828:	d3f6      	bcc.n	8000818 <CopyDataInit>
  ldr r2, =_sbss
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <LoopForever+0x12>)
  b LoopFillZerobss
 800082c:	e002      	b.n	8000834 <LoopFillZerobss>

0800082e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000830:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000832:	3204      	adds	r2, #4

08000834 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <LoopForever+0x16>)
  cmp r2, r3
 8000836:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000838:	d3f9      	bcc.n	800082e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800083a:	f7ff ffdd 	bl	80007f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800083e:	f002 f8dd 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fce9 	bl	8000218 <main>

08000846 <LoopForever>:

LoopForever:
    b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   r0, =_estack
 8000848:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 800084c:	08002ab4 	.word	0x08002ab4
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000854:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000858:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800085c:	20000094 	.word	0x20000094

08000860 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_IRQHandler>
	...

08000864 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x3c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_Init+0x3c>)
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	0049      	lsls	r1, r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f810 	bl	80008a4 <HAL_InitTick>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d003      	beq.n	8000890 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e001      	b.n	8000894 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff ff30 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ac:	230f      	movs	r3, #15
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_InitTick+0x88>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d02b      	beq.n	8000914 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_InitTick+0x8c>)
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_InitTick+0x88>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	0019      	movs	r1, r3
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	0098      	lsls	r0, r3, #2
 80008ca:	f7ff fc19 	bl	8000100 <__udivsi3>
 80008ce:	0003      	movs	r3, r0
 80008d0:	0019      	movs	r1, r3
 80008d2:	0020      	movs	r0, r4
 80008d4:	f7ff fc14 	bl	8000100 <__udivsi3>
 80008d8:	0003      	movs	r3, r0
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 f8f9 	bl	8001ad2 <HAL_SYSTICK_Config>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d112      	bne.n	800090a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d80a      	bhi.n	8000900 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	2301      	movs	r3, #1
 80008ee:	425b      	negs	r3, r3
 80008f0:	2200      	movs	r2, #0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 f8d8 	bl	8001aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_InitTick+0x90>)
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e00d      	b.n	800091c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000900:	230f      	movs	r3, #15
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e008      	b.n	800091c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800090a:	230f      	movs	r3, #15
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e003      	b.n	800091c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000914:	230f      	movs	r3, #15
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800091c:	230f      	movs	r3, #15
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	781b      	ldrb	r3, [r3, #0]
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b005      	add	sp, #20
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000004 	.word	0x20000004
 8000934:	20000008 	.word	0x20000008

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <HAL_IncTick+0x18>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <HAL_IncTick+0x1c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	18d2      	adds	r2, r2, r3
 8000946:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_IncTick+0x18>)
 8000948:	601a      	str	r2, [r3, #0]
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000090 	.word	0x20000090
 8000954:	2000000c 	.word	0x2000000c

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000090 	.word	0x20000090

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	0003      	movs	r3, r0
 800097a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	d004      	beq.n	8000990 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_Delay+0x40>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	f7ff ffe1 	bl	8000958 <HAL_GetTick>
 8000996:	0002      	movs	r2, r0
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d8f7      	bhi.n	8000992 <HAL_Delay+0x26>
  {
  }
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	2000000c 	.word	0x2000000c

080009b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80009c0:	401a      	ands	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	431a      	orrs	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	fe3fffff 	.word	0xfe3fffff

080009d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	23e0      	movs	r3, #224	; 0xe0
 80009e6:	045b      	lsls	r3, r3, #17
 80009e8:	4013      	ands	r3, r2
}
 80009ea:	0018      	movs	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	2104      	movs	r1, #4
 8000a06:	400a      	ands	r2, r1
 8000a08:	2107      	movs	r1, #7
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	000a      	movs	r2, r1
 8000a0e:	43d2      	mvns	r2, r2
 8000a10:	401a      	ands	r2, r3
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	2104      	movs	r1, #4
 8000a16:	400b      	ands	r3, r1
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	4099      	lsls	r1, r3
 8000a1c:	000b      	movs	r3, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b004      	add	sp, #16
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	211f      	movs	r1, #31
 8000a40:	400a      	ands	r2, r1
 8000a42:	210f      	movs	r1, #15
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	0e9b      	lsrs	r3, r3, #26
 8000a50:	210f      	movs	r1, #15
 8000a52:	4019      	ands	r1, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	201f      	movs	r0, #31
 8000a58:	4003      	ands	r3, r0
 8000a5a:	4099      	lsls	r1, r3
 8000a5c:	000b      	movs	r3, r1
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b004      	add	sp, #16
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	035b      	lsls	r3, r3, #13
 8000a7e:	0b5b      	lsrs	r3, r3, #13
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	0352      	lsls	r2, r2, #13
 8000aa0:	0b52      	lsrs	r2, r2, #13
 8000aa2:	43d2      	mvns	r2, r2
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	0212      	lsls	r2, r2, #8
 8000ac8:	43d2      	mvns	r2, r2
 8000aca:	401a      	ands	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	4904      	ldr	r1, [pc, #16]	; (8000ae8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ad6:	400b      	ands	r3, r1
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b004      	add	sp, #16
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	07ffff00 	.word	0x07ffff00

08000aec <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d103      	bne.n	8000b08 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	330c      	adds	r3, #12
 8000b04:	001c      	movs	r4, r3
 8000b06:	e009      	b.n	8000b1c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	33a0      	adds	r3, #160	; 0xa0
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	0d5b      	lsrs	r3, r3, #21
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	2204      	movs	r2, #4
 8000b16:	4013      	ands	r3, r2
 8000b18:	18cb      	adds	r3, r1, r3
 8000b1a:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 8000b22:	400a      	ands	r2, r1
 8000b24:	43d2      	mvns	r2, r2
 8000b26:	401a      	ands	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b005      	add	sp, #20
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	7cc00000 	.word	0x7cc00000
 8000b40:	7cc7ffff 	.word	0x7cc7ffff

08000b44 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3320      	adds	r3, #32
 8000b56:	0018      	movs	r0, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	0d1b      	lsrs	r3, r3, #20
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	0d5b      	lsrs	r3, r3, #21
 8000b64:	2101      	movs	r1, #1
 8000b66:	400b      	ands	r3, r1
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	18c3      	adds	r3, r0, r3
 8000b6e:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 8000b74:	401a      	ands	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0419      	lsls	r1, r3, #16
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b005      	add	sp, #20
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	f000f000 	.word	0xf000f000

08000b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0552      	lsls	r2, r2, #21
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	6fffffe8 	.word	0x6fffffe8

08000bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	055b      	lsls	r3, r3, #21
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	055b      	lsls	r3, r3, #21
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d101      	bne.n	8000bd6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2201      	movs	r2, #1
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <LL_ADC_IsEnabled+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <LL_ADC_IsEnabled+0x1a>
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d101      	bne.n	8000c1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	605a      	str	r2, [r3, #4]
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	0052      	lsls	r2, r2, #1
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	605a      	str	r2, [r3, #4]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	605a      	str	r2, [r3, #4]
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	4393      	bics	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	605a      	str	r2, [r3, #4]
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <LL_ADC_DisableIT_AWD2+0x1c>)
 8000cee:	401a      	ands	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	605a      	str	r2, [r3, #4]
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	fffffeff 	.word	0xfffffeff

08000d00 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <LL_ADC_DisableIT_AWD3+0x1c>)
 8000d0e:	401a      	ands	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	605a      	str	r2, [r3, #4]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	fffffdff 	.word	0xfffffdff

08000d20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d28:	231f      	movs	r3, #31
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e1aa      	b.n	800109c <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10a      	bne.n	8000d64 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fcf3 	bl	800073c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2254      	movs	r2, #84	; 0x54
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff25 	bl	8000bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d114      	bne.n	8000d9c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ff0a 	bl	8000b90 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000d7c:	4bc9      	ldr	r3, [pc, #804]	; (80010a4 <HAL_ADC_Init+0x384>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	49c9      	ldr	r1, [pc, #804]	; (80010a8 <HAL_ADC_Init+0x388>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff f9bc 	bl	8000100 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000d8e:	e002      	b.n	8000d96 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f9      	bne.n	8000d90 <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ff09 	bl	8000bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d10f      	bne.n	8000dca <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	2210      	movs	r2, #16
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dba:	2201      	movs	r2, #1
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ff17 	bl	8000c02 <LL_ADC_REG_IsConversionOngoing>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	2210      	movs	r2, #16
 8000dde:	4013      	ands	r3, r2
 8000de0:	d000      	beq.n	8000de4 <HAL_ADC_Init+0xc4>
 8000de2:	e14e      	b.n	8001082 <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d000      	beq.n	8000dec <HAL_ADC_Init+0xcc>
 8000dea:	e14a      	b.n	8001082 <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	4aae      	ldr	r2, [pc, #696]	; (80010ac <HAL_ADC_Init+0x38c>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	2202      	movs	r2, #2
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff feed 	bl	8000be0 <LL_ADC_IsEnabled>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d137      	bne.n	8000e7a <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2218      	movs	r2, #24
 8000e12:	4393      	bics	r3, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	0899      	lsrs	r1, r3, #2
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	0f9b      	lsrs	r3, r3, #30
 8000e32:	079a      	lsls	r2, r3, #30
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	23c0      	movs	r3, #192	; 0xc0
 8000e42:	061b      	lsls	r3, r3, #24
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d018      	beq.n	8000e7a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d012      	beq.n	8000e7a <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	061b      	lsls	r3, r3, #24
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d00c      	beq.n	8000e7a <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8000e60:	4b93      	ldr	r3, [pc, #588]	; (80010b0 <HAL_ADC_Init+0x390>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a93      	ldr	r2, [pc, #588]	; (80010b4 <HAL_ADC_Init+0x394>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	23f0      	movs	r3, #240	; 0xf0
 8000e70:	039b      	lsls	r3, r3, #14
 8000e72:	401a      	ands	r2, r3
 8000e74:	4b8e      	ldr	r3, [pc, #568]	; (80010b0 <HAL_ADC_Init+0x390>)
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
 8000e7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e5b      	ldrb	r3, [r3, #25]
 8000e84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e9b      	ldrb	r3, [r3, #26]
 8000e8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <HAL_ADC_Init+0x17e>
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	015b      	lsls	r3, r3, #5
 8000e9c:	e000      	b.n	8000ea0 <HAL_ADC_Init+0x180>
 8000e9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ea0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ea6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da04      	bge.n	8000eba <HAL_ADC_Init+0x19a>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	e001      	b.n	8000ebe <HAL_ADC_Init+0x19e>
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000ebe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	212c      	movs	r1, #44	; 0x2c
 8000ec4:	5c5b      	ldrb	r3, [r3, r1]
 8000ec6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000ec8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	5c9b      	ldrb	r3, [r3, r2]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d115      	bne.n	8000f06 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7e9b      	ldrb	r3, [r3, #26]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d105      	bne.n	8000eee <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0252      	lsls	r2, r2, #9
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	e00b      	b.n	8000f06 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efe:	2201      	movs	r2, #1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00a      	beq.n	8000f24 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f12:	23e0      	movs	r3, #224	; 0xe0
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000f2c:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8000f32:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8000f38:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	223c      	movs	r2, #60	; 0x3c
 8000f44:	5c9b      	ldrb	r3, [r3, r2]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d103      	bne.n	8000f52 <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4a57      	ldr	r2, [pc, #348]	; (80010b8 <HAL_ADC_Init+0x398>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	4a53      	ldr	r2, [pc, #332]	; (80010bc <HAL_ADC_Init+0x39c>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	0019      	movs	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	001a      	movs	r2, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f7ff fd32 	bl	80009f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f96:	494a      	ldr	r1, [pc, #296]	; (80010c0 <HAL_ADC_Init+0x3a0>)
 8000f98:	001a      	movs	r2, r3
 8000f9a:	f7ff fd2a 	bl	80009f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d109      	bne.n	8000fba <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	4249      	negs	r1, r1
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8000fb8:	e03c      	b.n	8001034 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	039b      	lsls	r3, r3, #14
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d136      	bne.n	8001034 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	e00c      	b.n	8000fe6 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	40da      	lsrs	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d006      	beq.n	8000fee <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d9ef      	bls.n	8000fcc <HAL_ADC_Init+0x2ac>
 8000fec:	e000      	b.n	8000ff0 <HAL_ADC_Init+0x2d0>
        {
          break;
 8000fee:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d109      	bne.n	800100a <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2110      	movs	r1, #16
 8001002:	4249      	negs	r1, r1
 8001004:	430a      	orrs	r2, r1
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
 8001008:	e014      	b.n	8001034 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <HAL_ADC_Init+0x3a4>)
 8001016:	4694      	mov	ip, r2
 8001018:	4463      	add	r3, ip
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	221c      	movs	r2, #28
 800101e:	4013      	ands	r3, r2
 8001020:	2210      	movs	r2, #16
 8001022:	4252      	negs	r2, r2
 8001024:	409a      	lsls	r2, r3
 8001026:	0011      	movs	r1, r2
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_ADC_Init+0x3a8>)
 800103c:	4013      	ands	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	429a      	cmp	r2, r3
 8001042:	d10b      	bne.n	800105c <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	2203      	movs	r2, #3
 8001050:	4393      	bics	r3, r2
 8001052:	2201      	movs	r2, #1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800105a:	e01c      	b.n	8001096 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	2212      	movs	r2, #18
 8001062:	4393      	bics	r3, r2
 8001064:	2210      	movs	r2, #16
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001070:	2201      	movs	r2, #1
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8001078:	231f      	movs	r3, #31
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001080:	e009      	b.n	8001096 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	2210      	movs	r2, #16
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 800108e:	231f      	movs	r3, #31
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001096:	231f      	movs	r3, #31
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b008      	add	sp, #32
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000004 	.word	0x20000004
 80010a8:	00030d40 	.word	0x00030d40
 80010ac:	fffffefd 	.word	0xfffffefd
 80010b0:	40012708 	.word	0x40012708
 80010b4:	ffc3ffff 	.word	0xffc3ffff
 80010b8:	fffe0219 	.word	0xfffe0219
 80010bc:	dffffc02 	.word	0xdffffc02
 80010c0:	07ffff04 	.word	0x07ffff04
 80010c4:	3fffffff 	.word	0x3fffffff
 80010c8:	833fffe7 	.word	0x833fffe7

080010cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2317      	movs	r3, #23
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2254      	movs	r2, #84	; 0x54
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x24>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e1bc      	b.n	800146a <HAL_ADC_ConfigChannel+0x39e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2254      	movs	r2, #84	; 0x54
 80010f4:	2101      	movs	r1, #1
 80010f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff fd80 	bl	8000c02 <LL_ADC_REG_IsConversionOngoing>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d000      	beq.n	8001108 <HAL_ADC_ConfigChannel+0x3c>
 8001106:	e19f      	b.n	8001448 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d100      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x46>
 8001110:	e13e      	b.n	8001390 <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	061b      	lsls	r3, r3, #24
 800111a:	429a      	cmp	r2, r3
 800111c:	d004      	beq.n	8001128 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001122:	4abf      	ldr	r2, [pc, #764]	; (8001420 <HAL_ADC_ConfigChannel+0x354>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d108      	bne.n	800113a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0019      	movs	r1, r3
 8001132:	0010      	movs	r0, r2
 8001134:	f7ff fc9a 	bl	8000a6c <LL_ADC_REG_SetSequencerChAdd>
 8001138:	e0c9      	b.n	80012ce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	211f      	movs	r1, #31
 8001144:	400b      	ands	r3, r1
 8001146:	210f      	movs	r1, #15
 8001148:	4099      	lsls	r1, r3
 800114a:	000b      	movs	r3, r1
 800114c:	43db      	mvns	r3, r3
 800114e:	4013      	ands	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	035b      	lsls	r3, r3, #13
 8001158:	0b5b      	lsrs	r3, r3, #13
 800115a:	d105      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x9c>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0e9b      	lsrs	r3, r3, #26
 8001162:	221f      	movs	r2, #31
 8001164:	4013      	ands	r3, r2
 8001166:	e098      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2201      	movs	r2, #1
 800116e:	4013      	ands	r3, r2
 8001170:	d000      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xa8>
 8001172:	e091      	b.n	8001298 <HAL_ADC_ConfigChannel+0x1cc>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xb4>
 800117e:	e089      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1c8>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2204      	movs	r2, #4
 8001186:	4013      	ands	r3, r2
 8001188:	d000      	beq.n	800118c <HAL_ADC_ConfigChannel+0xc0>
 800118a:	e081      	b.n	8001290 <HAL_ADC_ConfigChannel+0x1c4>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2208      	movs	r2, #8
 8001192:	4013      	ands	r3, r2
 8001194:	d000      	beq.n	8001198 <HAL_ADC_ConfigChannel+0xcc>
 8001196:	e079      	b.n	800128c <HAL_ADC_ConfigChannel+0x1c0>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2210      	movs	r2, #16
 800119e:	4013      	ands	r3, r2
 80011a0:	d000      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0xd8>
 80011a2:	e071      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1bc>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2220      	movs	r2, #32
 80011aa:	4013      	ands	r3, r2
 80011ac:	d000      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0xe4>
 80011ae:	e069      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1b8>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2240      	movs	r2, #64	; 0x40
 80011b6:	4013      	ands	r3, r2
 80011b8:	d000      	beq.n	80011bc <HAL_ADC_ConfigChannel+0xf0>
 80011ba:	e061      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1b4>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	4013      	ands	r3, r2
 80011c4:	d000      	beq.n	80011c8 <HAL_ADC_ConfigChannel+0xfc>
 80011c6:	e059      	b.n	800127c <HAL_ADC_ConfigChannel+0x1b0>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4013      	ands	r3, r2
 80011d2:	d151      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1ac>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d149      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1a8>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4013      	ands	r3, r2
 80011ea:	d141      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1a4>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4013      	ands	r3, r2
 80011f6:	d139      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1a0>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	015b      	lsls	r3, r3, #5
 8001200:	4013      	ands	r3, r2
 8001202:	d131      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x19c>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	4013      	ands	r3, r2
 800120e:	d129      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x198>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	4013      	ands	r3, r2
 800121a:	d121      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x194>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	4013      	ands	r3, r2
 8001226:	d119      	bne.n	800125c <HAL_ADC_ConfigChannel+0x190>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	4013      	ands	r3, r2
 8001232:	d111      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x18c>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	029b      	lsls	r3, r3, #10
 800123c:	4013      	ands	r3, r2
 800123e:	d109      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x188>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	02db      	lsls	r3, r3, #11
 8001248:	4013      	ands	r3, r2
 800124a:	d001      	beq.n	8001250 <HAL_ADC_ConfigChannel+0x184>
 800124c:	2312      	movs	r3, #18
 800124e:	e024      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	2300      	movs	r3, #0
 8001252:	e022      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	2311      	movs	r3, #17
 8001256:	e020      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	2310      	movs	r3, #16
 800125a:	e01e      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	230f      	movs	r3, #15
 800125e:	e01c      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001260:	230e      	movs	r3, #14
 8001262:	e01a      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001264:	230d      	movs	r3, #13
 8001266:	e018      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001268:	230c      	movs	r3, #12
 800126a:	e016      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 800126c:	230b      	movs	r3, #11
 800126e:	e014      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001270:	230a      	movs	r3, #10
 8001272:	e012      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001274:	2309      	movs	r3, #9
 8001276:	e010      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001278:	2308      	movs	r3, #8
 800127a:	e00e      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2307      	movs	r3, #7
 800127e:	e00c      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2306      	movs	r3, #6
 8001282:	e00a      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2305      	movs	r3, #5
 8001286:	e008      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	2304      	movs	r3, #4
 800128a:	e006      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 800128c:	2303      	movs	r3, #3
 800128e:	e004      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_ADC_ConfigChannel+0x1ce>
 8001298:	2300      	movs	r3, #0
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	6852      	ldr	r2, [r2, #4]
 800129e:	201f      	movs	r0, #31
 80012a0:	4002      	ands	r2, r0
 80012a2:	4093      	lsls	r3, r2
 80012a4:	000a      	movs	r2, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d808      	bhi.n	80012ce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	001a      	movs	r2, r3
 80012ca:	f7ff fbaf 	bl	8000a2c <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	001a      	movs	r2, r3
 80012dc:	f7ff fbea 	bl	8000ab4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db00      	blt.n	80012ea <HAL_ADC_ConfigChannel+0x21e>
 80012e8:	e0b8      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fb73 	bl	80009d8 <LL_ADC_GetCommonPathInternalCh>
 80012f2:	0003      	movs	r3, r0
 80012f4:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_ADC_ConfigChannel+0x35c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d11d      	bne.n	800133c <HAL_ADC_ConfigChannel+0x270>
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	4013      	ands	r3, r2
 8001308:	d118      	bne.n	800133c <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	0412      	lsls	r2, r2, #16
 8001310:	4313      	orrs	r3, r2
 8001312:	4a44      	ldr	r2, [pc, #272]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 8001314:	0019      	movs	r1, r3
 8001316:	0010      	movs	r0, r2
 8001318:	f7ff fb4a 	bl	80009b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_ADC_ConfigChannel+0x360>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4943      	ldr	r1, [pc, #268]	; (8001430 <HAL_ADC_ConfigChannel+0x364>)
 8001322:	0018      	movs	r0, r3
 8001324:	f7fe feec 	bl	8000100 <__udivsi3>
 8001328:	0003      	movs	r3, r0
 800132a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 800132c:	e002      	b.n	8001334 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3b01      	subs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800133a:	e08f      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <HAL_ADC_ConfigChannel+0x368>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10e      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x298>
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	045b      	lsls	r3, r3, #17
 800134c:	4013      	ands	r3, r2
 800134e:	d109      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0452      	lsls	r2, r2, #17
 8001356:	4313      	orrs	r3, r2
 8001358:	4a32      	ldr	r2, [pc, #200]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 800135a:	0019      	movs	r1, r3
 800135c:	0010      	movs	r0, r2
 800135e:	f7ff fb27 	bl	80009b0 <LL_ADC_SetCommonPathInternalCh>
 8001362:	e07b      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a33      	ldr	r2, [pc, #204]	; (8001438 <HAL_ADC_ConfigChannel+0x36c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d000      	beq.n	8001370 <HAL_ADC_ConfigChannel+0x2a4>
 800136e:	e075      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	03db      	lsls	r3, r3, #15
 8001376:	4013      	ands	r3, r2
 8001378:	d000      	beq.n	800137c <HAL_ADC_ConfigChannel+0x2b0>
 800137a:	e06f      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	03d2      	lsls	r2, r2, #15
 8001382:	4313      	orrs	r3, r2
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 8001386:	0019      	movs	r1, r3
 8001388:	0010      	movs	r0, r2
 800138a:	f7ff fb11 	bl	80009b0 <LL_ADC_SetCommonPathInternalCh>
 800138e:	e065      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	429a      	cmp	r2, r3
 800139a:	d004      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_ADC_ConfigChannel+0x354>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d107      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0019      	movs	r1, r3
 80013b0:	0010      	movs	r0, r2
 80013b2:	f7ff fb6c 	bl	8000a8e <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da4e      	bge.n	800145c <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fb09 	bl	80009d8 <LL_ADC_GetCommonPathInternalCh>
 80013c6:	0003      	movs	r3, r0
 80013c8:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_ADC_ConfigChannel+0x35c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d108      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_ADC_ConfigChannel+0x370>)
 80013d8:	4013      	ands	r3, r2
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 80013dc:	0019      	movs	r1, r3
 80013de:	0010      	movs	r0, r2
 80013e0:	f7ff fae6 	bl	80009b0 <LL_ADC_SetCommonPathInternalCh>
 80013e4:	e03a      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_ADC_ConfigChannel+0x368>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d108      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <HAL_ADC_ConfigChannel+0x374>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 80013f8:	0019      	movs	r1, r3
 80013fa:	0010      	movs	r0, r2
 80013fc:	f7ff fad8 	bl	80009b0 <LL_ADC_SetCommonPathInternalCh>
 8001400:	e02c      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_ADC_ConfigChannel+0x36c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d127      	bne.n	800145c <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_ADC_ConfigChannel+0x378>)
 8001410:	4013      	ands	r3, r2
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_ADC_ConfigChannel+0x358>)
 8001414:	0019      	movs	r1, r3
 8001416:	0010      	movs	r0, r2
 8001418:	f7ff faca 	bl	80009b0 <LL_ADC_SetCommonPathInternalCh>
 800141c:	e01e      	b.n	800145c <HAL_ADC_ConfigChannel+0x390>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	80000004 	.word	0x80000004
 8001424:	40012708 	.word	0x40012708
 8001428:	b0001000 	.word	0xb0001000
 800142c:	20000004 	.word	0x20000004
 8001430:	00030d40 	.word	0x00030d40
 8001434:	b8004000 	.word	0xb8004000
 8001438:	b4002000 	.word	0xb4002000
 800143c:	ff7fffff 	.word	0xff7fffff
 8001440:	feffffff 	.word	0xfeffffff
 8001444:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	2220      	movs	r2, #32
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001454:	2317      	movs	r3, #23
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2254      	movs	r2, #84	; 0x54
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001464:	2317      	movs	r3, #23
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b006      	add	sp, #24
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)

08001474 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	230f      	movs	r3, #15
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2254      	movs	r2, #84	; 0x54
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_AnalogWDGConfig+0x20>
 8001490:	2302      	movs	r3, #2
 8001492:	e269      	b.n	8001968 <HAL_ADC_AnalogWDGConfig+0x4f4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2254      	movs	r2, #84	; 0x54
 8001498:	2101      	movs	r1, #1
 800149a:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fbae 	bl	8000c02 <LL_ADC_REG_IsConversionOngoing>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d000      	beq.n	80014ac <HAL_ADC_AnalogWDGConfig+0x38>
 80014aa:	e22a      	b.n	8001902 <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a93      	ldr	r2, [pc, #588]	; (8001700 <HAL_ADC_AnalogWDGConfig+0x28c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d142      	bne.n	800153c <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	0412      	lsls	r2, r2, #16
 80014be:	4293      	cmp	r3, r2
 80014c0:	d011      	beq.n	80014e6 <HAL_ADC_AnalogWDGConfig+0x72>
 80014c2:	22c0      	movs	r2, #192	; 0xc0
 80014c4:	0412      	lsls	r2, r2, #16
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d115      	bne.n	80014f6 <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4a8c      	ldr	r2, [pc, #560]	; (8001704 <HAL_ADC_AnalogWDGConfig+0x290>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	22c0      	movs	r2, #192	; 0xc0
 80014d8:	0412      	lsls	r2, r2, #16
 80014da:	4313      	orrs	r3, r2
 80014dc:	4988      	ldr	r1, [pc, #544]	; (8001700 <HAL_ADC_AnalogWDGConfig+0x28c>)
 80014de:	001a      	movs	r2, r3
 80014e0:	f7ff fb04 	bl	8000aec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80014e4:	e00f      	b.n	8001506 <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a87      	ldr	r2, [pc, #540]	; (8001708 <HAL_ADC_AnalogWDGConfig+0x294>)
 80014ec:	4984      	ldr	r1, [pc, #528]	; (8001700 <HAL_ADC_AnalogWDGConfig+0x28c>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff fafc 	bl	8000aec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80014f4:	e007      	b.n	8001506 <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4981      	ldr	r1, [pc, #516]	; (8001700 <HAL_ADC_AnalogWDGConfig+0x28c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff faf4 	bl	8000aec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001504:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	4a80      	ldr	r2, [pc, #512]	; (800170c <HAL_ADC_AnalogWDGConfig+0x298>)
 800150c:	401a      	ands	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff fb84 	bl	8000c24 <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	7b1b      	ldrb	r3, [r3, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff fb9e 	bl	8000c6a <LL_ADC_EnableIT_AWD1>
 800152e:	e1e8      	b.n	8001902 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff fbc4 	bl	8000cc2 <LL_ADC_DisableIT_AWD1>
 800153a:	e1e2      	b.n	8001902 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0412      	lsls	r2, r2, #16
 8001544:	4293      	cmp	r3, r2
 8001546:	d100      	bne.n	800154a <HAL_ADC_AnalogWDGConfig+0xd6>
 8001548:	e18f      	b.n	800186a <HAL_ADC_AnalogWDGConfig+0x3f6>
 800154a:	22c0      	movs	r2, #192	; 0xc0
 800154c:	0412      	lsls	r2, r2, #16
 800154e:	4293      	cmp	r3, r2
 8001550:	d000      	beq.n	8001554 <HAL_ADC_AnalogWDGConfig+0xe0>
 8001552:	e193      	b.n	800187c <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6d      	ldr	r2, [pc, #436]	; (8001710 <HAL_ADC_AnalogWDGConfig+0x29c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d000      	beq.n	8001560 <HAL_ADC_AnalogWDGConfig+0xec>
 800155e:	e0bc      	b.n	80016da <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	22a0      	movs	r2, #160	; 0xa0
 8001566:	5899      	ldr	r1, [r3, r2]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	035b      	lsls	r3, r3, #13
 800156e:	0b5b      	lsrs	r3, r3, #13
 8001570:	d108      	bne.n	8001584 <HAL_ADC_AnalogWDGConfig+0x110>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	0e9b      	lsrs	r3, r3, #26
 8001578:	221f      	movs	r2, #31
 800157a:	4013      	ands	r3, r2
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	e0a4      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	d000      	beq.n	8001590 <HAL_ADC_AnalogWDGConfig+0x11c>
 800158e:	e09d      	b.n	80016cc <HAL_ADC_AnalogWDGConfig+0x258>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d000      	beq.n	800159c <HAL_ADC_AnalogWDGConfig+0x128>
 800159a:	e095      	b.n	80016c8 <HAL_ADC_AnalogWDGConfig+0x254>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2204      	movs	r2, #4
 80015a2:	4013      	ands	r3, r2
 80015a4:	d000      	beq.n	80015a8 <HAL_ADC_AnalogWDGConfig+0x134>
 80015a6:	e08d      	b.n	80016c4 <HAL_ADC_AnalogWDGConfig+0x250>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2208      	movs	r2, #8
 80015ae:	4013      	ands	r3, r2
 80015b0:	d000      	beq.n	80015b4 <HAL_ADC_AnalogWDGConfig+0x140>
 80015b2:	e085      	b.n	80016c0 <HAL_ADC_AnalogWDGConfig+0x24c>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2210      	movs	r2, #16
 80015ba:	4013      	ands	r3, r2
 80015bc:	d000      	beq.n	80015c0 <HAL_ADC_AnalogWDGConfig+0x14c>
 80015be:	e07d      	b.n	80016bc <HAL_ADC_AnalogWDGConfig+0x248>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2220      	movs	r2, #32
 80015c6:	4013      	ands	r3, r2
 80015c8:	d000      	beq.n	80015cc <HAL_ADC_AnalogWDGConfig+0x158>
 80015ca:	e075      	b.n	80016b8 <HAL_ADC_AnalogWDGConfig+0x244>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	4013      	ands	r3, r2
 80015d4:	d000      	beq.n	80015d8 <HAL_ADC_AnalogWDGConfig+0x164>
 80015d6:	e06d      	b.n	80016b4 <HAL_ADC_AnalogWDGConfig+0x240>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	4013      	ands	r3, r2
 80015e0:	d000      	beq.n	80015e4 <HAL_ADC_AnalogWDGConfig+0x170>
 80015e2:	e065      	b.n	80016b0 <HAL_ADC_AnalogWDGConfig+0x23c>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d000      	beq.n	80015f2 <HAL_ADC_AnalogWDGConfig+0x17e>
 80015f0:	e05b      	b.n	80016aa <HAL_ADC_AnalogWDGConfig+0x236>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d152      	bne.n	80016a4 <HAL_ADC_AnalogWDGConfig+0x230>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4013      	ands	r3, r2
 8001608:	d149      	bne.n	800169e <HAL_ADC_AnalogWDGConfig+0x22a>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d140      	bne.n	8001698 <HAL_ADC_AnalogWDGConfig+0x224>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4013      	ands	r3, r2
 8001620:	d137      	bne.n	8001692 <HAL_ADC_AnalogWDGConfig+0x21e>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	4013      	ands	r3, r2
 800162c:	d12e      	bne.n	800168c <HAL_ADC_AnalogWDGConfig+0x218>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	01db      	lsls	r3, r3, #7
 8001636:	4013      	ands	r3, r2
 8001638:	d125      	bne.n	8001686 <HAL_ADC_AnalogWDGConfig+0x212>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	4013      	ands	r3, r2
 8001644:	d11c      	bne.n	8001680 <HAL_ADC_AnalogWDGConfig+0x20c>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4013      	ands	r3, r2
 8001650:	d113      	bne.n	800167a <HAL_ADC_AnalogWDGConfig+0x206>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d10a      	bne.n	8001674 <HAL_ADC_AnalogWDGConfig+0x200>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	02db      	lsls	r3, r3, #11
 8001666:	4013      	ands	r3, r2
 8001668:	d002      	beq.n	8001670 <HAL_ADC_AnalogWDGConfig+0x1fc>
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	02db      	lsls	r3, r3, #11
 800166e:	e02e      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001670:	2301      	movs	r3, #1
 8001672:	e02c      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	e029      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	e026      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	e023      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	01db      	lsls	r3, r3, #7
 800168a:	e020      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	019b      	lsls	r3, r3, #6
 8001690:	e01d      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	e01a      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	e017      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	e014      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	e011      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	e00e      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	e00c      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	e00a      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016b8:	2320      	movs	r3, #32
 80016ba:	e008      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016bc:	2310      	movs	r3, #16
 80016be:	e006      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016c0:	2308      	movs	r3, #8
 80016c2:	e004      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016c4:	2304      	movs	r3, #4
 80016c6:	e002      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e000      	b.n	80016ce <HAL_ADC_AnalogWDGConfig+0x25a>
 80016cc:	2301      	movs	r3, #1
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	430b      	orrs	r3, r1
 80016d4:	21a0      	movs	r1, #160	; 0xa0
 80016d6:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 80016d8:	e0d9      	b.n	800188e <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	22a4      	movs	r2, #164	; 0xa4
 80016e0:	5899      	ldr	r1, [r3, r2]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	035b      	lsls	r3, r3, #13
 80016e8:	0b5b      	lsrs	r3, r3, #13
 80016ea:	d113      	bne.n	8001714 <HAL_ADC_AnalogWDGConfig+0x2a0>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	0e9b      	lsrs	r3, r3, #26
 80016f2:	221f      	movs	r2, #31
 80016f4:	4013      	ands	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	409a      	lsls	r2, r3
 80016fa:	0013      	movs	r3, r2
 80016fc:	e0af      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	7cc00000 	.word	0x7cc00000
 8001704:	fc07ffff 	.word	0xfc07ffff
 8001708:	0087ffff 	.word	0x0087ffff
 800170c:	fffeffff 	.word	0xfffeffff
 8001710:	0017ffff 	.word	0x0017ffff
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2201      	movs	r2, #1
 800171a:	4013      	ands	r3, r2
 800171c:	d000      	beq.n	8001720 <HAL_ADC_AnalogWDGConfig+0x2ac>
 800171e:	e09d      	b.n	800185c <HAL_ADC_AnalogWDGConfig+0x3e8>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d000      	beq.n	800172c <HAL_ADC_AnalogWDGConfig+0x2b8>
 800172a:	e095      	b.n	8001858 <HAL_ADC_AnalogWDGConfig+0x3e4>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2204      	movs	r2, #4
 8001732:	4013      	ands	r3, r2
 8001734:	d000      	beq.n	8001738 <HAL_ADC_AnalogWDGConfig+0x2c4>
 8001736:	e08d      	b.n	8001854 <HAL_ADC_AnalogWDGConfig+0x3e0>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2208      	movs	r2, #8
 800173e:	4013      	ands	r3, r2
 8001740:	d000      	beq.n	8001744 <HAL_ADC_AnalogWDGConfig+0x2d0>
 8001742:	e085      	b.n	8001850 <HAL_ADC_AnalogWDGConfig+0x3dc>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2210      	movs	r2, #16
 800174a:	4013      	ands	r3, r2
 800174c:	d000      	beq.n	8001750 <HAL_ADC_AnalogWDGConfig+0x2dc>
 800174e:	e07d      	b.n	800184c <HAL_ADC_AnalogWDGConfig+0x3d8>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2220      	movs	r2, #32
 8001756:	4013      	ands	r3, r2
 8001758:	d000      	beq.n	800175c <HAL_ADC_AnalogWDGConfig+0x2e8>
 800175a:	e075      	b.n	8001848 <HAL_ADC_AnalogWDGConfig+0x3d4>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	4013      	ands	r3, r2
 8001764:	d000      	beq.n	8001768 <HAL_ADC_AnalogWDGConfig+0x2f4>
 8001766:	e06d      	b.n	8001844 <HAL_ADC_AnalogWDGConfig+0x3d0>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	4013      	ands	r3, r2
 8001770:	d000      	beq.n	8001774 <HAL_ADC_AnalogWDGConfig+0x300>
 8001772:	e065      	b.n	8001840 <HAL_ADC_AnalogWDGConfig+0x3cc>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4013      	ands	r3, r2
 800177e:	d000      	beq.n	8001782 <HAL_ADC_AnalogWDGConfig+0x30e>
 8001780:	e05b      	b.n	800183a <HAL_ADC_AnalogWDGConfig+0x3c6>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d152      	bne.n	8001834 <HAL_ADC_AnalogWDGConfig+0x3c0>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4013      	ands	r3, r2
 8001798:	d149      	bne.n	800182e <HAL_ADC_AnalogWDGConfig+0x3ba>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4013      	ands	r3, r2
 80017a4:	d140      	bne.n	8001828 <HAL_ADC_AnalogWDGConfig+0x3b4>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	4013      	ands	r3, r2
 80017b0:	d137      	bne.n	8001822 <HAL_ADC_AnalogWDGConfig+0x3ae>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	019b      	lsls	r3, r3, #6
 80017ba:	4013      	ands	r3, r2
 80017bc:	d12e      	bne.n	800181c <HAL_ADC_AnalogWDGConfig+0x3a8>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	01db      	lsls	r3, r3, #7
 80017c6:	4013      	ands	r3, r2
 80017c8:	d125      	bne.n	8001816 <HAL_ADC_AnalogWDGConfig+0x3a2>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4013      	ands	r3, r2
 80017d4:	d11c      	bne.n	8001810 <HAL_ADC_AnalogWDGConfig+0x39c>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	4013      	ands	r3, r2
 80017e0:	d113      	bne.n	800180a <HAL_ADC_AnalogWDGConfig+0x396>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4013      	ands	r3, r2
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_AnalogWDGConfig+0x390>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	02db      	lsls	r3, r3, #11
 80017f6:	4013      	ands	r3, r2
 80017f8:	d002      	beq.n	8001800 <HAL_ADC_AnalogWDGConfig+0x38c>
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	02db      	lsls	r3, r3, #11
 80017fe:	e02e      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001800:	2301      	movs	r3, #1
 8001802:	e02c      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	029b      	lsls	r3, r3, #10
 8001808:	e029      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	e026      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	e023      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	01db      	lsls	r3, r3, #7
 800181a:	e020      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	019b      	lsls	r3, r3, #6
 8001820:	e01d      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	e01a      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	e017      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	e014      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	e011      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	e00e      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	e00c      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001844:	2340      	movs	r3, #64	; 0x40
 8001846:	e00a      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001848:	2320      	movs	r3, #32
 800184a:	e008      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800184c:	2310      	movs	r3, #16
 800184e:	e006      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001850:	2308      	movs	r3, #8
 8001852:	e004      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001854:	2304      	movs	r3, #4
 8001856:	e002      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 8001858:	2302      	movs	r3, #2
 800185a:	e000      	b.n	800185e <HAL_ADC_AnalogWDGConfig+0x3ea>
 800185c:	2301      	movs	r3, #1
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	430b      	orrs	r3, r1
 8001864:	21a4      	movs	r1, #164	; 0xa4
 8001866:	5053      	str	r3, [r2, r1]
          break;
 8001868:	e011      	b.n	800188e <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <HAL_ADC_AnalogWDGConfig+0x4fc>)
 8001874:	0019      	movs	r1, r3
 8001876:	f7ff f939 	bl	8000aec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800187a:	e008      	b.n	800188e <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	0019      	movs	r1, r3
 8001888:	f7ff f930 	bl	8000aec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800188c:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <HAL_ADC_AnalogWDGConfig+0x500>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d11a      	bne.n	80018ce <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a36      	ldr	r2, [pc, #216]	; (8001978 <HAL_ADC_AnalogWDGConfig+0x504>)
 800189e:	401a      	ands	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff f9c6 	bl	8000c3a <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	7b1b      	ldrb	r3, [r3, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff f9e3 	bl	8000c86 <LL_ADC_EnableIT_AWD2>
 80018c0:	e01f      	b.n	8001902 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff fa0a 	bl	8000ce0 <LL_ADC_DisableIT_AWD2>
 80018cc:	e019      	b.n	8001902 <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	4a2a      	ldr	r2, [pc, #168]	; (800197c <HAL_ADC_AnalogWDGConfig+0x508>)
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff f9b7 	bl	8000c52 <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	7b1b      	ldrb	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7ff f9d7 	bl	8000ca4 <LL_ADC_EnableIT_AWD3>
 80018f6:	e004      	b.n	8001902 <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff f9ff 	bl	8000d00 <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_ADC_AnalogWDGConfig+0x50c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d118      	bne.n	800193e <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	2103      	movs	r1, #3
 800191a:	400b      	ands	r3, r1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	2103      	movs	r1, #3
 8001932:	400b      	ands	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	e005      	b.n	800194a <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	f7ff f8f5 	bl	8000b44 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2254      	movs	r2, #84	; 0x54
 800195e:	2100      	movs	r1, #0
 8001960:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001962:	230f      	movs	r3, #15
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b006      	add	sp, #24
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0087ffff 	.word	0x0087ffff
 8001974:	0017ffff 	.word	0x0017ffff
 8001978:	fffdffff 	.word	0xfffdffff
 800197c:	fffbffff 	.word	0xfffbffff
 8001980:	7cc00000 	.word	0x7cc00000

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	0002      	movs	r2, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b7f      	cmp	r3, #127	; 0x7f
 8001998:	d828      	bhi.n	80019ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800199a:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <__NVIC_SetPriority+0xd4>)
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	33c0      	adds	r3, #192	; 0xc0
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	589b      	ldr	r3, [r3, r2]
 80019aa:	1dfa      	adds	r2, r7, #7
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	0011      	movs	r1, r2
 80019b0:	2203      	movs	r2, #3
 80019b2:	400a      	ands	r2, r1
 80019b4:	00d2      	lsls	r2, r2, #3
 80019b6:	21ff      	movs	r1, #255	; 0xff
 80019b8:	4091      	lsls	r1, r2
 80019ba:	000a      	movs	r2, r1
 80019bc:	43d2      	mvns	r2, r2
 80019be:	401a      	ands	r2, r3
 80019c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	22ff      	movs	r2, #255	; 0xff
 80019c8:	401a      	ands	r2, r3
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	0018      	movs	r0, r3
 80019d0:	2303      	movs	r3, #3
 80019d2:	4003      	ands	r3, r0
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d8:	481f      	ldr	r0, [pc, #124]	; (8001a58 <__NVIC_SetPriority+0xd4>)
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	430a      	orrs	r2, r1
 80019e4:	33c0      	adds	r3, #192	; 0xc0
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019ea:	e031      	b.n	8001a50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ec:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <__NVIC_SetPriority+0xd8>)
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	0019      	movs	r1, r3
 80019f4:	230f      	movs	r3, #15
 80019f6:	400b      	ands	r3, r1
 80019f8:	3b08      	subs	r3, #8
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3306      	adds	r3, #6
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	3304      	adds	r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1dfa      	adds	r2, r7, #7
 8001a08:	7812      	ldrb	r2, [r2, #0]
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	400a      	ands	r2, r1
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	21ff      	movs	r1, #255	; 0xff
 8001a14:	4091      	lsls	r1, r2
 8001a16:	000a      	movs	r2, r1
 8001a18:	43d2      	mvns	r2, r2
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	401a      	ands	r2, r3
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	4003      	ands	r3, r0
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <__NVIC_SetPriority+0xd8>)
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	001c      	movs	r4, r3
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	4023      	ands	r3, r4
 8001a40:	3b08      	subs	r3, #8
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	430a      	orrs	r2, r1
 8001a46:	3306      	adds	r3, #6
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	18c3      	adds	r3, r0, r3
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b003      	add	sp, #12
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <SysTick_Config+0x40>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e010      	b.n	8001a98 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <SysTick_Config+0x44>)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	425b      	negs	r3, r3
 8001a82:	2103      	movs	r1, #3
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff7d 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SysTick_Config+0x44>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x44>)
 8001a92:	2207      	movs	r2, #7
 8001a94:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	00ffffff 	.word	0x00ffffff
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	1c02      	adds	r2, r0, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff ffbf 	bl	8001a60 <SysTick_Config>
 8001ae2:	0003      	movs	r3, r0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e147      	b.n	8001d8c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4091      	lsls	r1, r2
 8001b06:	000a      	movs	r2, r1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d100      	bne.n	8001b14 <HAL_GPIO_Init+0x28>
 8001b12:	e138      	b.n	8001d86 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x38>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	58d3      	ldr	r3, [r2, r3]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2207      	movs	r2, #7
 8001b36:	4013      	ands	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	43da      	mvns	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2107      	movs	r1, #7
 8001b50:	400b      	ands	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	409a      	lsls	r2, r3
 8001b56:	0013      	movs	r3, r2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	6939      	ldr	r1, [r7, #16]
 8001b6a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_GPIO_Init+0xd4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d007      	beq.n	8001bc0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb4:	2b11      	cmp	r3, #17
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	0013      	movs	r3, r2
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
 8001c14:	0013      	movs	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <HAL_GPIO_Init+0x174>
 8001c5e:	e092      	b.n	8001d86 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3318      	adds	r3, #24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	589b      	ldr	r3, [r3, r2]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	220f      	movs	r2, #15
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	23a0      	movs	r3, #160	; 0xa0
 8001c88:	05db      	lsls	r3, r3, #23
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x1ca>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x1c6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a44      	ldr	r2, [pc, #272]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x1c2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x1be>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x1cc>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x1cc>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x1cc>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x1cc>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	2103      	movs	r1, #3
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	00d2      	lsls	r2, r2, #3
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001cc8:	4936      	ldr	r1, [pc, #216]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3318      	adds	r3, #24
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cd6:	4a33      	ldr	r2, [pc, #204]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	58d3      	ldr	r3, [r2, r3]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cfc:	4929      	ldr	r1, [pc, #164]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001d06:	2384      	movs	r3, #132	; 0x84
 8001d08:	58d3      	ldr	r3, [r2, r3]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	029b      	lsls	r3, r3, #10
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2a:	491e      	ldr	r1, [pc, #120]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001d2c:	2284      	movs	r2, #132	; 0x84
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	035b      	lsls	r3, r3, #13
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43da      	mvns	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	039b      	lsls	r3, r3, #14
 8001d74:	4013      	ands	r3, r2
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	1e13      	subs	r3, r2, #0
 8001d96:	d000      	beq.n	8001d9a <HAL_GPIO_Init+0x2ae>
 8001d98:	e6b0      	b.n	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b006      	add	sp, #24
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	40021800 	.word	0x40021800
 8001da8:	50000400 	.word	0x50000400
 8001dac:	50000800 	.word	0x50000800
 8001db0:	50000c00 	.word	0x50000c00

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	0008      	movs	r0, r1
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	1cbb      	adds	r3, r7, #2
 8001dc2:	1c02      	adds	r2, r0, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	1c7b      	adds	r3, r7, #1
 8001dc8:	1c0a      	adds	r2, r1, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	1c7b      	adds	r3, r7, #1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd4:	1cbb      	adds	r3, r7, #2
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dde:	1cbb      	adds	r3, r7, #2
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d11f      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	0013      	movs	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	189b      	adds	r3, r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4912      	ldr	r1, [pc, #72]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7fe f96c 	bl	8000100 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e2e:	e008      	b.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e001      	b.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e009      	b.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d0ed      	beq.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40007000 	.word	0x40007000
 8001e64:	fffff9ff 	.word	0xfffff9ff
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	000f4240 	.word	0x000f4240

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e2f9      	b.n	8002476 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x1e>
 8001e8c:	e07c      	b.n	8001f88 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4bc3      	ldr	r3, [pc, #780]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2238      	movs	r2, #56	; 0x38
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4bc0      	ldr	r3, [pc, #768]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0x3e>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4bb9      	ldr	r3, [pc, #740]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d062      	beq.n	8001f86 <HAL_RCC_OscConfig+0x116>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d15e      	bne.n	8001f86 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e2d4      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	025b      	lsls	r3, r3, #9
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x78>
 8001ed8:	4bb0      	ldr	r3, [pc, #704]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4baf      	ldr	r3, [pc, #700]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0249      	lsls	r1, r1, #9
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e020      	b.n	8001f2a <HAL_RCC_OscConfig+0xba>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	23a0      	movs	r3, #160	; 0xa0
 8001eee:	02db      	lsls	r3, r3, #11
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d10e      	bne.n	8001f12 <HAL_RCC_OscConfig+0xa2>
 8001ef4:	4ba9      	ldr	r3, [pc, #676]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4ba8      	ldr	r3, [pc, #672]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	02c9      	lsls	r1, r1, #11
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	4ba6      	ldr	r3, [pc, #664]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4ba5      	ldr	r3, [pc, #660]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0249      	lsls	r1, r1, #9
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0xba>
 8001f12:	4ba2      	ldr	r3, [pc, #648]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4ba1      	ldr	r3, [pc, #644]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f18:	49a1      	ldr	r1, [pc, #644]	; (80021a0 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	4b9f      	ldr	r3, [pc, #636]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b9e      	ldr	r3, [pc, #632]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f24:	499f      	ldr	r1, [pc, #636]	; (80021a4 <HAL_RCC_OscConfig+0x334>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d014      	beq.n	8001f5c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe fd11 	bl	8000958 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fd0c 	bl	8000958 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e293      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4e:	4b93      	ldr	r3, [pc, #588]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	4013      	ands	r3, r2
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xcc>
 8001f5a:	e015      	b.n	8001f88 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fcfc 	bl	8000958 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f66:	f7fe fcf7 	bl	8000958 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e27e      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f78:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0xf6>
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d100      	bne.n	8001f94 <HAL_RCC_OscConfig+0x124>
 8001f92:	e099      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2238      	movs	r2, #56	; 0x38
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f9e:	4b7f      	ldr	r3, [pc, #508]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x144>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d002      	beq.n	8001fba <HAL_RCC_OscConfig+0x14a>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d135      	bne.n	8002026 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fba:	4b78      	ldr	r3, [pc, #480]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x162>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e251      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a74      	ldr	r2, [pc, #464]	; (80021a8 <HAL_RCC_OscConfig+0x338>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	021a      	lsls	r2, r3, #8
 8001fe2:	4b6e      	ldr	r3, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fee:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x33c>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002002:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	2207      	movs	r2, #7
 800200a:	4013      	ands	r3, r2
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x340>)
 800200e:	40da      	lsrs	r2, r3
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x344>)
 8002012:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_OscConfig+0x348>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fc43 	bl	80008a4 <HAL_InitTick>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d051      	beq.n	80020c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e227      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d030      	beq.n	8002090 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800202e:	4b5b      	ldr	r3, [pc, #364]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5e      	ldr	r2, [pc, #376]	; (80021ac <HAL_RCC_OscConfig+0x33c>)
 8002034:	4013      	ands	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	4b57      	ldr	r3, [pc, #348]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002042:	4b56      	ldr	r3, [pc, #344]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b55      	ldr	r3, [pc, #340]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	0049      	lsls	r1, r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fc82 	bl	8000958 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe fc7d 	bl	8000958 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e204      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4013      	ands	r3, r2
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_RCC_OscConfig+0x338>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	021a      	lsls	r2, r3, #8
 8002088:	4b44      	ldr	r3, [pc, #272]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e01b      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002096:	4949      	ldr	r1, [pc, #292]	; (80021bc <HAL_RCC_OscConfig+0x34c>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fc5c 	bl	8000958 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7fe fc57 	bl	8000958 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e1de      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4013      	ands	r3, r2
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x236>
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2208      	movs	r2, #8
 80020ce:	4013      	ands	r3, r2
 80020d0:	d047      	beq.n	8002162 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020d2:	4b32      	ldr	r3, [pc, #200]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2238      	movs	r2, #56	; 0x38
 80020d8:	4013      	ands	r3, r2
 80020da:	2b18      	cmp	r3, #24
 80020dc:	d10a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d03c      	beq.n	8002162 <HAL_RCC_OscConfig+0x2f2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d138      	bne.n	8002162 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e1c0      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 80020fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002102:	2101      	movs	r1, #1
 8002104:	430a      	orrs	r2, r1
 8002106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fc26 	bl	8000958 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe fc21 	bl	8000958 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1a8      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	2202      	movs	r2, #2
 800212a:	4013      	ands	r3, r2
 800212c:	d0f1      	beq.n	8002112 <HAL_RCC_OscConfig+0x2a2>
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fc0c 	bl	8000958 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002146:	f7fe fc07 	bl	8000958 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e18e      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	2202      	movs	r2, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d1f1      	bne.n	8002146 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2204      	movs	r2, #4
 8002168:	4013      	ands	r3, r2
 800216a:	d100      	bne.n	800216e <HAL_RCC_OscConfig+0x2fe>
 800216c:	e0c6      	b.n	80022fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	231f      	movs	r3, #31
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2238      	movs	r2, #56	; 0x38
 800217c:	4013      	ands	r3, r2
 800217e:	2b20      	cmp	r3, #32
 8002180:	d11e      	bne.n	80021c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_OscConfig+0x32c>)
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d100      	bne.n	800218e <HAL_RCC_OscConfig+0x31e>
 800218c:	e0b6      	b.n	80022fc <HAL_RCC_OscConfig+0x48c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d000      	beq.n	8002198 <HAL_RCC_OscConfig+0x328>
 8002196:	e0b1      	b.n	80022fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e16c      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
 800219c:	40021000 	.word	0x40021000
 80021a0:	fffeffff 	.word	0xfffeffff
 80021a4:	fffbffff 	.word	0xfffbffff
 80021a8:	ffff80ff 	.word	0xffff80ff
 80021ac:	ffffc7ff 	.word	0xffffc7ff
 80021b0:	00f42400 	.word	0x00f42400
 80021b4:	20000004 	.word	0x20000004
 80021b8:	20000008 	.word	0x20000008
 80021bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021c0:	4baf      	ldr	r3, [pc, #700]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80021c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	055b      	lsls	r3, r3, #21
 80021c8:	4013      	ands	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x360>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x362>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d011      	beq.n	80021fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4baa      	ldr	r3, [pc, #680]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80021d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021da:	4ba9      	ldr	r3, [pc, #676]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	0549      	lsls	r1, r1, #21
 80021e0:	430a      	orrs	r2, r1
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e4:	4ba6      	ldr	r3, [pc, #664]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80021e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021f2:	231f      	movs	r3, #31
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fa:	4ba2      	ldr	r3, [pc, #648]	; (8002484 <HAL_RCC_OscConfig+0x614>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4013      	ands	r3, r2
 8002204:	d11a      	bne.n	800223c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002206:	4b9f      	ldr	r3, [pc, #636]	; (8002484 <HAL_RCC_OscConfig+0x614>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b9e      	ldr	r3, [pc, #632]	; (8002484 <HAL_RCC_OscConfig+0x614>)
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	0049      	lsls	r1, r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002214:	f7fe fba0 	bl	8000958 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fb9b 	bl	8000958 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e122      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x614>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4013      	ands	r3, r2
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x3e2>
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002248:	4b8d      	ldr	r3, [pc, #564]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800224a:	2101      	movs	r1, #1
 800224c:	430a      	orrs	r2, r1
 800224e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x41c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b05      	cmp	r3, #5
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x404>
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800225c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800225e:	4b88      	ldr	r3, [pc, #544]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002260:	2104      	movs	r1, #4
 8002262:	430a      	orrs	r2, r1
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c
 8002266:	4b86      	ldr	r3, [pc, #536]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800226a:	4b85      	ldr	r3, [pc, #532]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800226c:	2101      	movs	r1, #1
 800226e:	430a      	orrs	r2, r1
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0x41c>
 8002274:	4b82      	ldr	r3, [pc, #520]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002278:	4b81      	ldr	r3, [pc, #516]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800227a:	2101      	movs	r1, #1
 800227c:	438a      	bics	r2, r1
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002280:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002284:	4b7e      	ldr	r3, [pc, #504]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002286:	2104      	movs	r1, #4
 8002288:	438a      	bics	r2, r1
 800228a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d014      	beq.n	80022be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fb60 	bl	8000958 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229c:	e009      	b.n	80022b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fb5b 	bl	8000958 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_RCC_OscConfig+0x618>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0e1      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b2:	4b73      	ldr	r3, [pc, #460]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x42e>
 80022bc:	e013      	b.n	80022e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe fb4b 	bl	8000958 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c6:	e009      	b.n	80022dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe fb46 	bl	8000958 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	4a6d      	ldr	r2, [pc, #436]	; (8002488 <HAL_RCC_OscConfig+0x618>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022e6:	231f      	movs	r3, #31
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80022f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022f4:	4b62      	ldr	r3, [pc, #392]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80022f6:	4965      	ldr	r1, [pc, #404]	; (800248c <HAL_RCC_OscConfig+0x61c>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d100      	bne.n	8002306 <HAL_RCC_OscConfig+0x496>
 8002304:	e0b6      	b.n	8002474 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002306:	4b5e      	ldr	r3, [pc, #376]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2238      	movs	r2, #56	; 0x38
 800230c:	4013      	ands	r3, r2
 800230e:	2b10      	cmp	r3, #16
 8002310:	d100      	bne.n	8002314 <HAL_RCC_OscConfig+0x4a4>
 8002312:	e07e      	b.n	8002412 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d153      	bne.n	80023c4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002322:	495b      	ldr	r1, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x620>)
 8002324:	400a      	ands	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fb16 	bl	8000958 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fb11 	bl	8000958 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e098      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	049b      	lsls	r3, r3, #18
 800234c:	4013      	ands	r3, r2
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a4f      	ldr	r2, [pc, #316]	; (8002494 <HAL_RCC_OscConfig+0x624>)
 8002356:	4013      	ands	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1a      	ldr	r2, [r3, #32]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	431a      	orrs	r2, r3
 8002378:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800237a:	430a      	orrs	r2, r1
 800237c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237e:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0449      	lsls	r1, r1, #17
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800238c:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0549      	lsls	r1, r1, #21
 8002396:	430a      	orrs	r2, r1
 8002398:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fadd 	bl	8000958 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fad8 	bl	8000958 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e05f      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	049b      	lsls	r3, r3, #18
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x534>
 80023c2:	e057      	b.n	8002474 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023ca:	4931      	ldr	r1, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x620>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023d6:	2103      	movs	r1, #3
 80023d8:	438a      	bics	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 80023e2:	492d      	ldr	r1, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x628>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fab6 	bl	8000958 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe fab1 	bl	8000958 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e038      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	049b      	lsls	r3, r3, #18
 800240c:	4013      	ands	r3, r2
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x582>
 8002410:	e030      	b.n	8002474 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e02b      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_RCC_OscConfig+0x610>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2203      	movs	r2, #3
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	429a      	cmp	r2, r3
 8002430:	d11e      	bne.n	8002470 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2270      	movs	r2, #112	; 0x70
 8002436:	401a      	ands	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d117      	bne.n	8002470 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	23fe      	movs	r3, #254	; 0xfe
 8002444:	01db      	lsls	r3, r3, #7
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d10e      	bne.n	8002470 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	23f8      	movs	r3, #248	; 0xf8
 8002456:	039b      	lsls	r3, r3, #14
 8002458:	401a      	ands	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	0f5b      	lsrs	r3, r3, #29
 8002466:	075a      	lsls	r2, r3, #29
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b008      	add	sp, #32
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	00001388 	.word	0x00001388
 800248c:	efffffff 	.word	0xefffffff
 8002490:	feffffff 	.word	0xfeffffff
 8002494:	1fc1808c 	.word	0x1fc1808c
 8002498:	effeffff 	.word	0xeffeffff

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0e9      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2207      	movs	r2, #7
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d91e      	bls.n	80024fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2207      	movs	r2, #7
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fa42 	bl	8000958 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024d8:	e009      	b.n	80024ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024da:	f7fe fa3d 	bl	8000958 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_ClockConfig+0x1f4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0ca      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2207      	movs	r2, #7
 80024f4:	4013      	ands	r3, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d015      	beq.n	8002532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2204      	movs	r2, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d006      	beq.n	800251e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002510:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002516:	21e0      	movs	r1, #224	; 0xe0
 8002518:	01c9      	lsls	r1, r1, #7
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251e:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4a5d      	ldr	r2, [pc, #372]	; (8002698 <HAL_RCC_ClockConfig+0x1fc>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d057      	beq.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	029b      	lsls	r3, r3, #10
 800254c:	4013      	ands	r3, r2
 800254e:	d12b      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e097      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d107      	bne.n	800256c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	049b      	lsls	r3, r3, #18
 8002564:	4013      	ands	r3, r2
 8002566:	d11f      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e08b      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4013      	ands	r3, r2
 800257e:	d113      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e07f      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d106      	bne.n	800259a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258c:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d108      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e074      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e06d      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a8:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2207      	movs	r2, #7
 80025ae:	4393      	bics	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe f9cc 	bl	8000958 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c4:	e009      	b.n	80025da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c6:	f7fe f9c7 	bl	8000958 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	4a2f      	ldr	r2, [pc, #188]	; (8002690 <HAL_RCC_ClockConfig+0x1f4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e054      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2238      	movs	r2, #56	; 0x38
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1ec      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2207      	movs	r2, #7
 80025f2:	4013      	ands	r3, r2
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d21e      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2207      	movs	r2, #7
 8002600:	4393      	bics	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800260c:	f7fe f9a4 	bl	8000958 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002614:	e009      	b.n	800262a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002616:	f7fe f99f 	bl	8000958 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <HAL_RCC_ClockConfig+0x1f4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e02c      	b.n	8002684 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2207      	movs	r2, #7
 8002630:	4013      	ands	r3, r2
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2204      	movs	r2, #4
 800263e:	4013      	ands	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_RCC_ClockConfig+0x200>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002656:	f000 f829 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800265a:	0001      	movs	r1, r0
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	220f      	movs	r2, #15
 8002664:	401a      	ands	r2, r3
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x204>)
 8002668:	0092      	lsls	r2, r2, #2
 800266a:	58d3      	ldr	r3, [r2, r3]
 800266c:	221f      	movs	r2, #31
 800266e:	4013      	ands	r3, r2
 8002670:	000a      	movs	r2, r1
 8002672:	40da      	lsrs	r2, r3
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_ClockConfig+0x208>)
 8002676:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x20c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0018      	movs	r0, r3
 800267e:	f7fe f911 	bl	80008a4 <HAL_InitTick>
 8002682:	0003      	movs	r3, r0
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40022000 	.word	0x40022000
 8002690:	00001388 	.word	0x00001388
 8002694:	40021000 	.word	0x40021000
 8002698:	fffff0ff 	.word	0xfffff0ff
 800269c:	ffff8fff 	.word	0xffff8fff
 80026a0:	08002a6c 	.word	0x08002a6c
 80026a4:	20000004 	.word	0x20000004
 80026a8:	20000008 	.word	0x20000008

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026b2:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2238      	movs	r2, #56	; 0x38
 80026b8:	4013      	ands	r3, r2
 80026ba:	d10f      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0adb      	lsrs	r3, r3, #11
 80026c2:	2207      	movs	r2, #7
 80026c4:	4013      	ands	r3, r2
 80026c6:	2201      	movs	r2, #1
 80026c8:	409a      	lsls	r2, r3
 80026ca:	0013      	movs	r3, r2
 80026cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	4835      	ldr	r0, [pc, #212]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026d2:	f7fd fd15 	bl	8000100 <__udivsi3>
 80026d6:	0003      	movs	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	e05d      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2238      	movs	r2, #56	; 0x38
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_RCC_GetSysClockFreq+0x100>)
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e054      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2238      	movs	r2, #56	; 0x38
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d138      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2203      	movs	r2, #3
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	2207      	movs	r2, #7
 800270c:	4013      	ands	r3, r2
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	4824      	ldr	r0, [pc, #144]	; (80027ac <HAL_RCC_GetSysClockFreq+0x100>)
 800271c:	f7fd fcf0 	bl	8000100 <__udivsi3>
 8002720:	0003      	movs	r3, r0
 8002722:	0019      	movs	r1, r3
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	227f      	movs	r2, #127	; 0x7f
 800272c:	4013      	ands	r3, r2
 800272e:	434b      	muls	r3, r1
 8002730:	617b      	str	r3, [r7, #20]
        break;
 8002732:	e00d      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	481c      	ldr	r0, [pc, #112]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002738:	f7fd fce2 	bl	8000100 <__udivsi3>
 800273c:	0003      	movs	r3, r0
 800273e:	0019      	movs	r1, r3
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	227f      	movs	r2, #127	; 0x7f
 8002748:	4013      	ands	r3, r2
 800274a:	434b      	muls	r3, r1
 800274c:	617b      	str	r3, [r7, #20]
        break;
 800274e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0f5b      	lsrs	r3, r3, #29
 8002756:	2207      	movs	r2, #7
 8002758:	4013      	ands	r3, r2
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7fd fccd 	bl	8000100 <__udivsi3>
 8002766:	0003      	movs	r3, r0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e015      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2238      	movs	r2, #56	; 0x38
 8002772:	4013      	ands	r3, r2
 8002774:	2b20      	cmp	r3, #32
 8002776:	d103      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2238      	movs	r2, #56	; 0x38
 8002786:	4013      	ands	r3, r2
 8002788:	2b18      	cmp	r3, #24
 800278a:	d103      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800278c:	23fa      	movs	r3, #250	; 0xfa
 800278e:	01db      	lsls	r3, r3, #7
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e001      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002798:	693b      	ldr	r3, [r7, #16]
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b006      	add	sp, #24
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	40021000 	.word	0x40021000
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027b8:	2313      	movs	r3, #19
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c0:	2312      	movs	r3, #18
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	4013      	ands	r3, r2
 80027d2:	d100      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027d4:	e0a4      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2311      	movs	r3, #17
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	055b      	lsls	r3, r3, #21
 80027e6:	4013      	ands	r3, r2
 80027e8:	d111      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b7c      	ldr	r3, [pc, #496]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ee:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0549      	lsls	r1, r1, #21
 80027f4:	430a      	orrs	r2, r1
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80027f8:	4b78      	ldr	r3, [pc, #480]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	055b      	lsls	r3, r3, #21
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2311      	movs	r3, #17
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280e:	4b74      	ldr	r3, [pc, #464]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0049      	lsls	r1, r1, #1
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281c:	f7fe f89c 	bl	8000958 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002824:	e00b      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7fe f897 	bl	8000958 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d904      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002834:	2313      	movs	r3, #19
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2203      	movs	r2, #3
 800283a:	701a      	strb	r2, [r3, #0]
        break;
 800283c:	e005      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283e:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4013      	ands	r3, r2
 8002848:	d0ed      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800284a:	2313      	movs	r3, #19
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d154      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4013      	ands	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d019      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	d014      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002870:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	4a5b      	ldr	r2, [pc, #364]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800287c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800287e:	4b57      	ldr	r3, [pc, #348]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	0249      	lsls	r1, r1, #9
 8002884:	430a      	orrs	r2, r1
 8002886:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002888:	4b54      	ldr	r3, [pc, #336]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800288a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800288e:	4956      	ldr	r1, [pc, #344]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002890:	400a      	ands	r2, r1
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002894:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d016      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe f859 	bl	8000958 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	e00c      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe f854 	bl	8000958 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d904      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80028bc:	2313      	movs	r3, #19
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2203      	movs	r2, #3
 80028c2:	701a      	strb	r2, [r3, #0]
            break;
 80028c4:	e004      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c6:	4b45      	ldr	r3, [pc, #276]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	d0ed      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80028d0:	2313      	movs	r3, #19
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	4a41      	ldr	r2, [pc, #260]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ee:	e00c      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f0:	2312      	movs	r3, #18
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2213      	movs	r2, #19
 80028f6:	18ba      	adds	r2, r7, r2
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e005      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fe:	2312      	movs	r3, #18
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2213      	movs	r2, #19
 8002904:	18ba      	adds	r2, r7, r2
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800290a:	2311      	movs	r3, #17
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800291a:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800291c:	400a      	ands	r2, r1
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4013      	ands	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800292a:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	2203      	movs	r2, #3
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293a:	430a      	orrs	r2, r1
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	4013      	ands	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002958:	430a      	orrs	r2, r1
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	4013      	ands	r3, r2
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	0899      	lsrs	r1, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002976:	430a      	orrs	r2, r1
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	429a      	cmp	r2, r3
 8002984:	d106      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	0249      	lsls	r1, r1, #9
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d016      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	01db      	lsls	r3, r3, #7
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	0249      	lsls	r1, r1, #9
 80029ca:	430a      	orrs	r2, r1
 80029cc:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80029ce:	2312      	movs	r3, #18
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b006      	add	sp, #24
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40007000 	.word	0x40007000
 80029e4:	fffffcff 	.word	0xfffffcff
 80029e8:	fffeffff 	.word	0xfffeffff
 80029ec:	00001388 	.word	0x00001388
 80029f0:	efffffff 	.word	0xefffffff
 80029f4:	ffffcfff 	.word	0xffffcfff
 80029f8:	ffff3fff 	.word	0xffff3fff

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4d0c      	ldr	r5, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	f000 f821 	bl	8002a54 <_init>
 8002a12:	4d0a      	ldr	r5, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	00b3      	lsls	r3, r6, #2
 8002a22:	58eb      	ldr	r3, [r5, r3]
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	00b3      	lsls	r3, r6, #2
 8002a2c:	58eb      	ldr	r3, [r5, r3]
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002aac 	.word	0x08002aac
 8002a38:	08002aac 	.word	0x08002aac
 8002a3c:	08002aac 	.word	0x08002aac
 8002a40:	08002ab0 	.word	0x08002ab0

08002a44 <memset>:
 8002a44:	0003      	movs	r3, r0
 8002a46:	1812      	adds	r2, r2, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	7019      	strb	r1, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
